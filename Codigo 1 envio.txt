using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Threading;
using System.Windows;
using System.Threading;
using Microsoft.FlightSimulator.SimConnect;
using AdvSerialCommunicator.Serial;
using AdvSerialCommunicator.Messaging;

namespace Simvars
{
    public enum DEFINITION
    {
        Dummy = 0
    };

    public enum REQUEST
    {
        Dummy = 0,
        Struct1
    };

    //String properties must be packed inside of a struct
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi, Pack = 1)]
    struct Struct1
    {
        //this is how you declare a fixed size string
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
        public String sValue;

        //other definitions can be added to this struct
        //...
    };

    public class SimvarRequest : ObservableObject
    {
        public DEFINITION eDef = DEFINITION.Dummy;
        public REQUEST eRequest = REQUEST.Dummy;

        public string sName { get; set; }
        // public string CodigoArduino { get; set; }
        public bool bIsString { get; set; }
        public double dValue
        {
            get { return m_dValue; }
            set { this.SetProperty(ref m_dValue, value); }
        }
        public double m_dValue = 0.0;
        public string sValue
        {
            get { return m_sValue; }
            set { this.SetProperty(ref m_sValue, value); }
        }
        public string m_sValue = null;

        public string sUnits { get; set; }

        public bool bPending = true;
        public bool bStillPending
        {
            get { return m_bStillPending; }
            set { this.SetProperty(ref m_bStillPending, value); }
        }
        public bool m_bStillPending = false;
    };

    public class SimvarsViewModel : BaseViewModel, IBaseSimConnectWrapper
    {
        #region IBaseSimConnectWrapper implementation

        ///User-defined win32 event
        public const int WM_USER_SIMCONNECT = 0x0402;

        ///Window handle
        public IntPtr m_hWnd = new IntPtr(0);

        ///SimConnect object
        public SimConnect m_oSimConnect = null;

        public bool bConnected
        {
            get { return m_bConnected; }
            private set { this.SetProperty(ref m_bConnected, value); }
        }
        public bool m_bConnected = false;

        public uint m_iCurrentDefinition = 0;
        public uint m_iCurrentRequest = 0;

        public int GetUserSimConnectWinEvent()
        {
            return WM_USER_SIMCONNECT;
        }

        public void ReceiveSimConnectMessage()
        {
            m_oSimConnect?.ReceiveMessage();
        }

        public void SetWindowHandle(IntPtr _hWnd)
        {
            m_hWnd = _hWnd;
        }

        public void Disconnect()
        {
            Console.WriteLine("Disconnect");

            m_oTimer.Stop();
            bOddTick = false;

            if (m_oSimConnect != null)
            {
                ///Dispose serves the same purpose as SimConnect_Close()
                m_oSimConnect.Dispose();
                m_oSimConnect = null;
            }

            sConnectButtonLabel = "Connect Flight";
            bConnected = false;

            //Set all requests as pending
            foreach (SimvarRequest oSimvarRequest in lSimvarRequests)
            {
                oSimvarRequest.bPending = true;
                oSimvarRequest.bStillPending = true;
            }
        }
        #endregion
        #region UI bindings

        public string sConnectButtonLabel
        {
            get { return m_sConnectButtonLabel; }
            private set { this.SetProperty(ref m_sConnectButtonLabel, value); }
        }
        public string m_sConnectButtonLabel = "Connect Flight";

        public bool bObjectIDSelectionEnabled
        {
            get { return m_bObjectIDSelectionEnabled; }
            set { this.SetProperty(ref m_bObjectIDSelectionEnabled, value); }
        }
        public bool m_bObjectIDSelectionEnabled = false;
        public SIMCONNECT_SIMOBJECT_TYPE eSimObjectType
        {
            get { return m_eSimObjectType; }
            set
            {
                this.SetProperty(ref m_eSimObjectType, value);
                bObjectIDSelectionEnabled = (m_eSimObjectType != SIMCONNECT_SIMOBJECT_TYPE.USER);
                ClearResquestsPendingState();
            }
        }
        public SIMCONNECT_SIMOBJECT_TYPE m_eSimObjectType = SIMCONNECT_SIMOBJECT_TYPE.USER;
        public ObservableCollection<uint> lObjectIDs { get; private set; }
        public uint iObjectIdRequest
        {
            get { return m_iObjectIdRequest; }
            set
            {
                this.SetProperty(ref m_iObjectIdRequest, value);
                ClearResquestsPendingState();
            }
        }
        public uint m_iObjectIdRequest = 0;


        public string[] aSimvarNames
        {
            get { return SimUtils.SimVars.Names; }
            private set { }
        }
        public string sSimvarRequest
        {
            get { return m_sSimvarRequest; }
            set { this.SetProperty(ref m_sSimvarRequest, value); }
        }
        public string m_sSimvarRequest = null;

        public string[] aUnitNames
        {
            get { return SimUtils.Units.Names; }
            private set { }
        }

        public string sUnitRequest
        {
            get { return m_sUnitRequest; }
            set { this.SetProperty(ref m_sUnitRequest, value); }
        }
        public string m_sUnitRequest = null;

        public string sSetValue
        {
            get { return m_sSetValue; }
            set { this.SetProperty(ref m_sSetValue, value); }
        }
        public string m_sSetValue = null;

        public ObservableCollection<SimvarRequest> lSimvarRequests { get; private set; }
        public SimvarRequest oSelectedSimvarRequest
        {
            get { return m_oSelectedSimvarRequest; }
            set { this.SetProperty(ref m_oSelectedSimvarRequest, value); }
        }
        public SimvarRequest m_oSelectedSimvarRequest = null;

        public uint[] aIndices
        {
            get { return m_aIndices; }
            private set { }
        }
        public readonly uint[] m_aIndices = new uint[100] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
                                                            10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
                                                            20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
                                                            30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
                                                            40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                                            50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
                                                            60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
                                                            70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
                                                            80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
                                                            90, 91, 92, 93, 94, 95, 96, 97, 98, 99 };
        public uint iIndexRequest
        {
            get { return m_iIndexRequest; }
            set { this.SetProperty(ref m_iIndexRequest, value); }
        }
        public uint m_iIndexRequest = 0;

        public bool bSaveValues
        {
            get { return m_bSaveValues; }
            set { this.SetProperty(ref m_bSaveValues, value); }
        }
        public bool m_bSaveValues = true;

        public bool bFSXcompatible
        {
            get { return m_bFSXcompatible; }
            set { this.SetProperty(ref m_bFSXcompatible, value); }
        }
        public bool m_bFSXcompatible = false;
        public bool bIsString
        {
            get { return m_bIsString; }
            set { this.SetProperty(ref m_bIsString, value); }
        }
        public bool m_bIsString = false;

        public bool bOddTick
        {
            get { return m_bOddTick; }
            set { this.SetProperty(ref m_bOddTick, value); }
        }
        public bool m_bOddTick = false;

        public ObservableCollection<string> lErrorMessages { get; private set; }
        public BaseCommand cmdToggleConnect { get; private set; }
        public BaseCommand cmdAddRequest { get; private set; }
        public BaseCommand cmdRemoveSelectedRequest { get; private set; }
        public BaseCommand cmdTrySetValue { get; private set; }
        public BaseCommand cmdTrySetValue2 { get; private set; }
        public BaseCommand cmdLoadFiles { get; private set; }
        public BaseCommand cmdSaveFile { get; private set; }
        #endregion
        #region Real time

        public DispatcherTimer m_oTimer = new DispatcherTimer();
        #endregion

        public SimvarsViewModel()
        {
            lObjectIDs = new ObservableCollection<uint>();
            lObjectIDs.Add(1);

            lSimvarRequests = new ObservableCollection<SimvarRequest>();
            lErrorMessages = new ObservableCollection<string>();

            cmdToggleConnect = new BaseCommand((p) => { ToggleConnect(); });
            cmdAddRequest = new BaseCommand((p) => { AddRequest((m_iIndexRequest == 0) ? m_sSimvarRequest : (m_sSimvarRequest + ":" + m_iIndexRequest), sUnitRequest, bIsString); });
            cmdRemoveSelectedRequest = new BaseCommand((p) => { RemoveSelectedRequest(); });
            cmdLoadFiles = new BaseCommand((p) => { LoadFiles(); });
            cmdSaveFile = new BaseCommand((p) => { SaveFile(false); });

            m_oTimer.Interval = new TimeSpan(0, 0, 0, 1, 0);
            m_oTimer.Tick += new EventHandler(OnTick);

            SerialPort = new SerialPortViewModel();
            Receiver = new MessageReceiver();
            Sender = new MessageSender();
            Messages = new MessagesViewModel();

            Receiver.Messages = Messages;
            Messages.Sender = Sender;
            Sender.Messages = Messages;

            SerialPort.Receiver = Receiver;
            SerialPort.Sender = Sender;
            SerialPort.Messages = Messages;

            Receiver.Port = SerialPort.Port;
            Sender.Port = SerialPort.Port;
        }

        public void Connect()
        {
            Console.WriteLine("Connect");
            try
            {
                ///The constructor is similar to SimConnect_Open in the native API
                m_oSimConnect = new SimConnect("Simconnect - Simvar test", m_hWnd, WM_USER_SIMCONNECT, null, bFSXcompatible ? (uint)1 : 0);

                ///Listen to connect and quit msgs
                m_oSimConnect.OnRecvOpen += new SimConnect.RecvOpenEventHandler(SimConnect_OnRecvOpen);
                m_oSimConnect.OnRecvQuit += new SimConnect.RecvQuitEventHandler(SimConnect_OnRecvQuit);

                ///Listen to exceptions
                m_oSimConnect.OnRecvException += new SimConnect.RecvExceptionEventHandler(SimConnect_OnRecvException);

                ///Catch a simobject data request
                m_oSimConnect.OnRecvSimobjectDataBytype += new SimConnect.RecvSimobjectDataBytypeEventHandler(SimConnect_OnRecvSimobjectDataBytype);
            }
            catch (COMException ex)
            {
                Console.WriteLine("Connection to KH failed: " + ex.Message);
            } finally
            {
                AddRequest("", "", false);
            }
        }

        public void SimConnect_OnRecvOpen(SimConnect sender, SIMCONNECT_RECV_OPEN data)
        {
            Console.WriteLine("SimConnect_OnRecvOpen");
            Console.WriteLine("Connected to KH");

            sConnectButtonLabel = "Disconnect Flight";

            bConnected = true;

            //Register pending requests
            foreach (SimvarRequest oSimvarRequest in lSimvarRequests)
            {
                if (oSimvarRequest.bPending)
                {
                    oSimvarRequest.bPending = !RegisterToSimConnect(oSimvarRequest);
                    oSimvarRequest.bStillPending = oSimvarRequest.bPending;
                }
            }
            m_oTimer.Start();
            bOddTick = false;
        }

        ///The case where the user closes game
        public void SimConnect_OnRecvQuit(SimConnect sender, SIMCONNECT_RECV data)
        {
            Console.WriteLine("SimConnect_OnRecvQuit");
            Console.WriteLine("KH has exited");
            Disconnect();
        }

        public void SimConnect_OnRecvException(SimConnect sender, SIMCONNECT_RECV_EXCEPTION data)
        {
            SIMCONNECT_EXCEPTION eException = (SIMCONNECT_EXCEPTION)data.dwException;
            Console.WriteLine("SimConnect_OnRecvException: " + eException.ToString());
            lErrorMessages.Add("SimConnect : " + eException.ToString());
        }

        public void SimConnect_OnRecvSimobjectDataBytype(SimConnect sender, SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE data)
        {
            Console.WriteLine("SimConnect_OnRecvSimobjectDataBytype");

            uint iRequest = data.dwRequestID;
            uint iObject = data.dwObjectID;
            if (!lObjectIDs.Contains(iObject))
            {
                lObjectIDs.Add(iObject);
            }
            foreach (SimvarRequest oSimvarRequest in lSimvarRequests)
            {
                if (iRequest == (uint)oSimvarRequest.eRequest && (!bObjectIDSelectionEnabled || iObject == m_iObjectIdRequest))
                {
                    if (oSimvarRequest.bIsString)
                    {
                        Struct1 result = (Struct1)data.dwData[0];
                        oSimvarRequest.dValue = 0;
                        oSimvarRequest.sValue = result.sValue;
                    }
                    else
                    {
                        double dValue = (double)data.dwData[0];
                        oSimvarRequest.dValue = dValue;
                        oSimvarRequest.sValue = dValue.ToString("F9");
                    }
                    oSimvarRequest.bPending = false;
                    oSimvarRequest.bStillPending = false;
                }
            }
        }
        //variaveis finais de recebimento    'wagner'
        public string airValue = "";
        public string attvValue = "";
        public string atthValue = "";
        public string altValue = "";
        public string altKmbValue = "";
        public string altKhgValue = "";
        public string navobs1Value = "";
        public string navgsi1Value = "";
        public string navcdi1Value = "";
        public string turnValue = "";
        public string turnBValue = "";
        public string sucpValue = "";
        public string hdgValue = "";
        public string vsValue = "";
        public string navobs2Value = "";
        public string navgsi2Value = "";
        public string navcdi2Value = "";
        public string rpmValue = "";
        public string tacValue = "";
        public string adfcValue = "";
        public string adfrValue = "";
        public string ampValue = "";
        public string tanklValue = "";
        public string tankrValue = "";
        public string oilpValue = "";
        public string oiltValue = "";
        public string adffValue = "";
        public string tranValue = "";
        public string com1Value = "";
        public string com1sValue = "";
        public string nav1Value = "";
        public string nav1sValue = "";
        public string com2Value = "";
        public string com2sValue = "";
        //public string nav2Value = "";
        public string nav2sValue = "";
        public string teste1;
        //May not be the best way to achive regular requests.
        //See SimConnect.RequestDataOnSimObject
        public void OnTick(object sender, EventArgs e) //FREQUENCIA DE ATUALIZAÇÃO
        {
            Console.WriteLine("OnTick");

            bOddTick = !bOddTick;
            string menssagemSend = "";

            foreach (SimvarRequest oSimvarRequest in lSimvarRequests)
            {
                if (oSimvarRequest.sName == "L:ngx_SPDwindow")// Display IAS pmdg
                {

                    const int MaxTamanhoEnvio = 7;
                    var envio = oSimvarRequest.dValue.ToString();
                    if (envio.Length == 6)
                    {
                        envio += "0";
                    }
                    else if (envio.Length == 5)
                    {
                        envio += "00";
                    }
                    else if (envio.Length == 3)
                    {
                        envio += "000";
                    }/*
                    else if (envio.Length < 6)
                    {
                        envio += ".000";
                    }*/
                    if (envio.EndsWith("000"))
                    {
                        envio = envio.Substring(0, envio.Length - 3) + "." + envio.Substring(envio.Length - 3);
                    }
                    if (envio.Length > MaxTamanhoEnvio)
                        envio = envio.Substring(0, MaxTamanhoEnvio);
                    menssagemSend += envio + "/";
                }
                else if (oSimvarRequest.sName == "L:ngx_HDGwindow")//Display Heading pmdg
                {
                    //menssagemSend += "=D" + oSimvarRequest.dValue.ToString();
                    const int MaxTamanhoEnvio = 7;
                    var envio = oSimvarRequest.dValue.ToString();
                    if (envio.Length == 6)
                    {
                        envio += "0";
                    }
                    else if (envio.Length == 5)
                    {
                        envio += "00";
                    }
                    else if (envio.Length == 3)
                    {
                        envio += "000";
                    }/*
                    else if (envio.Length < 6)
                    {
                        envio += ".000";
                    }*/
                    if (envio.EndsWith("000"))
                    {
                        envio = envio.Substring(0, envio.Length - 3) + "." + envio.Substring(envio.Length - 3);
                    }
                    if (envio.Length > MaxTamanhoEnvio)
                        envio = envio.Substring(0, MaxTamanhoEnvio);
                    menssagemSend += envio + "/";
                }
                else if (oSimvarRequest.sName == "L:ngx_ALTwindow")//Display Altitude pmdg
                {
                    //menssagemSend += "=E" + oSimvarRequest.dValue.ToString();
                    const int MaxTamanhoEnvio = 7;
                    var envio = oSimvarRequest.dValue.ToString();
                    if (envio.Length == 6)
                    {
                        envio += "0";
                    }
                    else if (envio.Length == 5)
                    {
                        envio += "00";
                    }
                    else if (envio.Length == 3)
                    {
                        envio += "000";
                    }/*
                    else if (envio.Length < 6)
                    {
                        envio += ".000";
                    }*/
                    if (envio.EndsWith("000"))
                    {
                        envio = envio.Substring(0, envio.Length - 3) + "." + envio.Substring(envio.Length - 3);
                    }
                    if (envio.Length > MaxTamanhoEnvio)
                        envio = envio.Substring(0, MaxTamanhoEnvio);
                    menssagemSend += envio + "/";
                }/*
                else if (oSimvarRequest.sName == "L:ngx_CRSwindowL")//Display course 1 pmdg
                {
                    const int MaxTamanhoEnvio = 7;
                    var envio = oSimvarRequest.dValue.ToString();
                    if (envio.Length == 6)
                    {
                        envio += "0";
                    }
                    else if (envio.Length == 5)
                    {
                        envio += "00";
                    }
                    else if (envio.Length == 3)
                    {
                        envio += "000";
                    }/*
                    else if (envio.Length < 6)
                    {
                        envio += ".000";
                    }*/
                /* if (envio.EndsWith("000"))
                 {
                     envio = envio.Substring(0, envio.Length - 3) + "." + envio.Substring(envio.Length - 3);
                 }
                 if (envio.Length > MaxTamanhoEnvio)
                     envio = envio.Substring(0, MaxTamanhoEnvio);
                 menssagemSend += envio + "/";
             }/*
             else if (oSimvarRequest.sName == "L:ngx_CRSwindowR") // display course 2 pmdg
             {
                 const int MaxTamanhoEnvio = 7;
                 var envio = oSimvarRequest.dValue.ToString();
                 if (envio.Length == 6)
                 {
                     envio += "0";
                 }
                 else if (envio.Length == 5)
                 {
                     envio += "00";
                 }
                 else if (envio.Length == 3)
                 {
                     envio += "000";
                 }/*
                 else if (envio.Length < 6)
                 {
                     envio += ".000";
                 }*/
                /* if (envio.EndsWith("000"))
                 {
                     envio = envio.Substring(0, envio.Length - 3) + "." + envio.Substring(envio.Length - 3);
                 }
                 if (envio.Length > MaxTamanhoEnvio)
                     envio = envio.Substring(0, MaxTamanhoEnvio);
                 menssagemSend += envio + "/";
             }*/
                else if (oSimvarRequest.sName == "L:ngx_VSwindow") //Display VS positivo   verificar como enviar o negativo 
                {
                    const int MaxTamanhoEnvio = 7;
                    var envio = oSimvarRequest.dValue.ToString();
                    if (envio.Length == 6)
                    {
                        envio += "0";
                    }
                    else if (envio.Length == 5)
                    {
                        envio += "00";
                    }
                    else if (envio.Length == 3)
                    {
                        envio += "000";
                    }/*
                    else if (envio.Length < 6)
                    {
                        envio += ".000";
                    }*/
                    if (envio.EndsWith("000"))
                    {
                        envio = envio.Substring(0, envio.Length - 3) + "." + envio.Substring(envio.Length - 3);
                    }
                    if (envio.Length > MaxTamanhoEnvio)
                        envio = envio.Substring(0, MaxTamanhoEnvio);
                    menssagemSend += envio + "/";
                }
                /*else if (oSimvarRequest.sName == "NAV ACTIVE FREQUENCY:2")
                {
                    //menssagemSend += "=E" + oSimvarRequest.dValue.ToString();
                    const int MaxTamanhoEnvio = 8;
                    var envio = "=g" + oSimvarRequest.dValue.ToString();
                    if (envio.Length == 8)
                    {
                        envio += "0";
                    }
                    else if (envio.Length == 7)
                    {
                        envio += "00";
                    }
                    else if (envio.Length == 6)
                    {
                        envio += "000";
                    }
                    else if (envio.Length < 6)
                    {
                        envio += ".000";
                    }
                    if (envio.Length > MaxTamanhoEnvio)
                        envio = envio.Substring(0, MaxTamanhoEnvio);
                    menssagemSend += envio + "/";
                }
                else if (oSimvarRequest.sName == "NAV STANDBY FREQUENCY:2")
                {
                    //menssagemSend += "=E" + oSimvarRequest.dValue.ToString();
                    const int MaxTamanhoEnvio = 8;
                    var envio = "=h" + oSimvarRequest.dValue.ToString();
                    if (envio.Length == 8)
                    {
                        envio += "0";
                    }
                    else if (envio.Length == 7)
                    {
                        envio += "00";
                    }
                    else if (envio.Length == 6)
                    {
                        envio += "000";
                    }
                    else if (envio.Length < 6)
                    {
                        envio += ".000";
                    }
                    if (envio.Length > MaxTamanhoEnvio)
                        envio = envio.Substring(0, MaxTamanhoEnvio);
                    menssagemSend += envio + "/";
                }*/
                if (!oSimvarRequest.bPending)
                {
                    m_oSimConnect?.RequestDataOnSimObjectType(oSimvarRequest.eRequest, oSimvarRequest.eDef, 0, m_eSimObjectType);
                    oSimvarRequest.bPending = true;
                }
                else
                {
                    oSimvarRequest.bStillPending = true;
                }
            }

       

              if (SerialPort.IsConnected) Sender.SendMessage("<" + menssagemSend + ">");
            //if (SerialPort.IsConnected) Sender.SendMessage(menssagemSend2);
        }

        public void ToggleConnect()
        {
            if (m_oSimConnect == null)
            {
                try
                {
                    Connect();
                }
                catch (COMException ex)
                {
                    Console.WriteLine("Unable to connect to KH: " + ex.Message);
                }
            }
            else
            {
                Disconnect();
            }
        }

        public void ClearResquestsPendingState()
        {
            foreach (SimvarRequest oSimvarRequest in lSimvarRequests)
            {
                oSimvarRequest.bPending = false;
                oSimvarRequest.bStillPending = false;
            }
        }

        public bool RegisterToSimConnect(SimvarRequest _oSimvarRequest)
        {
            if (m_oSimConnect != null)
            {
                if (_oSimvarRequest.bIsString)
                {
                    ///Define a data structure containing string value
                    m_oSimConnect.AddToDataDefinition(_oSimvarRequest.eDef, _oSimvarRequest.sName, "", SIMCONNECT_DATATYPE.STRING256, 0.0f, SimConnect.SIMCONNECT_UNUSED);
                    ///IMPORTANT: Register it with the simconnect managed wrapper marshaller
                    ///If you skip this step, you will only receive a uint in the .dwData field.
                    m_oSimConnect.RegisterDataDefineStruct<Struct1>(_oSimvarRequest.eDef);
                }
                else
                {
                    ///Define a data structure containing numerical value
                    m_oSimConnect.AddToDataDefinition(_oSimvarRequest.eDef, _oSimvarRequest.sName, _oSimvarRequest.sUnits, SIMCONNECT_DATATYPE.FLOAT64, 0.0f, SimConnect.SIMCONNECT_UNUSED);
                    ///IMPORTANT: Register it with the simconnect managed wrapper marshaller
                    ///If you skip this step, you will only receive a uint in the .dwData field.
                    m_oSimConnect.RegisterDataDefineStruct<double>(_oSimvarRequest.eDef);
                }

                return true;
            }
            else
            {
                return false;
            }
        }
        // variaveis iniciais de recebimento 'wagner'
        public SimvarRequest com1;
        public SimvarRequest com1s;
        public SimvarRequest nav1;
        public SimvarRequest nav1s;
        public SimvarRequest com2;
        public SimvarRequest com2s;
        public SimvarRequest nav2;
        public SimvarRequest nav2s;

        public void AddRequest(string _sNewSimvarRequest, string _sNewUnitRequest, bool _bIsString)
        {
            Console.WriteLine("AddRequest");
            //RECEBIMENTO DE DADOS
            //string sNewSimvarRequest = _sOverrideSimvarRequest != null ? _sOverrideSimvarRequest : ((m_iIndexRequest == 0) ? m_sSimvarRequest : (m_sSimvarRequest + ":" + m_iIndexRequest));
            //string sNewUnitRequest = _sOverrideUnitRequest != null ? _sOverrideUnitRequest : m_sUnitRequest;
            // sempre acrescentar um conjunto para obter novo recebimento
            com1 = new SimvarRequest
            {
                eDef = (DEFINITION)28,
                eRequest = (REQUEST)28,
                sName = "L:ngx_SPDwindow",
                bIsString = false,
                sUnits = "number"
            };

            com1s = new SimvarRequest
            {
                eDef = (DEFINITION)29,
                eRequest = (REQUEST)29,
                sName = "L:ngx_HDGwindow",
                bIsString = false,
                sUnits = "number"
            };

            nav1 = new SimvarRequest
            {
                eDef = (DEFINITION)30,
                eRequest = (REQUEST)30,
                sName = "L:ngx_ALTwindow",
                bIsString = false,
                sUnits = "number"
            };

            nav1s = new SimvarRequest
            {
                eDef = (DEFINITION)31,
                eRequest = (REQUEST)31,
                sName = "L:ngx_CRSwindowL",
                bIsString = false,
                sUnits = "number"
            };

            com2 = new SimvarRequest
            {
                eDef = (DEFINITION)32,
                eRequest = (REQUEST)32,
                sName = "L:ngx_CRSwindowR",
                bIsString = false,
                sUnits = "number"
            };

            com2s = new SimvarRequest
            {
                eDef = (DEFINITION)33,
                eRequest = (REQUEST)33,
                sName = "L:ngx_VSwindow",
                bIsString = false,
                sUnits = "number"
            };

            nav2 = new SimvarRequest
            {
                eDef = (DEFINITION)34,
                eRequest = (REQUEST)34,
                sName = "NAV ACTIVE FREQUENCY:2",
                bIsString = false,
                sUnits = "Mhz"
            };

            nav2s = new SimvarRequest
            {
                eDef = (DEFINITION)35,
                eRequest = (REQUEST)35,
                sName = "NAV STANDBY FREQUENCY:2",
                bIsString = false,
                sUnits = "Mhz"
            };

            com1.bPending = !RegisterToSimConnect(com1);
            com1.bStillPending = com1.bPending;

            com1s.bPending = !RegisterToSimConnect(com1s);
            com1s.bStillPending = com1s.bPending;

            nav1.bPending = !RegisterToSimConnect(nav1);
            nav1.bStillPending = nav1.bPending;

            nav1s.bPending = !RegisterToSimConnect(nav1s);
            nav1s.bStillPending = nav1s.bPending;

            com2.bPending = !RegisterToSimConnect(com2);
            com2.bStillPending = com2.bPending;

            com2s.bPending = !RegisterToSimConnect(com2s);
            com2s.bStillPending = com2s.bPending;

            nav2.bPending = !RegisterToSimConnect(nav2);
            nav2.bStillPending = nav2.bPending;

            nav2s.bPending = !RegisterToSimConnect(nav2s);
            nav2s.bStillPending = nav2s.bPending;

            lSimvarRequests.Add(com1);
            lSimvarRequests.Add(com1s);
            lSimvarRequests.Add(nav1);
            lSimvarRequests.Add(nav1s);
            lSimvarRequests.Add(com2);
            lSimvarRequests.Add(com2s);
            lSimvarRequests.Add(nav2);
            lSimvarRequests.Add(nav2s);

            ++m_iCurrentDefinition;
            ++m_iCurrentRequest;
        }


        public void RemoveSelectedRequest()
        {
            lSimvarRequests.Remove(oSelectedSimvarRequest);
        }

        private void RemoveAllRequest()
        {
            while (lSimvarRequests.Count > 0)
            {
                lSimvarRequests.RemoveAt(lSimvarRequests.Count - 1);
            }
        }

        public void TrySetValue3()
        {     

        }


    private SimConnect simConnect;

        enum DEFINITION1
        {
            NAV1_RADIO_SET,
        }

        enum REQUEST1
        {
            NAV1_RADIO_SET,
        }

        struct Data
        {
            public double NAV1_RADIO_SET;
        }


    public void LoadFiles()
        {
            Microsoft.Win32.OpenFileDialog oOpenFileDialog = new Microsoft.Win32.OpenFileDialog();
            oOpenFileDialog.Multiselect = true;
            oOpenFileDialog.Filter = "Simvars files (*.simvars)|*.simvars";
            if (oOpenFileDialog.ShowDialog() == true)
            {
                foreach (string sFilename in oOpenFileDialog.FileNames)
                {
                    LoadFile(sFilename);
                }
            }
        }

        public void LoadFile(string _sFileName)
        {
            string[] aLines = System.IO.File.ReadAllLines(_sFileName);
            for (uint i = 0; i < aLines.Length; ++i)
            {
                //Format : Simvar,Unit
                string[] aSubStrings = aLines[i].Split(',');
                if (aSubStrings.Length >= 2) // format check
                {
                    //values check
                    string[] aSimvarSubStrings = aSubStrings[0].Split(':'); // extract Simvar name from format Simvar:Index
                    string sSimvarName = Array.Find(SimUtils.SimVars.Names, s => s == aSimvarSubStrings[0]);
                    string sUnitName = Array.Find(SimUtils.Units.Names, s => s == aSubStrings[1]);
                    bool bIsString = aSubStrings.Length > 2 && bool.Parse(aSubStrings[2]);
                    if (sSimvarName != null && (sUnitName != null || bIsString))
                    {
                        AddRequest(aSubStrings[0], sUnitName, bIsString);
                    }
                    else
                    {
                        if (sSimvarName == null)
                        {
                            lErrorMessages.Add("l." + i.ToString() + " Wrong Simvar name : " + aSubStrings[0]);
                        }
                        if (sUnitName == null)
                        {
                            lErrorMessages.Add("l." + i.ToString() + " Wrong Unit name : " + aSubStrings[1]);
                        }
                    }
                }
                else
                {
                    lErrorMessages.Add("l." + i.ToString() + " Bad input format : " + aLines[i]);
                    lErrorMessages.Add("l." + i.ToString() + " Must be : SIMVAR,UNIT");
                }
            }
        }

        public void SaveFile(bool _bWriteValues)
        {
            Microsoft.Win32.SaveFileDialog oSaveFileDialog = new Microsoft.Win32.SaveFileDialog();
            oSaveFileDialog.Filter = "Simvars files (*.simvars)|*.simvars";
            if (oSaveFileDialog.ShowDialog() == true)
            {
                using (StreamWriter oStreamWriter = new StreamWriter(oSaveFileDialog.FileName, false))
                {
                    foreach (SimvarRequest oSimvarRequest in lSimvarRequests)
                    {
                        //Format : Simvar,Unit
                        string sFormatedLine = oSimvarRequest.sName + "," + oSimvarRequest.sUnits +","+ oSimvarRequest.bIsString;
                        if (bSaveValues)
                        {
                            sFormatedLine += ",  " + oSimvarRequest.dValue.ToString();
                        }
                        oStreamWriter.WriteLine(sFormatedLine);
                    }
                }
            }
        }

        public void SetTickSliderValue(int _iValue)
        {
            m_oTimer.Interval = new TimeSpan(0, 0, 0, 0, 150);//taxa de atualização // ultimo valor utilizado 50//linha original:m_oTimer.Interval = new TimeSpan(0, 0, 0, 0, (int)(_iValue)); altera velocidade de transferencia
        }
        
        public MessagesViewModel Messages { get; set; }
        public MessageReceiver Receiver { get; set; }
        public MessageSender Sender { get; set; }
        public SerialPortViewModel SerialPort { get; set; }
    }
}
