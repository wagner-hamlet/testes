Input SHA256 : FFA4547D13DC8C2A25CA6049640918FAD080051AA357E17A88608DF6F15C3AD4
.idata:00401000 ; Input MD5    : 21313AD89C0DAA32EA161AA0E5EBD9C6
.idata:00401000 ; Input CRC32  : C9CDECC5
.idata:00401000
.idata:00401000 ; File Name   : C:\Users\Hamlet Company\OneDrive\Área de Trabalho\MF Testes\MobiFlight 2\lib\x86\SimConnect.dll
.idata:00401000 ; Format      : Portable executable for 80386 (PE)
.idata:00401000 ; Imagebase   : 400000
.idata:00401000 ; Timestamp   : 46FAD5B6 (Wed Sep 26 21:57:10 2007)
.idata:00401000 ; Section 1. (virtual address 00001000)
.idata:00401000 ; Virtual size                  : 00009B84 (  39812.)
.idata:00401000 ; Section size in file          : 00009C00 (  39936.)
.idata:00401000 ; Offset to raw data for section: 00000400
.idata:00401000 ; Flags 60000020: Text Executable Readable
.idata:00401000 ; Alignment     : default
.idata:00401000 ;
.idata:00401000 ; Imports from ADVAPI32.dll
.idata:00401000 ;
.idata:00401000 ; PDB File Name : D:\bt\1202\target\retail\i386\SimConnect.pdb
.idata:00401000 ; OS type         :  MS Windows
.idata:00401000 ; Application type:  DLL 32bit
.idata:00401000
.idata:00401000                 .686p
.idata:00401000                 .mmx
.idata:00401000                 .model flat
.idata:00401000
.idata:00401000 ; ===========================================================================
.idata:00401000
.idata:00401000 ; Segment type: Externs
.idata:00401000 ; _idata
.idata:00401000 ; LSTATUS (__stdcall *RegOpenKeyExA)(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY phkResult)
.idata:00401000                 extrn RegOpenKeyExA:dword
.idata:00401000                                         ; CODE XREF: sub_4033E0+39↓p
.idata:00401000                                         ; DATA XREF: sub_4033E0+39↓r ...
.idata:00401004 ; LSTATUS (__stdcall *RegQueryValueExA)(HKEY hKey, LPCSTR lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE lpData, LPDWORD lpcbData)
.idata:00401004                 extrn RegQueryValueExA:dword
.idata:00401004                                         ; CODE XREF: sub_4033E0+68↓p
.idata:00401004                                         ; DATA XREF: sub_4033E0+68↓r
.idata:00401008 ; LSTATUS (__stdcall *RegCloseKey)(HKEY hKey)
.idata:00401008                 extrn RegCloseKey:dword ; CODE XREF: sub_4033E0+84↓p
.idata:00401008                                         ; DATA XREF: sub_4033E0+84↓r
.idata:0040100C
.idata:00401010 ;
.idata:00401010 ; Imports from KERNEL32.dll
.idata:00401010 ;
.idata:00401010 ; LONG (__stdcall *InterlockedCompareExchange)(volatile LONG *Destination, LONG Exchange, LONG Comperand)
.idata:00401010                 extrn InterlockedCompareExchange:dword
.idata:00401010                                         ; CODE XREF: _CRT_INIT(x,x,x)+64↓p
.idata:00401010                                         ; _CRT_INIT(x,x,x)+123↓p
.idata:00401010                                         ; DATA XREF: ...
.idata:00401014 ; BOOL (__stdcall *QueryPerformanceFrequency)(LARGE_INTEGER *lpFrequency)
.idata:00401014                 extrn QueryPerformanceFrequency:dword
.idata:00401014                                         ; CODE XREF: SimConnect_RequestResponseTimes+58↓p
.idata:00401014                                         ; DATA XREF: SimConnect_RequestResponseTimes+58↓r
.idata:00401018 ; BOOL (__stdcall *QueryPerformanceCounter)(LARGE_INTEGER *lpPerformanceCount)
.idata:00401018                 extrn QueryPerformanceCounter:dword
.idata:00401018                                         ; CODE XREF: SimConnect_RequestResponseTimes+71↓p
.idata:00401018                                         ; SimConnect_RequestResponseTimes+10C↓p ...
.idata:0040101C ; DWORD (__stdcall *GetCurrentProcessId)()
.idata:0040101C                 extrn GetCurrentProcessId:dword
.idata:0040101C                                         ; CODE XREF: sub_402E80+7E↓p
.idata:0040101C                                         ; ___security_init_cookie+41↓p
.idata:0040101C                                         ; DATA XREF: ...
.idata:00401020 ; DWORD (__stdcall *GetCurrentDirectoryA)(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00401020                 extrn GetCurrentDirectoryA:dword
.idata:00401020                                         ; CODE XREF: sub_403850+13B↓p
.idata:00401020                                         ; sub_403AC0+EF↓p
.idata:00401020                                         ; DATA XREF: ...
.idata:00401024 ; DWORD (__stdcall *GetPrivateProfileSectionA)(LPCSTR lpAppName, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName)
.idata:00401024                 extrn GetPrivateProfileSectionA:dword
.idata:00401024                                         ; CODE XREF: sub_403A00+73↓p
.idata:00401024                                         ; DATA XREF: sub_403A00+73↓r
.idata:00401028 ; DWORD (__stdcall *GetPrivateProfileStringA)(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName)
.idata:00401028                 extrn GetPrivateProfileStringA:dword
.idata:00401028                                         ; CODE XREF: sub_403490+BE↓p
.idata:00401028                                         ; sub_403490+1DF↓p ...
.idata:0040102C ; BOOL (__stdcall *BindIoCompletionCallback)(HANDLE FileHandle, LPOVERLAPPED_COMPLETION_ROUTINE Function, ULONG Flags)
.idata:0040102C                 extrn BindIoCompletionCallback:dword
.idata:0040102C                                         ; CODE XREF: sub_402B20+182↓p
.idata:0040102C                                         ; sub_402B20+256↓p
.idata:0040102C                                         ; DATA XREF: ...
.idata:00401030 ; int (__stdcall *lstrcmpiA)(LPCSTR lpString1, LPCSTR lpString2)
.idata:00401030                 extrn lstrcmpiA:dword   ; CODE XREF: sub_402B20+92↓p
.idata:00401030                                         ; sub_403490+F7↓p ...
.idata:00401034 ; void (__stdcall *Sleep)(DWORD dwMilliseconds)
.idata:00401034                 extrn Sleep:dword       ; CODE XREF: sub_403330+1B↓p
.idata:00401034                                         ; sub_403330+71↓p ...
.idata:00401038 ; BOOL (__stdcall *SetEvent)(HANDLE hEvent)
.idata:00401038                 extrn SetEvent:dword    ; CODE XREF: get_Downloading+11↓p
.idata:00401038                                         ; DATA XREF: get_Downloading+11↓r
.idata:0040103C ; BOOL (__stdcall *WaitNamedPipeA)(LPCSTR lpNamedPipeName, DWORD nTimeOut)
.idata:0040103C                 extrn WaitNamedPipeA:dword
.idata:0040103C                                         ; CODE XREF: sub_402B20+16E↓p
.idata:0040103C                                         ; DATA XREF: sub_402B20+16E↓r
.idata:00401040 ; BOOL (__stdcall *GetModuleHandleExA)(DWORD dwFlags, LPCSTR lpModuleName, HMODULE *phModule)
.idata:00401040                 extrn GetModuleHandleExA:dword
.idata:00401040                                         ; CODE XREF: sub_402E80+96↓p
.idata:00401040                                         ; DATA XREF: sub_402E80+96↓r
.idata:00401044 ; HANDLE (__stdcall *CreateFileA)(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
.idata:00401044                 extrn CreateFileA:dword ; CODE XREF: sub_402B20+146↓p
.idata:00401044                                         ; DATA XREF: sub_402B20:loc_402C41↓r
.idata:00401048 ; BOOL (__stdcall *DisableThreadLibraryCalls)(HMODULE hLibModule)
.idata:00401048                 extrn DisableThreadLibraryCalls:dword
.idata:00401048                                         ; CODE XREF: DllMain(x,x,x)+14↓p
.idata:00401048                                         ; DATA XREF: DllMain(x,x,x)+14↓r
.idata:0040104C ; BOOL (__stdcall *CloseHandle)(HANDLE hObject)
.idata:0040104C                 extrn CloseHandle:dword ; CODE XREF: .text:00401A6A↓p
.idata:0040104C                                         ; .text:00401A77↓p ...
.idata:00401050 ; void (__stdcall *DeleteCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
.idata:00401050                 extrn DeleteCriticalSection:dword
.idata:00401050                                         ; CODE XREF: sub_402780-1266↓p
.idata:00401050                                         ; sub_4016B0+1E↓p ...
.idata:00401054 ; BOOL (__stdcall *CancelIo)(HANDLE hFile)
.idata:00401054                 extrn CancelIo:dword    ; CODE XREF: InstallPackage+10↓p
.idata:00401054                                         ; DATA XREF: InstallPackage+10↓r
.idata:00401058 ; void (__stdcall *EnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
.idata:00401058                 extrn EnterCriticalSection:dword
.idata:00401058                                         ; CODE XREF: _cctor+7↓p
.idata:00401058                                         ; sub_401900+18↓p ...
.idata:0040105C ; DWORD (__stdcall *GetLastError)()
.idata:0040105C                 extrn GetLastError:dword
.idata:0040105C                                         ; CODE XREF: sub_401900+A2↓p
.idata:0040105C                                         ; sub_401900+C7↓p ...
.idata:00401060 ; LONG (__stdcall *InterlockedExchange)(volatile LONG *Target, LONG Value)
.idata:00401060                 extrn InterlockedExchange:dword
.idata:00401060                                         ; CODE XREF: InstallPackage+3E↓p
.idata:00401060                                         ; _CRT_INIT(x,x,x)+C7↓p ...
.idata:00401064 ; BOOL (__stdcall *ReadFile)(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
.idata:00401064                 extrn ReadFile:dword    ; CODE XREF: sub_401EA0+77↓p
.idata:00401064                                         ; DATA XREF: sub_401EA0+77↓r
.idata:00401068 ; void (__stdcall *LeaveCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
.idata:00401068                 extrn LeaveCriticalSection:dword
.idata:00401068                                         ; CODE XREF: _cctor+21↓p
.idata:00401068                                         ; sub_401900+6E↓p ...
.idata:0040106C ; HANDLE (__stdcall *CreateEventA)(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCSTR lpName)
.idata:0040106C                 extrn CreateEventA:dword
.idata:0040106C                                         ; CODE XREF: sub_401900+90↓p
.idata:0040106C                                         ; sub_401900+BB↓p
.idata:0040106C                                         ; DATA XREF: ...
.idata:00401070 ; void (__stdcall *InitializeCriticalSection)(LPCRITICAL_SECTION lpCriticalSection)
.idata:00401070                 extrn InitializeCriticalSection:dword
.idata:00401070                                         ; CODE XREF: sub_4015F0+35↓p
.idata:00401070                                         ; _ctor_0+6C↓p ...
.idata:00401074 ; BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
.idata:00401074                 extrn WriteFile:dword   ; CODE XREF: InitializeComponent+AB↓p
.idata:00401074                                         ; DATA XREF: InitializeComponent+AB↓r
.idata:00401078 ; LONG (__stdcall *InterlockedDecrement)(volatile LONG *lpAddend)
.idata:00401078                 extrn InterlockedDecrement:dword
.idata:00401078                                         ; CODE XREF: Main+C↓p
.idata:00401078                                         ; Function+169↓p ...
.idata:0040107C ; LONG (__stdcall *InterlockedIncrement)(volatile LONG *lpAddend)
.idata:0040107C                 extrn InterlockedIncrement:dword
.idata:0040107C                                         ; CODE XREF: sub_4015F0+8B↓p
.idata:0040107C                                         ; InitializeComponent+78↓p ...
.idata:00401080 ; BOOL (__stdcall *IsDebuggerPresent)()
.idata:00401080                 extrn IsDebuggerPresent:dword
.idata:00401080                                         ; CODE XREF: ___report_gsfailure+B9↓p
.idata:00401080                                         ; DATA XREF: ___report_gsfailure+B9↓r
.idata:00401084 ; DWORD (__stdcall *GetTickCount)()
.idata:00401084                 extrn GetTickCount:dword
.idata:00401084                                         ; CODE XREF: ___security_init_cookie+51↓p
.idata:00401084                                         ; DATA XREF: ___security_init_cookie+51↓r
.idata:00401088 ; DWORD (__stdcall *GetCurrentThreadId)()
.idata:00401088                 extrn GetCurrentThreadId:dword
.idata:00401088                                         ; CODE XREF: ___security_init_cookie+49↓p
.idata:00401088                                         ; DATA XREF: ___security_init_cookie+49↓r
.idata:0040108C ; void (__stdcall *GetSystemTimeAsFileTime)(LPFILETIME lpSystemTimeAsFileTime)
.idata:0040108C                 extrn GetSystemTimeAsFileTime:dword
.idata:0040108C                                         ; CODE XREF: ___security_init_cookie+35↓p
.idata:0040108C                                         ; DATA XREF: ___security_init_cookie+35↓r
.idata:00401090 ; LONG (__stdcall *UnhandledExceptionFilter)(struct _EXCEPTION_POINTERS *ExceptionInfo)
.idata:00401090                 extrn UnhandledExceptionFilter:dword
.idata:00401090                                         ; CODE XREF: ___report_gsfailure+D9↓p
.idata:00401090                                         ; DATA XREF: ___report_gsfailure+D9↓r
.idata:00401094 ; HANDLE (__stdcall *GetCurrentProcess)()
.idata:00401094                 extrn GetCurrentProcess:dword
.idata:00401094                                         ; CODE XREF: ___report_gsfailure+F5↓p
.idata:00401094                                         ; DATA XREF: ___report_gsfailure+F5↓r
.idata:00401098 ; BOOL (__stdcall *TerminateProcess)(HANDLE hProcess, UINT uExitCode)
.idata:00401098                 extrn TerminateProcess:dword
.idata:00401098                                         ; CODE XREF: ___report_gsfailure+FC↓p
.idata:00401098                                         ; DATA XREF: ___report_gsfailure+FC↓r
.idata:0040109C ; LPTOP_LEVEL_EXCEPTION_FILTER (__stdcall *SetUnhandledExceptionFilter)(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
.idata:0040109C                 extrn SetUnhandledExceptionFilter:dword
.idata:0040109C                                         ; CODE XREF: ___report_gsfailure+CE↓p
.idata:0040109C                                         ; DATA XREF: ___report_gsfailure+CE↓r
.idata:004010A0
.idata:004010A4 ;
.idata:004010A4 ; Imports from MSVCP80.dll
.idata:004010A4 ;
.idata:004010A4 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.idata:004010A4                 extrn ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:dword
.idata:004010A4                                         ; CODE XREF: sub_402430+E↓p
.idata:004010A4                                         ; .text:00402471↓p ...
.idata:004010A8 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(char const *)
.idata:004010A8                 extrn ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:dword
.idata:004010A8                                         ; CODE XREF: sub_402B20+54↓p
.idata:004010A8                                         ; sub_402E80+DB↓p ...
.idata:004010AC ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.idata:004010AC                 extrn ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:dword
.idata:004010AC                                         ; CODE XREF: sub_4024A0+4A↓p
.idata:004010AC                                         ; sub_4048A0+57↓p
.idata:004010AC                                         ; DATA XREF: ...
.idata:004010B0 ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.idata:004010B0                 extrn ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:dword
.idata:004010B0                                         ; CODE XREF: sub_402E80+C8↓p
.idata:004010B0                                         ; sub_403490+5B↓p
.idata:004010B0                                         ; DATA XREF: ...
.idata:004010B4 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::operator=(char const *)
.idata:004010B4                 extrn ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z:dword
.idata:004010B4                                         ; CODE XREF: sub_402B20+86↓p
.idata:004010B4                                         ; sub_402E80+1C0↓p ...
.idata:004010B8 ; public: char & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::at(unsigned int)
.idata:004010B8                 extrn ?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z:dword
.idata:004010B8                                         ; CODE XREF: sub_402B20+BA↓p
.idata:004010B8                                         ; sub_402B20+10F↓p
.idata:004010B8                                         ; DATA XREF: ...
.idata:004010BC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::reserve(unsigned int)
.idata:004010BC                 extrn ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z:dword
.idata:004010BC                                         ; CODE XREF: sub_402B20+A6↓p
.idata:004010BC                                         ; sub_402B20+EA↓p
.idata:004010BC                                         ; DATA XREF: ...
.idata:004010C0 ; bool __cdecl std::operator!=<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *)
.idata:004010C0                 extrn ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z:dword
.idata:004010C0                                         ; CODE XREF: sub_403490+206↓p
.idata:004010C0                                         ; sub_403490+26A↓p ...
.idata:004010C4 ; bool __cdecl std::operator==<char, struct std::char_traits<char>, class std::allocator<char>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, char const *)
.idata:004010C4                 extrn ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z:dword
.idata:004010C4                                         ; CODE XREF: sub_402B20+6A↓p
.idata:004010C4                                         ; sub_402E80+197↓p ...
.idata:004010C8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::operator=(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &)
.idata:004010C8                 extrn ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z:dword
.idata:004010C8                                         ; CODE XREF: sub_403490+21C↓p
.idata:004010C8                                         ; sub_403490+27C↓p
.idata:004010C8                                         ; DATA XREF: ...
.idata:004010CC
.idata:004010D0 ;
.idata:004010D0 ; Imports from MSVCR80.dll
.idata:004010D0 ;
.idata:004010D0 ; void (__stdcall __noreturn *_CxxThrowException)(void *pExceptionObject, _ThrowInfo *pThrowInfo)
.idata:004010D0                 extrn __imp__CxxThrowException:dword
.idata:004010D0                                         ; DATA XREF: _CxxThrowException↓r
.idata:004010D0                                         ; .text:004092DC↓o
.idata:004010D4 ; void *(__cdecl *memset)(void *, int Val, size_t Size)
.idata:004010D4                 extrn __imp_memset:dword
.idata:004010D4                                         ; DATA XREF: memset↓r
.idata:004010D8                 extrn __imp___CxxFrameHandler3:dword
.idata:004010D8                                         ; DATA XREF: __CxxFrameHandler3↓r
.idata:004010DC ; void *(__cdecl *memcpy)(void *, const void *Src, size_t Size)
.idata:004010DC                 extrn __imp_memcpy:dword
.idata:004010DC                                         ; DATA XREF: memcpy↓r
.idata:004010E0 ; __declspec(dllimport) public: void __thiscall type_info::_type_info_dtor_internal_method(void)
.idata:004010E0                 extrn __imp_?_type_info_dtor_internal_method@type_info@@QAEXXZ:dword
.idata:004010E0                                         ; DATA XREF: type_info::_type_info_dtor_internal_method(void)↓r
.idata:004010E4 ; __declspec(dllimport) void __cdecl terminate(void)
.idata:004010E4                 extrn __imp_?terminate@@YAXXZ:dword
.idata:004010E4                                         ; DATA XREF: terminate(void)↓r
.idata:004010E8                 extrn __imp__crt_debugger_hook:dword
.idata:004010E8                                         ; DATA XREF: _crt_debugger_hook↓r
.idata:004010EC                 extrn __imp__except_handler4_common:dword
.idata:004010EC                                         ; DATA XREF: _except_handler4_common↓r
.idata:004010F0 ; _onexit_t (__cdecl *onexit)(_onexit_t Func)
.idata:004010F0                 extrn _onexit:dword     ; CODE XREF: __onexit+26↓p
.idata:004010F0                                         ; DATA XREF: __onexit+26↓r
.idata:004010F4                 extrn __imp__lock:dword ; DATA XREF: _lock↓r
.idata:004010F8                 extrn __imp___dllonexit:dword
.idata:004010F8                                         ; DATA XREF: __dllonexit↓r
.idata:004010FC                 extrn __imp__unlock:dword
.idata:004010FC                                         ; DATA XREF: _unlock↓r
.idata:00401100                 extrn __imp___clean_type_info_names_internal:dword
.idata:00401100                                         ; DATA XREF: __clean_type_info_names_internal↓r
.idata:00401104                 extrn __imp___CppXcptFilter:dword
.idata:00401104                                         ; DATA XREF: __CppXcptFilter↓r
.idata:00401108                 extrn _adjust_fdiv:dword
.idata:00401108                                         ; DATA XREF: _CRT_INIT(x,x,x)+1C↓r
.idata:0040110C                 extrn __imp__amsg_exit:dword
.idata:0040110C                                         ; DATA XREF: _amsg_exit↓r
.idata:00401110 ; int (__cdecl *_initterm_e)(_PIFV *First, _PIFV *Last)
.idata:00401110                 extrn __imp__initterm_e:dword
.idata:00401110                                         ; DATA XREF: _initterm_e↓r
.idata:00401114 ; void (__cdecl *_initterm)(_PVFV *First, _PVFV *Last)
.idata:00401114                 extrn __imp__initterm:dword
.idata:00401114                                         ; DATA XREF: _initterm↓r
.idata:00401118                 extrn _decode_pointer:dword
.idata:00401118                                         ; CODE XREF: _CRT_INIT(x,x,x)+149↓p
.idata:00401118                                         ; _CRT_INIT(x,x,x)+158↓p ...
.idata:0040111C ; void (__cdecl *free)(void *Block)
.idata:0040111C                 extrn free:dword        ; CODE XREF: _CRT_INIT(x,x,x)+16F↓p
.idata:0040111C                                         ; DATA XREF: _CRT_INIT(x,x,x)+16F↓r
.idata:00401120                 extrn _encoded_null:dword
.idata:00401120                                         ; CODE XREF: _CRT_INIT(x,x,x)+176↓p
.idata:00401120                                         ; DATA XREF: _CRT_INIT(x,x,x)+176↓r
.idata:00401124                 extrn _malloc_crt:dword ; CODE XREF: _pre_c_init+6↓p
.idata:00401124                                         ; DATA XREF: _pre_c_init+6↓r
.idata:00401128                 extrn _encode_pointer:dword
.idata:00401128                                         ; CODE XREF: _pre_c_init+F↓p
.idata:00401128                                         ; __onexit+6D↓p ...
.idata:0040112C ; int (__cdecl *vsnprintf)(char *const Buffer, const size_t BufferCount, const char *const Format, va_list ArgList)
.idata:0040112C                 extrn _vsnprintf:dword  ; CODE XREF: sub_402510+32↓p
.idata:0040112C                                         ; DATA XREF: sub_402510+32↓r
.idata:00401130 ; __declspec(dllimport) void __cdecl operator delete[](void *)
.idata:00401130                 extrn __imp_??_V@YAXPAX@Z:dword
.idata:00401130                                         ; DATA XREF: operator delete[](void *)↓r
.idata:00401134 ; void (__cdecl *invalid_parameter_noinfo)()
.idata:00401134                 extrn _invalid_parameter_noinfo:dword
.idata:00401134                                         ; CODE XREF: sub_403D30+54↓p
.idata:00401134                                         ; sub_403D30+68↓p ...
.idata:00401138 ; int (__cdecl *atoi)(const char *String)
.idata:00401138                 extrn atoi:dword        ; CODE XREF: sub_403490+2EF↓p
.idata:00401138                                         ; sub_403490+367↓p
.idata:00401138                                         ; DATA XREF: ...
.idata:0040113C ; __declspec(dllimport) void * __cdecl operator new[](unsigned int)
.idata:0040113C                 extrn __imp_??_U@YAPAXI@Z:dword
.idata:0040113C                                         ; DATA XREF: operator new[](uint)↓r
.idata:00401140 ; __declspec(dllimport) public: __thiscall std::exception::exception(class std::exception const &)
.idata:00401140                 extrn __imp_??0exception@std@@QAE@ABV01@@Z:dword
.idata:00401140                                         ; CODE XREF: sub_4024A0+30↓p
.idata:00401140                                         ; sub_4049F0+C↓p
.idata:00401140                                         ; DATA XREF: ...
.idata:00401144 ; public: __thiscall std::exception::exception(char const * const &)
.idata:00401144                 extrn ??0exception@std@@QAE@ABQBD@Z:dword
.idata:00401144                                         ; CODE XREF: sub_404920+3C↓p
.idata:00401144                                         ; DATA XREF: sub_404920+3C↓r
.idata:00401148 ; public: __thiscall std::exception::exception(void)
.idata:00401148                 extrn ??0exception@std@@QAE@XZ:dword
.idata:00401148                                         ; CODE XREF: sub_4048A0+3F↓p
.idata:00401148                                         ; DATA XREF: sub_4048A0+3F↓r
.idata:0040114C ; public: virtual __thiscall std::exception::~exception(void)
.idata:0040114C                 extrn ??1exception@std@@UAE@XZ:dword
.idata:0040114C                                         ; CODE XREF: OnDownloadComplete_0+26↓p
.idata:0040114C                                         ; .text:00402479↓p
.idata:0040114C                                         ; DATA XREF: ...
.idata:00401150 ; __declspec(dllimport) public: virtual char const * __thiscall std::exception::what(void)const
.idata:00401150                 extrn __imp_?what@exception@std@@UBEPBDXZ:dword
.idata:00401150                                         ; DATA XREF: std::exception::what(void)↓r
.idata:00401154 ; __declspec(dllimport) void * __cdecl operator new(unsigned int)
.idata:00401154                 extrn __imp_??2@YAPAXI@Z:dword
.idata:00401154                                         ; DATA XREF: operator new(uint)↓r
.idata:00401158 ; __declspec(dllimport) void __cdecl operator delete(void *)
.idata:00401158                 extrn __imp_??3@YAXPAX@Z:dword
.idata:00401158                                         ; DATA XREF: operator delete(void *)↓r
.idata:0040115C ; int (*printf)(const char *const Format, ...)
.idata:0040115C                 extrn printf:dword      ; CODE XREF: sub_401900+AE↓p
.idata:0040115C                                         ; sub_401900+D3↓p
.idata:0040115C                                         ; DATA XREF: ...
.idata:00401160 ; void *(__cdecl *memmove)(void *, const void *Src, size_t Size)
.idata:00401160                 extrn memmove:dword     ; CODE XREF: ButtonDownload_Click+5↓p
.idata:00401160                                         ; DATA XREF: ButtonDownload_Click+5↓r
.idata:00401164
.idata:00401168 ;
.idata:00401168 ; Imports from SHFOLDER.dll
.idata:00401168 ;
.idata:00401168 ; HRESULT (__stdcall *SHGetFolderPathA)(HWND hwnd, int csidl, HANDLE hToken, DWORD dwFlags, LPSTR pszPath)
.idata:00401168                 extrn SHGetFolderPathA:dword
.idata:00401168                                         ; CODE XREF: sub_403850+72↓p
.idata:00401168                                         ; sub_403850+D8↓p ...
.idata:0040116C
.idata:00401170 ;
.idata:00401170 ; Imports from SHLWAPI.dll
.idata:00401170 ;
.idata:00401170 ; LPSTR (__stdcall *PathCombineA)(LPSTR pszDest, LPCSTR pszDir, LPCSTR pszFile)
.idata:00401170                 extrn PathCombineA:dword
.idata:00401170                                         ; CODE XREF: sub_403850+8F↓p
.idata:00401170                                         ; sub_403850+F5↓p ...
.idata:00401174
.idata:00401178 ;
.idata:00401178 ; Imports from USER32.dll
.idata:00401178 ;
.idata:00401178 ; HWND (__stdcall *FindWindowA)(LPCSTR lpClassName, LPCSTR lpWindowName)
.idata:00401178                 extrn FindWindowA:dword ; CODE XREF: sub_402E80+66↓p
.idata:00401178                                         ; DATA XREF: sub_402E80+66↓r ...
.idata:0040117C ; DWORD (__stdcall *GetWindowThreadProcessId)(HWND hWnd, LPDWORD lpdwProcessId)
.idata:0040117C                 extrn GetWindowThreadProcessId:dword
.idata:0040117C                                         ; CODE XREF: sub_402E80+78↓p
.idata:0040117C                                         ; DATA XREF: sub_402E80+78↓r
.idata:00401180 ; BOOL (__stdcall *PostMessageA)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
.idata:00401180                 extrn PostMessageA:dword
.idata:00401180                                         ; CODE XREF: .text:00402A38↓p
.idata:00401180                                         ; get_Downloading↓p ...
.idata:00401184
.idata:00401188 ;
.idata:00401188 ; Imports from WS2_32.dll
.idata:00401188 ;
.idata:00401188 ; int (__stdcall *WSARecv)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)
.idata:00401188                 extrn WSARecv:dword     ; CODE XREF: sub_401EA0+9B↓p
.idata:00401188                                         ; DATA XREF: sub_401EA0+9B↓r ...
.idata:0040118C ; int (__stdcall *setsockopt)(SOCKET s, int level, int optname, const char *optval, int optlen)
.idata:0040118C                 extrn setsockopt:dword  ; CODE XREF: _CloseMobiFlightAndWait_b__26_0+10↓p
.idata:0040118C                                         ; DATA XREF: _CloseMobiFlightAndWait_b__26_0+10↓r
.idata:0040118C                                         ; Import by ordinal 21
.idata:00401190 ; int (__stdcall *connect)(SOCKET s, const struct sockaddr *name, int namelen)
.idata:00401190                 extrn connect:dword     ; CODE XREF: sub_402B20+243↓p
.idata:00401190                                         ; DATA XREF: sub_402B20+243↓r
.idata:00401190                                         ; Import by ordinal 4
.idata:00401194 ; INT (__stdcall *getaddrinfo)(PCSTR pNodeName, PCSTR pServiceName, const ADDRINFOA *pHints, PADDRINFOA *ppResult)
.idata:00401194                 extrn getaddrinfo:dword ; CODE XREF: .text:00402352↓p
.idata:00401194                                         ; sub_402B20+209↓p
.idata:00401194                                         ; DATA XREF: ...
.idata:00401198 ; int (__stdcall *WSAStartup)(WORD wVersionRequested, LPWSADATA lpWSAData)
.idata:00401198                 extrn WSAStartup:dword  ; CODE XREF: .text:004022D6↓p
.idata:00401198                                         ; sub_402E00+46↓p
.idata:00401198                                         ; DATA XREF: ...
.idata:00401198                                         ; Import by ordinal 115
.idata:0040119C ; int (__stdcall *WSASend)(SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine)
.idata:0040119C                 extrn WSASend:dword     ; CODE XREF: InitializeComponent+D3↓p
.idata:0040119C                                         ; DATA XREF: InitializeComponent+D3↓r
.idata:004011A0 ; int (__stdcall *WSAGetLastError)()
.idata:004011A0                 extrn WSAGetLastError:dword
.idata:004011A0                                         ; CODE XREF: .text:00401A99↓p
.idata:004011A0                                         ; InitializeComponent+DE↓p ...
.idata:004011A0                                         ; Import by ordinal 111
.idata:004011A4 ; int (__stdcall *shutdown)(SOCKET s, int how)
.idata:004011A4                 extrn shutdown:dword    ; CODE XREF: InstallPackage+6↓p
.idata:004011A4                                         ; DATA XREF: InstallPackage+6↓r
.idata:004011A4                                         ; Import by ordinal 22
.idata:004011A8 ; int (__stdcall *WSACleanup)()
.idata:004011A8                 extrn WSACleanup:dword  ; CODE XREF: .text:loc_40238F↓p
.idata:004011A8                                         ; sub_403330+84↓p
.idata:004011A8                                         ; DATA XREF: ...
.idata:004011A8                                         ; Import by ordinal 116
.idata:004011AC ; void (__stdcall *freeaddrinfo)(PADDRINFOA pAddrInfo)
.idata:004011AC                 extrn freeaddrinfo:dword
.idata:004011AC                                         ; CODE XREF: .text:00402389↓p
.idata:004011AC                                         ; sub_402B20+28D↓p
.idata:004011AC                                         ; DATA XREF: ...
.idata:004011B0 ; int (__stdcall *closesocket)(SOCKET s)
.idata:004011B0                 extrn closesocket:dword ; CODE XREF: InstallPackage+21↓p
.idata:004011B0                                         ; DATA XREF: InstallPackage+21↓r
.idata:004011B0                                         ; Import by ordinal 3
.idata:004011B4 ; int (__stdcall *getsockopt)(SOCKET s, int level, int optname, char *optval, int *optlen)
.idata:004011B4                 extrn getsockopt:dword  ; CODE XREF: sub_401F80+3B↓p
.idata:004011B4                                         ; DATA XREF: sub_401F80+3B↓r
.idata:004011B4                                         ; Import by ordinal 7
.idata:004011B8 ; SOCKET (__stdcall *socket)(int af, int type, int protocol)
.idata:004011B8                 extrn socket:dword      ; CODE XREF: sub_402B20+22A↓p
.idata:004011B8                                         ; DATA XREF: sub_402B20+22A↓r
.idata:004011B8                                         ; Import by ordinal 23
.idata:004011BC
.idata:004011BC
.text:004011C0 ; ===========================================================================
.text:004011C0
.text:004011C0 ; Segment type: Pure code
.text:004011C0 ; Segment permissions: Read/Execute
.text:004011C0 _text           segment para public 'CODE' use32
.text:004011C0                 assume cs:_text
.text:004011C0                 ;org 4011C0h
.text:004011C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:004011C0 ; const _PVFV dword_4011C0
.text:004011C0 dword_4011C0    dd 0                    ; DATA XREF: .text:004013E4↓w
.text:004011C0                                         ; _CRT_INIT(x,x,x)+AF↓o
.text:004011C4 ; const _PVFV dword_4011C4
.text:004011C4 dword_4011C4    dd 0                    ; DATA XREF: _CRT_INIT(x,x,x):loc_40842A↓o
.text:004011C8 ; const _PIFV First
.text:004011C8 First           dd 0                    ; DATA XREF: _CRT_INIT(x,x,x)+89↓o
.text:004011CC                 dd offset _pre_c_init
.text:004011D0 ; const _PIFV Last
.text:004011D0 Last            dd 0                    ; DATA XREF: _CRT_INIT(x,x,x):loc_408404↓o
.text:004011D4                 align 10h
.text:004011E0 ; Debug Directory entries
.text:004011E0                 dd 0                    ; Characteristics
.text:004011E4                 dd 46FAD5B6h            ; TimeDateStamp: Wed Sep 26 21:57:10 2007
.text:004011E8                 dw 0                    ; MajorVersion
.text:004011EA                 dw 0                    ; MinorVersion
.text:004011EC                 dd 2                    ; Type: IMAGE_DEBUG_TYPE_CODEVIEW
.text:004011F0                 dd 45h                  ; SizeOfData
.text:004011F4                 dd rva asc_401430       ; AddressOfRawData
.text:004011F8                 dd 830h                 ; PointerToRawData
.text:004011FC dword_4011FC    dd 0                    ; DATA XREF: ___DllMainCRTStartup:loc_408568↓r
.text:004011FC                                         ; ___DllMainCRTStartup+97↓r ...
.text:00401200                 dd offset dword_401478
.text:00401204 off_401204      dd offset ??_Etype_info@@UAEPAXI@Z
.text:00401204                                         ; DATA XREF: .data:off_40B000↓o
.text:00401204                                         ; .data:off_40B034↓o ...
.text:00401204                                         ; type_info::`vector deleting destructor'(uint)
.text:00401208 ; const struct _EXCEPTION_POINTERS ExceptionInfo
.text:00401208 ExceptionInfo   _EXCEPTION_POINTERS <offset dword_40B0C0, offset dword_40B118>
.text:00401208                                         ; DATA XREF: ___report_gsfailure+D4↓o
.text:00401210 ; const CHAR ValueName[19]
.text:00401210 ValueName       db 'SimConnect_Port_IPv'
.text:00401210                                         ; DATA XREF: sub_4033E0+4D↓o
.text:00401223 ; ---------------------------------------------------------------------------
.text:00401223
.text:00401223 SafeDelete:
.text:00401223                 add     ss:[eax], al
.text:00401223 ; ---------------------------------------------------------------------------
.text:00401226                 dw 0
.text:00401228 dword_401228    dd 436D6953h, 656E6E6Fh, 505F7463h
.text:00401228                                         ; DATA XREF: sub_4033E0+54↓o
.text:00401234                 db 6Fh, 72h
.text:00401236 ; ---------------------------------------------------------------------------
.text:00401236
.text:00401236 ManualUpgradeFromCommandLine:
.text:00401236                 jz      short loc_401297
.text:00401238                 dec     ecx
.text:00401239                 push    eax
.text:0040123A                 jbe     short loc_401270
.text:0040123A ; ---------------------------------------------------------------------------
.text:0040123C                 dd 0
.text:00401240 ; const CHAR aIpv4[]
.text:00401240 aIpv4           db 'IPv4',0             ; DATA XREF: sub_403490:loc_4035A6↓o
.text:00401245                 align 4
.text:00401248 ; const CHAR aIpv6[]
.text:00401248 aIpv6           db 'IPv6',0             ; DATA XREF: sub_403490:loc_4035EB↓o
.text:0040124D                 align 10h
.text:00401250 ; const CHAR String2[]
.text:00401250 String2         db 'Auto',0             ; DATA XREF: sub_403490+F1↓o
.text:00401255                 align 4
.text:00401258 ; const CHAR aPipe[]
.text:00401258 aPipe           db 'Pipe',0             ; DATA XREF: sub_403490:loc_403630↓o
.text:0040125D                 align 10h
.text:00401260 dword_401260    dd 73255C5Ch, 7069705Ch, 694D5C65h, 736F7263h
.text:00401260                                         ; DATA XREF: sub_402B20+B0↓o
.text:00401270 ; ---------------------------------------------------------------------------
.text:00401270
.text:00401270 loc_401270:                             ; CODE XREF: .text:0040123A↑j
.text:00401270                 outsd
.text:00401271                 db      66h
.text:00401271                 jz      short near ptr 1294h
.text:00401274                 inc     esi
.text:00401275                 insb
.text:00401276                 imul    esp, [edi+68h], 69532074h
.text:0040127D                 insd
.text:0040127E                 jnz     short loc_4012EC
.text:00401280                 popa
.text:00401281                 jz      short near ptr loc_4012F1+1
.text:00401283                 jb      short loc_4012E1
.text:00401285                 push    ebx
.text:00401286                 imul    ebp, [ebp+43h], 656E6E6Fh
.text:0040128D
.text:0040128D loc_40128D:                             ; DATA XREF: sub_402B20+105↓o
.text:0040128D                 arpl    [eax+eax+5Ch], si
.text:00401291                 pop     esp
.text:00401292                 and     eax, 69705C73h
.text:00401297
.text:00401297 loc_401297:                             ; CODE XREF: .text:ManualUpgradeFromCommandLine↑j
.text:00401297                 jo      short loc_4012FE
.text:00401299                 pop     esp
.text:0040129A                 and     eax, 73h
.text:0040129F
.text:0040129F loc_40129F:                             ; DATA XREF: sub_402E80+29E↓o
.text:0040129F                                         ; sub_402E80+363↓o
.text:0040129F                 add     [ecx], dh
.text:004012A1                 xor     dh, [edi]
.text:004012A3                 xor     cs:[esi], ch
.text:004012A6                 xor     [esi], ch
.text:004012A8                 xor     [eax], eax
.text:004012A8 ; ---------------------------------------------------------------------------
.text:004012AA                 dw 0
.text:004012AC dword_4012AC    dd 313A3Ah              ; DATA XREF: sub_402E80:loc_403037↓o
.text:004012AC                                         ; sub_402E80+287↓o
.text:004012B0 dword_4012B0    dd 2Eh                  ; DATA XREF: sub_402B20+77↓o
.text:004012B0                                         ; sub_402B20+7F↓o ...
.text:004012B4 ; const CHAR pszFile[]
.text:004012B4 pszFile         db 'SimConnect.cfg',0   ; DATA XREF: sub_403850+7C↓o
.text:004012B4                                         ; sub_403850+E2↓o ...
.text:004012C3                 align 4
.text:004012C4 aSimconnect     db 'SimConnect',0       ; DATA XREF: sub_403490+69↓o
.text:004012C4                                         ; sub_403A00+32↓o
.text:004012CF                 align 10h
.text:004012D0 aSimconnectU    db 'SimConnect.%u',0    ; DATA XREF: sub_403490+7E↓o
.text:004012D0                                         ; sub_403A00+47↓o
.text:004012DE                 align 10h
.text:004012E0                 db 31h
.text:004012E1 ; ---------------------------------------------------------------------------
.text:004012E1
.text:004012E1 loc_4012E1:                             ; CODE XREF: .text:00401283↑j
.text:004012E1                 xor     dh, [edi]
.text:004012E3                 xor     cs:[esi], ch
.text:004012E6                 xor     [esi], ch
.text:004012E8                 xor     [eax], eax
.text:004012E8 ; ---------------------------------------------------------------------------
.text:004012EA                 dw 0
.text:004012EC ; ---------------------------------------------------------------------------
.text:004012EC
.text:004012EC loc_4012EC:                             ; CODE XREF: .text:0040127E↑j
.text:004012EC                                         ; DATA XREF: .text:0040232A↓o
.text:004012EC                 cmp     bh, [edx]
.text:004012EE                 xor     [eax], eax
.text:004012F0
.text:004012F0 loc_4012F0:                             ; DATA XREF: sub_401900+A9↓o
.text:004012F0                                         ; sub_401900+CE↓o
.text:004012F0                 inc     ebx
.text:004012F1
.text:004012F1 loc_4012F1:                             ; CODE XREF: .text:00401281↑j
.text:004012F1                 jb      short loc_401358
.text:004012F3                 popa
.text:004012F4                 jz      short near ptr loc_40135A+1
.text:004012F6                 inc     ebp
.text:004012F7                 jbe     short loc_40135E
.text:004012F9                 outsb
.text:004012FA                 jz      short loc_40131C
.text:004012FC                 popaw
.text:004012FE
.text:004012FE loc_4012FE:                             ; CODE XREF: .text:loc_401297↑j
.text:004012FE                 imul    ebp, [ebp+64h], 74697720h
.text:00401306                 push    2E642520h
.text:0040130B                 or      al, [eax]
.text:0040130B ; ---------------------------------------------------------------------------
.text:0040130D                 db 3 dup(0)
.text:00401310 off_401310      dd offset sub_4016B0    ; DATA XREF: sub_4015F0+5↓o
.text:00401310                                         ; sub_4016B0+10↓o ...
.text:00401314                 dd offset sub_401900
.text:00401318                 dd offset sub_4019F0
.text:0040131C ; ---------------------------------------------------------------------------
.text:0040131C
.text:0040131C loc_40131C:                             ; CODE XREF: .text:004012FA↑j
.text:0040131C                 jo      short near ptr byte_40133D
.text:0040131E                 inc     eax
.text:0040131F                 add     [eax], dl
.text:00401321                 sub     eax, [eax+0]
.text:00401324
.text:00401324 loc_401324:                             ; DATA XREF: .data:0040B028↓o
.text:00401324                                         ; .data:0040B02C↓o ...
.text:00401324                 bound   esp, [ecx+64h]
.text:00401327                 and     [ecx+6Ch], ah
.text:0040132A                 insb
.text:0040132B                 outsd
.text:0040132C                 arpl    [ecx+74h], sp
.text:0040132F
.text:0040132F loc_40132F:                             ; DATA XREF: sub_402B20+5D↓o
.text:0040132F                                         ; sub_402B20:loc_402BAC↓o ...
.text:0040132F                 imul    ebp, [edi+6Eh], 53460000h
.text:00401336                 cmp     [eax], edi
.text:00401338                 dec     ebp
.text:00401339                 inc     ecx
.text:0040133A                 dec     ecx
.text:0040133B                 dec     esi
.text:0040133B ; ---------------------------------------------------------------------------
.text:0040133C                 db 0
.text:0040133D byte_40133D     db 3 dup(0)             ; CODE XREF: .text:loc_40131C↑j
.text:00401340 ; const CHAR SubKey[24]
.text:00401340 SubKey          db 'SOFTWARE\Microsoft\Micro'
.text:00401340                                         ; DATA XREF: sub_4033E0+2C↓o
.text:00401358 ; ---------------------------------------------------------------------------
.text:00401358
.text:00401358 loc_401358:                             ; CODE XREF: .text:loc_4012F1↑j
.text:00401358                 jnb     short near ptr GetTheLastVersionNumberAvailable+2
.text:0040135A
.text:0040135A loc_40135A:                             ; CODE XREF: .text:004012F4↑j
.text:0040135A                 db      66h
.text:0040135A                 jz      short near ptr 137Dh
.text:0040135D                 inc     edi
.text:0040135E
.text:0040135E loc_40135E:                             ; CODE XREF: .text:004012F7↑j
.text:0040135E                 popa
.text:0040135F                 insd
.text:00401360                 db      65h
.text:00401360                 jnb     short loc_4013BF
.text:00401363                 inc     esi
.text:00401364                 insb
.text:00401365                 imul    esp, [edi+68h], 69532074h
.text:0040136C                 insd
.text:0040136D                 jnz     short near ptr loc_4013D9+2
.text:0040136F                 popa
.text:00401370                 jz      short loc_4013E1
.text:00401372                 jb      short $+2
.text:00401374
.text:00401374 loc_401374:                             ; CODE XREF: .text:00401372↑j
.text:00401374                                         ; DATA XREF: sub_403490+B5↓o
.text:00401374                 push    eax
.text:00401375                 jb      short loc_4013E6
.text:00401377                 jz      short near ptr __load_config_used
.text:00401379                 arpl    [edi+6Ch], bp
.text:00401379 ; ---------------------------------------------------------------------------
.text:0040137C                 dd 0
.text:00401380 ; const CHAR KeyName[]
.text:00401380 KeyName         db 'Address',0          ; DATA XREF: sub_403490+1D6↓o
.text:00401388 ; const CHAR aPort[]
.text:00401388 aPort           db 'Port',0             ; DATA XREF: sub_403490+240↓o
.text:0040138D                 align 10h
.text:00401390 ; const CHAR aMaxreceivesize[]
.text:00401390 aMaxreceivesize db 'MaxReceiveSize',0   ; DATA XREF: sub_403490+2A0↓o
.text:0040139F                 align 10h
.text:004013A0 ; const CHAR aDisablenagle[]
.text:004013A0 aDisablenagle   db 'DisableNagle',0     ; DATA XREF: sub_403490+31E↓o
.text:004013AD                 align 10h
.text:004013B0 dword_4013B0    dd 74636576h, 543C726Fh, 6F74203Eh
.text:004013B0                                         ; DATA XREF: sub_4048A0+27↓o
.text:004013BC                 db 6Fh, 20h, 6Ch
.text:004013BF ; ---------------------------------------------------------------------------
.text:004013BF
.text:004013BF loc_4013BF:                             ; CODE XREF: .text:00401360↑j
.text:004013BF                 outsd
.text:004013C0                 outsb
.text:004013C1                 add     [bx+si], al
.text:004013C4
.text:004013C4 loc_4013C4:                             ; DATA XREF: .text:loc_4023C0↓o
.text:004013C4                                         ; OnDownloadComplete_0+20↓o ...
.text:004013C4                 loopne  near ptr __load_config_used+1
.text:004013C6                 inc     eax
.text:004013C7
.text:004013C7 GetTheLastVersionNumberAvailable:       ; CODE XREF: .text:loc_401358↑j
.text:004013C7                                         ; DATA XREF: sub_402430+8↓o ...
.text:004013C7                 add     [edx+60004086h], dl
.text:004013CD                 and     al, 40h
.text:004013CF                 add     [eax], dl
.text:004013D1                 and     al, 40h
.text:004013D3
.text:004013D3 loc_4013D3:                             ; DATA XREF: InitializeComponent_0+3↓o
.text:004013D3                                         ; sub_402780+2D↓o
.text:004013D3                 add     [eax+27h], dl
.text:004013D6                 inc     eax
.text:004013D7                 add     al, al
.text:004013D9
.text:004013D9 loc_4013D9:                             ; CODE XREF: .text:0040136D↑j
.text:004013D9                 sub     al, [eax+0]
.text:004013DC                 pusha
.text:004013DD                 sub     al, [eax+0]
.text:004013E0                 pusha
.text:004013E1
.text:004013E1 loc_4013E1:                             ; CODE XREF: .text:00401370↑j
.text:004013E1                 sub     [eax+0], eax
.text:004013E4                 adc     [ebx+0], ch
.text:004013E6
.text:004013E6 loc_4013E6:                             ; CODE XREF: .text:00401375↑j
.text:004013E6                 inc     eax
.text:004013E6 ; ---------------------------------------------------------------------------
.text:004013E7                 db 0
.text:004013E8 __load_config_used dd 48h               ; CODE XREF: .text:00401377↑j
.text:004013E8                                         ; .text:loc_4013C4↑j
.text:004013E8                                         ; Size
.text:004013EC                 dd 0                    ; Time stamp
.text:004013F0                 dw 2 dup(0)             ; Version: 0.0
.text:004013F4                 dd 0                    ; GlobalFlagsClear
.text:004013F8                 dd 0                    ; GlobalFlagsSet
.text:004013FC                 dd 0                    ; CriticalSectionDefaultTimeout
.text:00401400                 dd 0                    ; DeCommitFreeBlockThreshold
.text:00401404                 dd 0                    ; DeCommitTotalFreeThreshold
.text:00401408                 dd 0                    ; LockPrefixTable
.text:0040140C                 dd 0                    ; MaximumAllocationSize
.text:00401410                 dd 0                    ; VirtualMemoryThreshold
.text:00401414                 dd 0                    ; ProcessAffinityMask
.text:00401418                 dd 0                    ; ProcessHeapFlags
.text:0040141C                 dw 0                    ; CSDVersion
.text:0040141E                 dw 0                    ; Reserved1
.text:00401420                 dd 0                    ; EditList
.text:00401424                 dd offset ___security_cookie ; SecurityCookie
.text:00401428                 dd offset ___safe_se_handler_table ; SEHandlerTable
.text:0040142C                 dd 0Ah                  ; SEHandlerCount
.text:00401430 ; Debug information (IMAGE_DEBUG_TYPE_CODEVIEW)
.text:00401430 asc_401430      db 'RSDS'               ; DATA XREF: .text:004011F4↑o
.text:00401430                                         ; CV signature
.text:00401434                 dd 0A739C60Dh           ; Data1 ; GUID
.text:00401438                 dw 3E9h                 ; Data2
.text:0040143A                 dw 4294h                ; Data3
.text:0040143C                 db 8Fh, 35h, 0EDh, 47h, 0BBh, 41h, 3Ch, 0ADh; Data4
.text:00401444                 dd 1                    ; Age
.text:00401448                 text "UTF-8", 'D:\bt\1202\target\retail\i386\SimConnect.pdb',0 ; PdbFileName
.text:00401475                 align 4
.text:00401478 dword_401478    dd 3 dup(0)             ; DATA XREF: .text:00401200↑o
.text:00401484                 dd offset off_40B000
.text:00401488                 dd offset dword_40148C
.text:0040148C dword_40148C    dd 2 dup(0)             ; DATA XREF: .text:00401488↑o
.text:0040148C                                         ; .text:004014BC↓o
.text:00401494                 db 1, 0
.text:00401496 CloseMobiFlightAndWait dw 0
.text:00401498                 dd offset off_40149C
.text:0040149C off_40149C      dd offset off_4014A4    ; DATA XREF: .text:00401498↑o
.text:004014A0                 dd 0
.text:004014A4 off_4014A4      dd offset off_40B000    ; DATA XREF: .text:off_40149C↑o
.text:004014A8                 align 10h
.text:004014B0                 dd 0FFFFFFFFh, 0
.text:004014B8                 dd 40h
.text:004014BC                 dd offset dword_40148C
.text:004014C0 ___safe_se_handler_table dd rva __except_handler4
.text:004014C0                                         ; DATA XREF: .text:00401428↑o
.text:004014C4                 dd rva SEH_4024A0
.text:004014C8                 dd rva SEH_403A00
.text:004014CC                 dd rva SEH_403490
.text:004014D0                 dd rva SEH_4048A0
.text:004014D4                 dd rva SEH_404630
.text:004014D8                 dd rva SEH_402780
.text:004014DC                 dd rva sub_408E76
.text:004014E0                 dd rva SEH_402B20
.text:004014E4                 dd rva SEH_402E80
.text:004014E8                 dd 0
.text:004014EC dword_4014EC    dd 2 dup(0)             ; DATA XREF: sub_4087DB+2↓o
.text:004014EC                                         ; sub_4087DB+7↓o
.text:004014F4 dword_4014F4    dd 0                    ; DATA XREF: sub_408804+2↓o
.text:004014F4                                         ; sub_408804+7↓o
.text:004014F8 ExternAskToCheckLastVersion dd 6 dup(0)
.text:00401510 ; ---------------------------------------------------------------------------
.text:00401510 ; START OF FUNCTION CHUNK FOR sub_402780
.text:00401510 ;   ADDITIONAL PARENT FUNCTION sub_408E68
.text:00401510
.text:00401510 loc_401510:                             ; CODE XREF: sub_402780+66B1↓j
.text:00401510                                         ; sub_408E68+9↓j
.text:00401510 ; __unwind { // SEH_402780
.text:00401510                 mov     edi, edi
.text:00401512                 push    edi
.text:00401513                 mov     edi, [esi]
.text:00401515                 test    edi, edi
.text:00401517                 jz      short loc_401529
.text:00401519                 push    edi             ; lpCriticalSection
.text:0040151A                 call    ds:DeleteCriticalSection
.text:00401520                 push    edi             ; void *
.text:00401521                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401526                 add     esp, 4
.text:00401529
.text:00401529 loc_401529:                             ; CODE XREF: sub_402780-1269↑j
.text:00401529                 mov     dword ptr [esi], 0
.text:0040152F                 mov     dword ptr [esi+10h], 0
.text:00401536                 mov     dword ptr [esi+0Ch], 0
.text:0040153D                 pop     edi
.text:0040153E                 retn
.text:0040153E ; } // starts at 401510
.text:0040153E ; END OF FUNCTION CHUNK FOR sub_402780
.text:0040153E ; ---------------------------------------------------------------------------
.text:0040153F                 db 11h dup(0CCh)
.text:00401550
.text:00401550 ; =============== S U B R O U T I N E =======================================
.text:00401550
.text:00401550
.text:00401550 sub_401550      proc near               ; CODE XREF: .text:00401893↓p
.text:00401550                                         ; sub_401900+9↓p
.text:00401550                 mov     edi, edi
.text:00401552                 push    ebx
.text:00401552 sub_401550      endp ; sp-analysis failed
.text:00401552
.text:00401553
.text:00401553 ; =============== S U B R O U T I N E =======================================
.text:00401553
.text:00401553
.text:00401553 _cctor          proc near
.text:00401553                 push    esi
.text:00401554                 push    edi
.text:00401555                 mov     edi, eax
.text:00401557                 mov     eax, [edi]
.text:00401559                 push    eax             ; lpCriticalSection
.text:0040155A                 call    ds:EnterCriticalSection
.text:00401560                 mov     ecx, [edi]
.text:00401562                 mov     esi, [edi+4]
.text:00401565                 xor     ebx, ebx
.text:00401567                 push    ecx             ; lpCriticalSection
.text:00401568                 mov     [edi+8], ebx
.text:0040156B                 mov     [edi+4], ebx
.text:0040156E                 mov     [edi+10h], ebx
.text:00401571                 mov     [edi+0Ch], ebx
.text:00401574                 call    ds:LeaveCriticalSection
.text:0040157A                 cmp     esi, ebx
.text:0040157C                 jz      short loc_40159A
.text:0040157E                 mov     edi, edi
.text:00401580
.text:00401580 loc_401580:                             ; CODE XREF: _cctor+45↓j
.text:00401580                 mov     edx, [esi+4]
.text:00401583                 mov     edi, [esi]
.text:00401585                 push    edx             ; void *
.text:00401586                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0040158B                 push    esi             ; void *
.text:0040158C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401591                 add     esp, 8
.text:00401594                 cmp     edi, ebx
.text:00401596                 mov     esi, edi
.text:00401598                 jnz     short loc_401580
.text:0040159A
.text:0040159A loc_40159A:                             ; CODE XREF: _cctor+29↑j
.text:0040159A                 pop     edi
.text:0040159B                 pop     esi
.text:0040159C                 pop     ebx
.text:0040159D                 retn
.text:0040159D _cctor          endp ; sp-analysis failed
.text:0040159D
.text:0040159D ; ---------------------------------------------------------------------------
.text:0040159E                 db 12h dup(0CCh)
.text:004015B0
.text:004015B0 ; =============== S U B R O U T I N E =======================================
.text:004015B0
.text:004015B0
.text:004015B0 Main            proc near               ; CODE XREF: InitializeComponent+ED↓p
.text:004015B0                                         ; sub_401EA0+B5↓p
.text:004015B0                 mov     edi, edi
.text:004015B2                 push    esi
.text:004015B3                 mov     esi, eax
.text:004015B5                 lea     eax, [esi+1D4h]
.text:004015BB                 push    eax             ; lpAddend
.text:004015BC                 call    ds:InterlockedDecrement
.text:004015C2                 test    eax, eax
.text:004015C4                 jnz     short loc_4015DD
.text:004015C6                 call    loc_401890
.text:004015CB                 test    esi, esi
.text:004015CD                 jz      short loc_4015D9
.text:004015CF                 mov     edx, [esi]
.text:004015D1                 mov     eax, [edx]
.text:004015D3                 push    1
.text:004015D5                 mov     ecx, esi
.text:004015D7                 call    eax
.text:004015D9
.text:004015D9 loc_4015D9:                             ; CODE XREF: Main+1D↑j
.text:004015D9                 mov     al, 1
.text:004015DB                 pop     esi
.text:004015DC                 retn
.text:004015DD ; ---------------------------------------------------------------------------
.text:004015DD
.text:004015DD loc_4015DD:                             ; CODE XREF: Main+14↑j
.text:004015DD                 xor     al, al
.text:004015DF                 pop     esi
.text:004015E0                 retn
.text:004015E0 Main            endp
.text:004015E0
.text:004015E0 ; ---------------------------------------------------------------------------
.text:004015E1                 db 0Fh dup(0CCh)
.text:004015F0
.text:004015F0 ; =============== S U B R O U T I N E =======================================
.text:004015F0
.text:004015F0
.text:004015F0 sub_4015F0      proc near               ; CODE XREF: .text:004025FE↓p
.text:004015F0                 mov     edi, edi
.text:004015F2                 push    ebx
.text:004015F3                 xor     ebx, ebx
.text:004015F5                 mov     dword ptr [esi], offset off_401310
.text:004015FB                 mov     [esi+0Ch], ebx
.text:004015FE                 mov     [esi+10h], ebx
.text:00401601                 mov     [esi+14h], ebx
.text:00401604                 mov     [esi+18h], eax
.text:00401607                 push    edi
.text:00401608                 push    18h             ; unsigned int
.text:0040160A                 mov     [esi+24h], ebx
.text:0040160D                 mov     [esi+28h], ebx
.text:00401610                 mov     [esi+2Ch], ebx
.text:00401613                 mov     [esi+30h], ebx
.text:00401616                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0040161B                 mov     edi, eax
.text:0040161D                 add     esp, 4
.text:00401620                 cmp     edi, ebx
.text:00401622                 jz      short loc_40162D
.text:00401624                 push    edi             ; lpCriticalSection
.text:00401625                 call    ds:InitializeCriticalSection
.text:0040162B                 jmp     short loc_40162F
.text:0040162D ; ---------------------------------------------------------------------------
.text:0040162D
.text:0040162D loc_40162D:                             ; CODE XREF: sub_4015F0+32↑j
.text:0040162D                 xor     edi, edi
.text:0040162F
.text:0040162F loc_40162F:                             ; CODE XREF: sub_4015F0+3B↑j
.text:0040162F                 mov     [esi+20h], edi
.text:00401632                 lea     eax, [esi+1D4h]
.text:00401638                 or      edi, 0FFFFFFFFh
.text:0040163B                 mov     [esi+34h], bl
.text:0040163E                 mov     [esi+3Ch], ebx
.text:00401641                 mov     [esi+40h], ebx
.text:00401644                 mov     [esi+4Ch], bl
.text:00401647                 mov     [esi+16Ch], ebx
.text:0040164D                 mov     [esi+178h], bl
.text:00401653                 mov     [esi+1CCh], ebx
.text:00401659                 mov     dword ptr [esi+1D0h], 400h
.text:00401663                 mov     [eax], ebx
.text:00401665                 mov     [esi+1D8h], ebx
.text:0040166B                 mov     [esi+1DCh], edi
.text:00401671                 push    eax             ; lpAddend
.text:00401672                 mov     [esi+8], edi
.text:00401675                 mov     [esi+170h], edi
.text:0040167B                 call    ds:InterlockedIncrement
.text:00401681                 add     dword_40B400, 1
.text:00401688                 mov     [esi+1B4h], edi
.text:0040168E                 mov     [esi+18Ch], edi
.text:00401694                 pop     edi
.text:00401695                 mov     [esi+1C0h], ebx
.text:0040169B                 mov     [esi+198h], ebx
.text:004016A1                 mov     eax, esi
.text:004016A3                 pop     ebx
.text:004016A4                 retn
.text:004016A4 sub_4015F0      endp
.text:004016A4
.text:004016A4 ; ---------------------------------------------------------------------------
.text:004016A5                 align 10h
.text:004016B0
.text:004016B0 ; =============== S U B R O U T I N E =======================================
.text:004016B0
.text:004016B0 ; Attributes: bp-based frame
.text:004016B0
.text:004016B0 ; int __thiscall sub_4016B0(void *, char)
.text:004016B0 sub_4016B0      proc near               ; DATA XREF: .text:off_401310↑o
.text:004016B0
.text:004016B0 arg_0           = byte ptr  8
.text:004016B0
.text:004016B0                 mov     edi, edi
.text:004016B2                 push    ebp
.text:004016B3                 mov     ebp, esp
.text:004016B5                 sub     dword_40B400, 1
.text:004016BC                 push    esi
.text:004016BD                 mov     esi, ecx
.text:004016BF                 push    edi
.text:004016C0                 mov     dword ptr [esi], offset off_401310
.text:004016C6                 mov     edi, [esi+20h]
.text:004016C9                 test    edi, edi
.text:004016CB                 jz      short loc_4016DD
.text:004016CD                 push    edi             ; lpCriticalSection
.text:004016CE                 call    ds:DeleteCriticalSection
.text:004016D4                 push    edi             ; void *
.text:004016D5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004016DA                 add     esp, 4
.text:004016DD
.text:004016DD loc_4016DD:                             ; CODE XREF: sub_4016B0+1B↑j
.text:004016DD                 test    [ebp+arg_0], 1
.text:004016E1                 mov     dword ptr [esi+20h], 0
.text:004016E8                 mov     dword ptr [esi+30h], 0
.text:004016EF                 mov     dword ptr [esi+2Ch], 0
.text:004016F6                 jz      short loc_401701
.text:004016F8                 push    esi             ; void *
.text:004016F9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004016FE                 add     esp, 4
.text:00401701
.text:00401701 loc_401701:                             ; CODE XREF: sub_4016B0+46↑j
.text:00401701                 pop     edi
.text:00401702                 mov     eax, esi
.text:00401704                 pop     esi
.text:00401705                 pop     ebp
.text:00401706                 retn    4
.text:00401706 sub_4016B0      endp
.text:00401706
.text:00401706 ; ---------------------------------------------------------------------------
.text:00401709                 align 10h
.text:00401710 ; START OF FUNCTION CHUNK FOR sub_402780
.text:00401710 ;   ADDITIONAL PARENT FUNCTION sub_408E60
.text:00401710
.text:00401710 loc_401710:                             ; CODE XREF: sub_402780+66A3↓j
.text:00401710                                         ; sub_408E60+3↓j
.text:00401710 ; __unwind { // SEH_402780
.text:00401710                 sub     dword_40B400, 1
.text:00401717                 push    esi
.text:00401718                 mov     esi, ecx
.text:0040171A                 push    edi
.text:0040171B                 mov     dword ptr [esi], offset off_401310
.text:00401721                 mov     edi, [esi+20h]
.text:00401724                 test    edi, edi
.text:00401726                 jz      short loc_401738
.text:00401728                 push    edi             ; lpCriticalSection
.text:00401729                 call    ds:DeleteCriticalSection
.text:0040172F                 push    edi             ; void *
.text:00401730                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401735                 add     esp, 4
.text:00401738
.text:00401738 loc_401738:                             ; CODE XREF: sub_402780-105A↑j
.text:00401738                 pop     edi
.text:00401739                 mov     dword ptr [esi+20h], 0
.text:00401740                 mov     dword ptr [esi+30h], 0
.text:00401747                 mov     dword ptr [esi+2Ch], 0
.text:0040174E                 pop     esi
.text:0040174F                 retn
.text:0040174F ; } // starts at 401710
.text:0040174F ; END OF FUNCTION CHUNK FOR sub_402780
.text:0040174F ; ---------------------------------------------------------------------------
.text:00401750                 align 20h
.text:00401760
.text:00401760 loc_401760:                             ; CODE XREF: sub_402B20+197↓p
.text:00401760                                         ; sub_402B20+26F↓p
.text:00401760                 mov     edi, edi
.text:00401762                 push    ebp
.text:00401763                 mov     ebp, esp
.text:00401765                 mov     eax, [esi+18h]
.text:00401768                 push    ebx
.text:00401769                 xor     ebx, ebx
.text:0040176B                 sub     eax, ebx
.text:0040176D                 jz      short near ptr byte_401786
.text:0040176F                 sub     eax, 1
.text:00401772                 jnz     short loc_401796
.text:00401774                 mov     eax, [ebp+8]
.text:00401774 ; ---------------------------------------------------------------------------
.text:00401777                 db 0C7h
.text:00401778                 dd 17086h
.text:0040177C                 db 0, 0FFh
.text:0040177E _ctor           dw 0FFFFh
.text:00401780                 dd 84689FFh
.text:00401784 ; ---------------------------------------------------------------------------
.text:00401784                 jmp     short loc_401796
.text:00401784 ; ---------------------------------------------------------------------------
.text:00401786 byte_401786     db 8Bh                  ; CODE XREF: .text:0040176D↑j
.text:00401787 ; ---------------------------------------------------------------------------
.text:00401787
.text:00401787 get_ResourceManager:
.text:00401787                 dec     ebp
.text:00401788                 or      bh, al
.text:0040178A                 xchg    dh, [eax+1]
.text:0040178A ; ---------------------------------------------------------------------------
.text:0040178D                 db 2 dup(0), 0FFh
.text:00401790                 dd 89FFFFFFh
.text:00401794                 db 4Eh, 8
.text:00401796 ; ---------------------------------------------------------------------------
.text:00401796
.text:00401796 loc_401796:                             ; CODE XREF: .text:00401772↑j
.text:00401796                                         ; .text:00401784↑j
.text:00401796                 mov     eax, [ebp+0Ch]
.text:00401799                 mov     cl, [ebp+10h]
.text:0040179C                 push    800h
.text:004017A1                 mov     [esi+174h], edx
.text:004017A7                 mov     [esi+1D0h], eax
.text:004017AD                 mov     [esi+178h], cl
.text:004017B3                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:004017B8                 push    0Ch
.text:004017BA                 mov     [esi+3Ch], eax
.text:004017BA ; ---------------------------------------------------------------------------
.text:004017BD                 db 0C7h, 86h, 68h
.text:004017C0 ; ---------------------------------------------------------------------------
.text:004017C0
.text:004017C0 get_Culture:
.text:004017C0                 add     [eax], eax
.text:004017C0 ; ---------------------------------------------------------------------------
.text:004017C2                 dw 0
.text:004017C4                 dd 89000008h
.text:004017C8                 db 9Eh, 0D8h, 1
.text:004017CB set_Culture     db 0
.text:004017CC                 dd 0A49E8900h
.text:004017D0                 db 1, 2 dup(0)
.text:004017D3 ; ---------------------------------------------------------------------------
.text:004017D3
.text:004017D3 get_Default:
.text:004017D3                 mov     [esi+1A8h], ebx
.text:004017D3 ; ---------------------------------------------------------------------------
.text:004017D9                 db 89h, 9Eh, 0ACh
.text:004017DC                 db 1, 0
.text:004017DE ; ---------------------------------------------------------------------------
.text:004017DE
.text:004017DE _cctor_0:
.text:004017DE                 add     [ecx+1B09Eh], cl
.text:004017E4                 add     [ecx+1C09Eh], cl
.text:004017EA                 add     [ecx+17C9Eh], cl
.text:004017EA ; ---------------------------------------------------------------------------
.text:004017F0                 db 0, 89h, 9Eh
.text:004017F3
.text:004017F3 ; =============== S U B R O U T I N E =======================================
.text:004017F3
.text:004017F3
.text:004017F3 _ctor_0         proc near
.text:004017F3                 add     byte ptr [ecx], 0
.text:004017F6                 add     [ecx+1849Eh], cl
.text:004017FC                 add     [ecx+1889Eh], cl
.text:00401802                 add     [ecx+1989Eh], cl
.text:00401808                 add     [ecx+1B49Eh], cl
.text:0040180E                 add     [ecx+18C9Eh], cl
.text:00401814                 add     [ecx+1B8B6h], cl
.text:0040181A                 add     [ecx+190B6h], cl
.text:00401820                 add     dh, al
.text:00401822                 xchg    bh, [ecx+eax-77FF0000h]
.text:00401829                 sahf
.text:0040182A                 xchg    eax, esp
.text:0040182B                 add     [eax], eax
.text:0040182D                 add     dh, al
.text:0040182F                 xchg    bh, [ebp+1000001h]
.text:00401835                 mov     byte ptr [esi+195h], 1
.text:0040183C                 mov     [esi+0Ch], ebx
.text:0040183F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00401844                 add     esp, 8
.text:00401847                 cmp     eax, ebx
.text:00401849                 jz      short loc_401855
.text:0040184B                 mov     [eax], ebx
.text:0040184D                 mov     [eax+4], ebx
.text:00401850                 mov     [eax+8], ebx
.text:00401853                 mov     ebx, eax
.text:00401855
.text:00401855 loc_401855:                             ; CODE XREF: _ctor_0+56↑j
.text:00401855                 lea     edx, [esi+50h]
.text:00401858                 push    edx             ; lpCriticalSection
.text:00401859                 mov     [esi+16Ch], ebx
.text:0040185F                 call    ds:InitializeCriticalSection
.text:00401865                 mov     eax, dword_40B3F8
.text:0040186A                 mov     [esi+4], eax
.text:0040186D                 add     eax, 1
.text:00401870                 mov     byte ptr [esi+4Ch], 1
.text:00401874                 mov     dword_40B3F8, eax
.text:00401879                 pop     ebx
.text:0040187A                 pop     ebp
.text:0040187B                 retn    0Ch
.text:0040187B _ctor_0         endp ; sp-analysis failed
.text:0040187B
.text:0040187B ; ---------------------------------------------------------------------------
.text:0040187E                 db 12h dup(0CCh)
.text:00401890 ; ---------------------------------------------------------------------------
.text:00401890
.text:00401890 loc_401890:                             ; CODE XREF: Main+16↑p
.text:00401890                                         ; Function+173↓p ...
.text:00401890                 lea     eax, [esi+20h]
.text:00401893                 call    sub_401550
.text:00401898                 mov     eax, [esi+3Ch]
.text:0040189B                 test    eax, eax
.text:0040189D                 jz      short loc_4018A8
.text:0040189F                 push    eax
.text:004018A0                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004018A5                 add     esp, 4
.text:004018A8
.text:004018A8 loc_4018A8:                             ; CODE XREF: .text:0040189D↑j
.text:004018A8                 push    edi
.text:004018A9                 mov     edi, [esi+16Ch]
.text:004018AF                 test    edi, edi
.text:004018B1                 jz      short loc_4018CC
.text:004018B3                 mov     eax, [edi+8]
.text:004018B6                 test    eax, eax
.text:004018B8                 jz      short loc_4018C3
.text:004018BA                 push    eax
.text:004018BB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004018C0                 add     esp, 4
.text:004018C3
.text:004018C3 loc_4018C3:                             ; CODE XREF: .text:004018B8↑j
.text:004018C3                 push    edi
.text:004018C4                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004018C9                 add     esp, 4
.text:004018CC
.text:004018CC loc_4018CC:                             ; CODE XREF: .text:004018B1↑j
.text:004018CC                 cmp     byte ptr [esi+4Ch], 0
.text:004018D0                 mov     dword ptr [esi+44h], 0
.text:004018D7                 mov     dword ptr [esi+48h], 0
.text:004018DE                 pop     edi
.text:004018DF                 jz      short near ptr loc_4018EE+1
.text:004018E1                 lea     eax, [esi+50h]
.text:004018E4                 push    eax
.text:004018E4 ; ---------------------------------------------------------------------------
.text:004018E5                 db 0FFh, 15h
.text:004018E7                 db  50h ; P OFF32 SEGDEF [_text,401050]
.text:004018E8                 db 10h
.text:004018E9
.text:004018E9 ; =============== S U B R O U T I N E =======================================
.text:004018E9
.text:004018E9
.text:004018E9 OpenNotes       proc near
.text:004018E9                 inc     eax
.text:004018EA                 add     dh, al
.text:004018EC                 inc     esi
.text:004018ED                 dec     esp
.text:004018EE
.text:004018EE loc_4018EE:                             ; CODE XREF: .text:004018DF↑j
.text:004018EE                 add     bl, al
.text:004018F0                 int     3               ; Trap to Debugger
.text:004018F1                 int     3               ; Trap to Debugger
.text:004018F2                 int     3               ; Trap to Debugger
.text:004018F3                 int     3               ; Trap to Debugger
.text:004018F4                 int     3               ; Trap to Debugger
.text:004018F5                 int     3               ; Trap to Debugger
.text:004018F6                 int     3               ; Trap to Debugger
.text:004018F7                 int     3               ; Trap to Debugger
.text:004018F8                 int     3               ; Trap to Debugger
.text:004018F9                 int     3               ; Trap to Debugger
.text:004018FA                 int     3               ; Trap to Debugger
.text:004018FB                 int     3               ; Trap to Debugger
.text:004018FC                 int     3               ; Trap to Debugger
.text:004018FC OpenNotes       endp
.text:004018FC
.text:004018FD
.text:004018FD ; =============== S U B R O U T I N E =======================================
.text:004018FD
.text:004018FD
.text:004018FD DownloadSelectedPackage proc near
.text:004018FD                 int     3               ; Trap to Debugger
.text:004018FE                 int     3               ; Trap to Debugger
.text:004018FF                 int     3               ; Trap to Debugger
.text:004018FF DownloadSelectedPackage endp
.text:004018FF
.text:00401900
.text:00401900 ; =============== S U B R O U T I N E =======================================
.text:00401900
.text:00401900
.text:00401900 sub_401900      proc near               ; CODE XREF: get_NotEnoughRightsForInstallation+1↓p
.text:00401900                                         ; DATA XREF: .text:00401314↑o
.text:00401900                 mov     edi, edi
.text:00401902                 push    esi
.text:00401903                 mov     esi, ecx
.text:00401905                 push    edi
.text:00401906                 lea     eax, [esi+20h]
.text:00401909                 call    sub_401550
.text:0040190E                 cmp     byte ptr [esi+4Ch], 0
.text:00401912                 jz      short loc_40191E
.text:00401914                 lea     eax, [esi+50h]
.text:00401917                 push    eax             ; lpCriticalSection
.text:00401918                 call    ds:EnterCriticalSection
.text:0040191E
.text:0040191E loc_40191E:                             ; CODE XREF: sub_401900+12↑j
.text:0040191E                 mov     ecx, [esi+1C0h]
.text:00401924                 push    ecx             ; void *
.text:00401925                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0040192A                 mov     edi, 1
.text:0040192F                 add     esp, 4
.text:00401932                 add     dword_40B3FC, edi
.text:00401938                 mov     dword ptr [esi+1C0h], 0
.text:00401942                 mov     byte ptr [esi+34h], 0
.text:00401946                 jnz     short loc_40194E
.text:00401948                 mov     dword_40B3FC, edi
.text:0040194E
.text:0040194E loc_40194E:                             ; CODE XREF: sub_401900+46↑j
.text:0040194E                 cmp     byte ptr [esi+4Ch], 0
.text:00401952                 mov     edx, dword_40B3FC
.text:00401958                 mov     [esi+1CCh], edx
.text:0040195E                 mov     dword ptr [esi+1DCh], 0FFFFFFFFh
.text:00401968                 jz      short loc_401974
.text:0040196A                 lea     eax, [esi+50h]
.text:0040196D                 push    eax             ; lpCriticalSection
.text:0040196E                 call    ds:LeaveCriticalSection
.text:00401974
.text:00401974 loc_401974:                             ; CODE XREF: sub_401900+68↑j
.text:00401974                 cmp     [esi+18h], edi
.text:00401977                 mov     eax, [esi+3Ch]
.text:0040197A                 mov     [esi+44h], eax
.text:0040197D                 mov     [esi+48h], eax
.text:00401980                 jnz     short loc_4019D9
.text:00401982                 push    ebx
.text:00401983                 push    0               ; lpName
.text:00401985                 push    0               ; bInitialState
.text:00401987                 push    edi             ; bManualReset
.text:00401988                 mov     edi, ds:CreateEventA
.text:0040198E                 push    0               ; lpEventAttributes
.text:00401990                 call    edi ; CreateEventA
.text:00401992                 test    eax, eax
.text:00401994                 mov     ebx, ds:printf
.text:0040199A                 mov     [esi+1B4h], eax
.text:004019A0                 jnz     short loc_4019B3
.text:004019A2                 call    ds:GetLastError
.text:004019A8                 push    eax
.text:004019A9                 push    offset loc_4012F0 ; Format
.text:004019AE                 call    ebx ; printf
.text:004019B0                 add     esp, 8
.text:004019B3
.text:004019B3 loc_4019B3:                             ; CODE XREF: sub_401900+A0↑j
.text:004019B3                 push    0               ; lpName
.text:004019B5                 push    0               ; bInitialState
.text:004019B7                 push    1               ; bManualReset
.text:004019B9                 push    0               ; lpEventAttributes
.text:004019BB                 call    edi ; CreateEventA
.text:004019BD                 test    eax, eax
.text:004019BF                 mov     [esi+18Ch], eax
.text:004019C5                 jnz     short loc_4019D8
.text:004019C7                 call    ds:GetLastError
.text:004019CD                 push    eax
.text:004019CE                 push    offset loc_4012F0 ; Format
.text:004019D3                 call    ebx ; printf
.text:004019D5                 add     esp, 8
.text:004019D8
.text:004019D8 loc_4019D8:                             ; CODE XREF: sub_401900+C5↑j
.text:004019D8                 pop     ebx
.text:004019D9
.text:004019D9 loc_4019D9:                             ; CODE XREF: sub_401900+80↑j
.text:004019D9                 pop     edi
.text:004019DA                 pop     esi
.text:004019DB                 retn
.text:004019DB sub_401900      endp
.text:004019DB
.text:004019DB ; ---------------------------------------------------------------------------
.text:004019DC                 db 14h dup(0CCh)
.text:004019F0
.text:004019F0 ; =============== S U B R O U T I N E =======================================
.text:004019F0
.text:004019F0 ; Attributes: bp-based frame
.text:004019F0
.text:004019F0 sub_4019F0      proc near               ; CODE XREF: get_ChooseWhichVersionToInstall+11↓p
.text:004019F0                                         ; DATA XREF: .text:00401318↑o
.text:004019F0                 mov     edi, edi
.text:004019F2                 push    ebp
.text:004019F3                 mov     ebp, esp
.text:004019F5                 push    ebx
.text:004019F6                 push    esi
.text:004019F7                 mov     esi, ecx
.text:004019F9                 cmp     byte ptr [esi+4Ch], 0
.text:004019FD                 push    edi
.text:004019FE                 jz      short loc_401A0A
.text:00401A00                 lea     eax, [esi+50h]
.text:00401A03                 push    eax             ; lpCriticalSection
.text:00401A04                 call    ds:EnterCriticalSection
.text:00401A0A
.text:00401A0A loc_401A0A:                             ; CODE XREF: sub_4019F0+E↑j
.text:00401A0A                 mov     edi, [esi+0Ch]
.text:00401A0D                 xor     ebx, ebx
.text:00401A0F                 cmp     [esi+4Ch], bl
.text:00401A12                 mov     [esi+0Ch], ebx
.text:00401A12 sub_4019F0      endp ; sp-analysis failed
.text:00401A12
.text:00401A15
.text:00401A15 ; =============== S U B R O U T I N E =======================================
.text:00401A15
.text:00401A15
.text:00401A15 OnDownloadProgressChanged proc near
.text:00401A15                 mov     [esi+1CCh], ebx
.text:00401A1B                 jz      short loc_401A27
.text:00401A1D                 lea     ecx, [esi+50h]
.text:00401A20                 push    ecx             ; lpCriticalSection
.text:00401A21                 call    ds:LeaveCriticalSection
.text:00401A27
.text:00401A27 loc_401A27:                             ; CODE XREF: OnDownloadProgressChanged+6↑j
.text:00401A27                 cmp     edi, ebx
.text:00401A27 OnDownloadProgressChanged endp
.text:00401A27
.text:00401A29
.text:00401A29 OnDownloadComplete:
.text:00401A29                 jz      loc_401AD3
.text:00401A2F                 mov     eax, [esi+18h]
.text:00401A32                 sub     eax, ebx
.text:00401A34                 jz      short loc_401A94
.text:00401A36                 sub     eax, 1
.text:00401A39                 jnz     loc_401AD3
.text:00401A3F                 cmp     [ebp+8], ebx
.text:00401A42                 jz      short loc_401A53
.text:00401A44                 call    ds:GetLastError
.text:00401A4A                 mov     edx, [ebp+0Ch]
.text:00401A4D                 mov     [esi+10h], eax
.text:00401A50                 mov     [esi+14h], edx
.text:00401A53
.text:00401A53 loc_401A53:                             ; CODE XREF: .text:00401A42↑j
.text:00401A53                 mov     eax, [esi+8]
.text:00401A56                 mov     edi, ds:CloseHandle
.text:00401A5C                 or      ebx, 0FFFFFFFFh
.text:00401A5F                 cmp     eax, ebx
.text:00401A61                 jz      short loc_401A6C
.text:00401A63                 mov     eax, [esi+8]
.text:00401A66                 push    eax
.text:00401A67                 mov     [esi+8], ebx
.text:00401A6A                 call    edi ; CloseHandle
.text:00401A6C
.text:00401A6C loc_401A6C:                             ; CODE XREF: .text:00401A61↑j
.text:00401A6C                 mov     eax, [esi+18Ch]
.text:00401A72                 cmp     eax, ebx
.text:00401A74                 jz      short loc_401A7F
.text:00401A76                 push    eax
.text:00401A77                 call    edi ; CloseHandle
.text:00401A79                 mov     [esi+18Ch], ebx
.text:00401A7F
.text:00401A7F loc_401A7F:                             ; CODE XREF: .text:00401A74↑j
.text:00401A7F                 mov     eax, [esi+1B4h]
.text:00401A85                 cmp     eax, ebx
.text:00401A87                 jz      short loc_401AD3
.text:00401A89                 push    eax
.text:00401A8A                 call    edi ; CloseHandle
.text:00401A8C                 mov     [esi+1B4h], ebx
.text:00401A92                 jmp     short loc_401AD3
.text:00401A94 ; ---------------------------------------------------------------------------
.text:00401A94
.text:00401A94 loc_401A94:                             ; CODE XREF: .text:00401A34↑j
.text:00401A94                 cmp     [ebp+8], ebx
.text:00401A97                 jz      short loc_401AA8
.text:00401A99                 call    ds:WSAGetLastError
.text:00401A9F                 mov     ecx, [ebp+0Ch]
.text:00401AA2                 mov     [esi+10h], eax
.text:00401AA5                 mov     [esi+14h], ecx
.text:00401AA8
.text:00401AA8 loc_401AA8:                             ; CODE XREF: .text:00401A97↑j
.text:00401AA8                 cmp     edi, 2
.text:00401AA8 ; ---------------------------------------------------------------------------
.text:00401AAB                 db 75h
.text:00401AAC
.text:00401AAC ; =============== S U B R O U T I N E =======================================
.text:00401AAC
.text:00401AAC
.text:00401AAC InstallPackage  proc near
.text:00401AAC                 adc     eax, 5708568Bh
.text:00401AB1                 push    edx             ; s
.text:00401AB2                 call    ds:shutdown
.text:00401AB8                 mov     eax, [esi+8]
.text:00401ABB                 push    eax             ; hFile
.text:00401ABC                 call    ds:CancelIo
.text:00401AC2                 mov     eax, [esi+8]
.text:00401AC5                 push    eax             ; s
.text:00401AC6                 mov     dword ptr [esi+8], 0FFFFFFFFh
.text:00401ACD                 call    ds:closesocket
.text:00401AD3
.text:00401AD3 loc_401AD3:                             ; CODE XREF: .text:OnDownloadComplete↑j
.text:00401AD3                                         ; .text:00401A39↑j ...
.text:00401AD3                 mov     eax, [ebp+8]
.text:00401AD6                 test    eax, eax
.text:00401AD8                 pop     edi
.text:00401AD9                 mov     [esi+1D8h], eax
.text:00401ADF                 pop     esi
.text:00401AE0                 pop     ebx
.text:00401AE1                 jz      short loc_401AF0
.text:00401AE3                 push    1               ; Value
.text:00401AE5                 push    offset Target   ; Target
.text:00401AEA                 call    ds:InterlockedExchange
.text:00401AF0
.text:00401AF0 loc_401AF0:                             ; CODE XREF: InstallPackage+35↑j
.text:00401AF0                 pop     ebp
.text:00401AF1                 retn    8
.text:00401AF1 InstallPackage  endp ; sp-analysis failed
.text:00401AF1
.text:00401AF1 ; ---------------------------------------------------------------------------
.text:00401AF4                 align 10h
.text:00401B00
.text:00401B00 ; =============== S U B R O U T I N E =======================================
.text:00401B00
.text:00401B00
.text:00401B00 sub_401B00      proc near               ; CODE XREF: sub_403E40+137↓p
.text:00401B00                 mov     edi, edi
.text:00401B02                 push    ebx
.text:00401B03                 mov     ebx, ds:EnterCriticalSection
.text:00401B09                 push    esi
.text:00401B0A                 mov     esi, ecx
.text:00401B0C                 cmp     byte ptr [esi+4Ch], 0
.text:00401B10                 push    edi
.text:00401B11                 mov     edi, eax
.text:00401B13                 jz      short loc_401B1B
.text:00401B15                 lea     eax, [esi+50h]
.text:00401B18                 push    eax             ; lpCriticalSection
.text:00401B19                 call    ebx ; EnterCriticalSection
.text:00401B1B
.text:00401B1B loc_401B1B:                             ; CODE XREF: sub_401B00+13↑j
.text:00401B1B                 cmp     dword ptr [esi+0Ch], 2
.text:00401B1F                 jnz     short loc_401B69
.text:00401B21                 mov     ecx, [esi+20h]
.text:00401B24                 push    ecx             ; lpCriticalSection
.text:00401B25                 call    ebx ; EnterCriticalSection
.text:00401B27                 cmp     dword ptr [esi+24h], 0
.text:00401B2B                 jnz     short loc_401B32
.text:00401B2D                 mov     [esi+24h], edi
.text:00401B30                 jmp     short loc_401B37
.text:00401B32 ; ---------------------------------------------------------------------------
.text:00401B32
.text:00401B32 loc_401B32:                             ; CODE XREF: sub_401B00+2B↑j
.text:00401B32                 mov     edx, [esi+28h]
.text:00401B35                 mov     [edx], edi
.text:00401B37
.text:00401B37 loc_401B37:                             ; CODE XREF: sub_401B00+30↑j
.text:00401B37                 add     dword ptr [esi+2Ch], 1
.text:00401B3B                 mov     ecx, [esi+20h]
.text:00401B3E                 mov     [esi+28h], edi
.text:00401B41                 mov     eax, [edi+8]
.text:00401B44                 mov     edi, ds:LeaveCriticalSection
.text:00401B4A                 add     [esi+30h], eax
.text:00401B4D                 push    ecx             ; lpCriticalSection
.text:00401B4E                 call    edi ; LeaveCriticalSection
.text:00401B50                 push    0
.text:00401B52                 call    sub_401D50
.text:00401B57                 cmp     byte ptr [esi+4Ch], 0
.text:00401B5B                 jz      short loc_401B63
.text:00401B5D                 add     esi, 50h ; 'P'
.text:00401B60                 push    esi             ; lpCriticalSection
.text:00401B61                 call    edi ; LeaveCriticalSection
.text:00401B63
.text:00401B63 loc_401B63:                             ; CODE XREF: sub_401B00+5B↑j
.text:00401B63                 pop     edi
.text:00401B64                 pop     esi
.text:00401B65                 mov     al, 1
.text:00401B67                 pop     ebx
.text:00401B68                 retn
.text:00401B69 ; ---------------------------------------------------------------------------
.text:00401B69
.text:00401B69 loc_401B69:                             ; CODE XREF: sub_401B00+1F↑j
.text:00401B69                 cmp     byte ptr [esi+4Ch], 0
.text:00401B6D                 jz      short loc_401B79
.text:00401B6F                 add     esi, 50h ; 'P'
.text:00401B72                 push    esi             ; lpCriticalSection
.text:00401B73                 call    ds:LeaveCriticalSection
.text:00401B79
.text:00401B79 loc_401B79:                             ; CODE XREF: sub_401B00+6D↑j
.text:00401B79                 test    edi, edi
.text:00401B7B                 jz      short loc_401B8F
.text:00401B7D                 mov     edx, [edi+4]
.text:00401B80                 push    edx             ; void *
.text:00401B81                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401B86                 push    edi             ; void *
.text:00401B87                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401B8C                 add     esp, 8
.text:00401B8F
.text:00401B8F loc_401B8F:                             ; CODE XREF: sub_401B00+7B↑j
.text:00401B8F                 pop     edi
.text:00401B90                 pop     esi
.text:00401B91                 xor     al, al
.text:00401B93                 pop     ebx
.text:00401B94                 retn
.text:00401B94 sub_401B00      endp
.text:00401B94
.text:00401B94 ; ---------------------------------------------------------------------------
.text:00401B95                 align 10h
.text:00401BA0
.text:00401BA0 ; =============== S U B R O U T I N E =======================================
.text:00401BA0
.text:00401BA0 ; Attributes: bp-based frame
.text:00401BA0
.text:00401BA0 sub_401BA0      proc near               ; CODE XREF: Function+EE↓p
.text:00401BA0                                         ; Function+117↓p
.text:00401BA0                 mov     edi, edi
.text:00401BA2                 push    ebp
.text:00401BA3                 mov     ebp, esp
.text:00401BA5                 push    ecx
.text:00401BA6                 mov     eax, [esi+48h]
.text:00401BA9                 push    ebx
.text:00401BAA                 mov     ebx, [esi+44h]
.text:00401BAA sub_401BA0      endp ; sp-analysis failed
.text:00401BAA
.text:00401BAD
.text:00401BAD PopulateListVersions:
.text:00401BAD                 sub     ebx, eax
.text:00401BAF                 cmp     ebx, 4
.text:00401BB2                 push    edi
.text:00401BB3                 jb      loc_401C58
.text:00401BB9                 mov     edi, [eax]
.text:00401BBB                 cmp     edi, [esi+1D0h]
.text:00401BC1                 ja      loc_401C4B
.text:00401BC7                 cmp     edi, 4
.text:00401BCA                 mov     edx, [ebp+8]
.text:00401BCD                 jb      short loc_401C44
.text:00401BCF                 cmp     edi, [edx+4]
.text:00401BD2                 jbe     short loc_401BFE
.text:00401BD4                 mov     eax, [edx+8]
.text:00401BD7                 test    eax, eax
.text:00401BD9                 mov     [edx+4], edi
.text:00401BDC                 jz      short loc_401BEA
.text:00401BDE                 push    eax
.text:00401BDF                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401BE4                 mov     edx, [ebp+8]
.text:00401BE7                 add     esp, 4
.text:00401BEA
.text:00401BEA loc_401BEA:                             ; CODE XREF: .text:00401BDC↑j
.text:00401BEA                 mov     eax, [edx+4]
.text:00401BED                 push    eax
.text:00401BEE                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00401BF3                 mov     ecx, [ebp+8]
.text:00401BF6                 add     esp, 4
.text:00401BF9                 mov     [ecx+8], eax
.text:00401BFC                 mov     edx, ecx
.text:00401BFE
.text:00401BFE loc_401BFE:                             ; CODE XREF: .text:00401BD2↑j
.text:00401BFE                 mov     eax, [edx+8]
.text:00401C01                 test    eax, eax
.text:00401C03                 mov     [edx], edi
.text:00401C05                 jz      short loc_401C3D
.text:00401C07                 cmp     ebx, edi
.text:00401C09                 jl      short loc_401C36
.text:00401C0B                 mov     edx, [esi+48h]
.text:00401C0E                 push    edi
.text:00401C0F                 push    edx
.text:00401C10                 push    eax
.text:00401C11                 call    memcpy
.text:00401C16                 mov     eax, [ebp+8]
.text:00401C19                 mov     ecx, [eax]
.text:00401C1B                 add     [esi+48h], ecx
.text:00401C1E                 mov     eax, [esi+48h]
.text:00401C21                 add     esp, 0Ch
.text:00401C24                 cmp     eax, [esi+44h]
.text:00401C27                 jnz     short loc_401C32
.text:00401C29                 mov     eax, [esi+3Ch]
.text:00401C2C                 mov     [esi+44h], eax
.text:00401C2F                 mov     [esi+48h], eax
.text:00401C32
.text:00401C32 loc_401C32:                             ; CODE XREF: .text:00401C27↑j
.text:00401C32                 xor     ebx, ebx
.text:00401C34                 jmp     short loc_401C5D
.text:00401C36 ; ---------------------------------------------------------------------------
.text:00401C36
.text:00401C36 loc_401C36:                             ; CODE XREF: .text:00401C09↑j
.text:00401C36                 mov     ebx, 1
.text:00401C3B                 jmp     short loc_401C60
.text:00401C3D ; ---------------------------------------------------------------------------
.text:00401C3D
.text:00401C3D loc_401C3D:                             ; CODE XREF: .text:00401C05↑j
.text:00401C3D                 mov     ebx, 4
.text:00401C42                 jmp     short loc_401C60
.text:00401C44 ; ---------------------------------------------------------------------------
.text:00401C44
.text:00401C44 loc_401C44:                             ; CODE XREF: .text:00401BCD↑j
.text:00401C44                 mov     ebx, 3
.text:00401C49                 jmp     short loc_401C60
.text:00401C4B ; ---------------------------------------------------------------------------
.text:00401C4B
.text:00401C4B loc_401C4B:                             ; CODE XREF: .text:00401BC1↑j
.text:00401C4B                 pop     edi
.text:00401C4C                 mov     eax, 2
.text:00401C51                 pop     ebx
.text:00401C52                 mov     esp, ebp
.text:00401C54                 pop     ebp
.text:00401C55                 retn    4
.text:00401C58 ; ---------------------------------------------------------------------------
.text:00401C58
.text:00401C58 loc_401C58:                             ; CODE XREF: .text:00401BB3↑j
.text:00401C58                 mov     ebx, 1
.text:00401C5D
.text:00401C5D loc_401C5D:                             ; CODE XREF: .text:00401C34↑j
.text:00401C5D                 mov     edx, [ebp+8]
.text:00401C60
.text:00401C60 loc_401C60:                             ; CODE XREF: .text:00401C3B↑j
.text:00401C60                                         ; .text:00401C42↑j ...
.text:00401C60                 mov     eax, [esi+44h]
.text:00401C63                 mov     ecx, [esi+48h]
.text:00401C66                 mov     edi, eax
.text:00401C68                 sub     edi, ecx
.text:00401C6A                 test    ebx, ebx
.text:00401C6C                 mov     [ebp-4], ebx
.text:00401C6F                 jnz     short loc_401C7E
.text:00401C71                 cmp     edi, 4
.text:00401C74                 jb      short loc_401C7E
.text:00401C76                 cmp     [ecx], edi
.text:00401C78                 jbe     loc_401D34
.text:00401C7E
.text:00401C7E loc_401C7E:                             ; CODE XREF: .text:00401C6F↑j
.text:00401C7E                                         ; .text:00401C74↑j
.text:00401C7E                 sub     eax, [esi+3Ch]
.text:00401C81                 mov     ebx, [esi+168h]
.text:00401C87                 cmp     eax, ebx
.text:00401C87 ; ---------------------------------------------------------------------------
.text:00401C89                 db 0Fh, 8Ch
.text:00401C8B ; ---------------------------------------------------------------------------
.text:00401C8B
.text:00401C8B ButtonExit_Click:
.text:00401C8B                 movsd
.text:00401C8B ; ---------------------------------------------------------------------------
.text:00401C8C                 dd 8B000000h, 0C83B3C46h
.text:00401C94
.text:00401C94 ; =============== S U B R O U T I N E =======================================
.text:00401C94
.text:00401C94
.text:00401C94 ; int __thiscall ButtonDownload_Click(void *Src, int)
.text:00401C94 ButtonDownload_Click proc near
.text:00401C94
.text:00401C94 ; FUNCTION CHUNK AT .text:00401CB8 SIZE 00000087 BYTES
.text:00401C94
.text:00401C94                 jbe     short loc_401CB8
.text:00401C96                 push    edi             ; Size
.text:00401C97                 push    ecx             ; Src
.text:00401C98                 push    eax             ; void *
.text:00401C99                 call    ds:memmove
.text:00401C9F                 mov     eax, [esi+3Ch]
.text:00401CA2                 add     esp, 0Ch
.text:00401CA5                 mov     [esi+48h], eax
.text:00401CA5 ButtonDownload_Click endp ; sp-analysis failed
.text:00401CA5
.text:00401CA8
.text:00401CA8 ; =============== S U B R O U T I N E =======================================
.text:00401CA8
.text:00401CA8
.text:00401CA8 ButtonInstall_Click proc near
.text:00401CA8                 add     eax, edi
.text:00401CAA                 pop     edi
.text:00401CAB                 mov     [esi+44h], eax
.text:00401CAE                 mov     eax, [ebp-4]
.text:00401CAE ButtonInstall_Click endp ; sp-analysis failed
.text:00401CAE
.text:00401CB1
.text:00401CB1 ; =============== S U B R O U T I N E =======================================
.text:00401CB1
.text:00401CB1
.text:00401CB1 ListVersions_SelectedIndexChanged proc near
.text:00401CB1                 pop     ebx
.text:00401CB2                 mov     esp, ebp
.text:00401CB4                 pop     ebp
.text:00401CB5                 retn    4
.text:00401CB5 ListVersions_SelectedIndexChanged endp ; sp-analysis failed
.text:00401CB5
.text:00401CB8 ; ---------------------------------------------------------------------------
.text:00401CB8 ; START OF FUNCTION CHUNK FOR ButtonDownload_Click
.text:00401CB8
.text:00401CB8 loc_401CB8:                             ; CODE XREF: ButtonDownload_Click↑j
.text:00401CB8                 cmp     ebx, 100000h
.text:00401CBE                 jnb     short loc_401D13
.text:00401CC0                 add     ebx, 800h
.text:00401CC6                 push    ebx             ; unsigned int
.text:00401CC7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00401CCC                 mov     edx, [esi+168h]
.text:00401CD2                 mov     edi, eax
.text:00401CD4                 mov     eax, [esi+3Ch]
.text:00401CD7                 push    edx             ; Size
.text:00401CD8                 push    eax             ; Src
.text:00401CD9                 push    edi             ; void *
.text:00401CDA                 call    memcpy
.text:00401CDF                 mov     ecx, [esi+3Ch]
.text:00401CE2                 push    ecx             ; void *
.text:00401CE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401CE8                 mov     eax, [esi+168h]
.text:00401CEE                 lea     edx, [eax+edi]
.text:00401CF1                 add     esp, 14h
.text:00401CF4                 add     eax, 800h
.text:00401CF9                 mov     [esi+48h], edi
.text:00401CFC                 mov     [esi+3Ch], edi
.text:00401CFF                 pop     edi
.text:00401D00                 mov     [esi+168h], eax
.text:00401D06                 mov     eax, [ebp-4]
.text:00401D09                 mov     [esi+44h], edx
.text:00401D0C                 pop     ebx
.text:00401D0D                 mov     esp, ebp
.text:00401D0F                 pop     ebp
.text:00401D10                 retn    4
.text:00401D13 ; ---------------------------------------------------------------------------
.text:00401D13
.text:00401D13 loc_401D13:                             ; CODE XREF: ButtonDownload_Click+2A↑j
.text:00401D13                 mov     eax, [edx+8]
.text:00401D16                 test    eax, eax
.text:00401D18                 mov     dword ptr [edx], 0FFFFFFFFh
.text:00401D1E                 jz      short loc_401D2C
.text:00401D20                 push    eax             ; void *
.text:00401D21                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401D26                 mov     edx, [ebp+8]
.text:00401D29                 add     esp, 4
.text:00401D2C
.text:00401D2C loc_401D2C:                             ; CODE XREF: ButtonDownload_Click+8A↑j
.text:00401D2C                 xor     eax, eax
.text:00401D2E                 mov     [edx+8], eax
.text:00401D31                 mov     [ebp-4], eax
.text:00401D34
.text:00401D34 loc_401D34:                             ; CODE XREF: .text:00401C78↑j
.text:00401D34                 mov     eax, [ebp-4]
.text:00401D37                 pop     edi
.text:00401D38                 pop     ebx
.text:00401D39                 mov     esp, ebp
.text:00401D3B                 pop     ebp
.text:00401D3C                 retn    4
.text:00401D3C ; END OF FUNCTION CHUNK FOR ButtonDownload_Click
.text:00401D3C ; ---------------------------------------------------------------------------
.text:00401D3F                 db 4 dup(0CCh)
.text:00401D43
.text:00401D43 ; =============== S U B R O U T I N E =======================================
.text:00401D43
.text:00401D43
.text:00401D43 Button1_Click   proc near
.text:00401D43                 int     3               ; Trap to Debugger
.text:00401D44                 int     3               ; Trap to Debugger
.text:00401D45                 int     3               ; Trap to Debugger
.text:00401D46                 int     3               ; Trap to Debugger
.text:00401D47                 int     3               ; Trap to Debugger
.text:00401D48                 int     3               ; Trap to Debugger
.text:00401D49                 int     3               ; Trap to Debugger
.text:00401D4A                 int     3               ; Trap to Debugger
.text:00401D4B                 int     3               ; Trap to Debugger
.text:00401D4C                 int     3               ; Trap to Debugger
.text:00401D4D                 int     3               ; Trap to Debugger
.text:00401D4E                 int     3               ; Trap to Debugger
.text:00401D4F                 int     3               ; Trap to Debugger
.text:00401D4F Button1_Click   endp
.text:00401D4F
.text:00401D50
.text:00401D50 ; =============== S U B R O U T I N E =======================================
.text:00401D50
.text:00401D50 ; Attributes: bp-based frame
.text:00401D50
.text:00401D50 sub_401D50      proc near               ; CODE XREF: sub_401B00+52↑p
.text:00401D50                                         ; Function+A5↓p
.text:00401D50                 mov     edi, edi
.text:00401D52                 push    ebp
.text:00401D53                 mov     ebp, esp
.text:00401D53 sub_401D50      endp ; sp-analysis failed
.text:00401D53
.text:00401D55
.text:00401D55 Dispose:
.text:00401D55                 cmp     byte ptr [ebp+8], 0
.text:00401D59                 push    ebx
.text:00401D5A                 push    edi
.text:00401D5B                 jnz     short loc_401D68
.text:00401D5D                 mov     al, [esi+34h]
.text:00401D60                 test    al, al
.text:00401D62                 jnz     loc_401E92
.text:00401D68
.text:00401D68 loc_401D68:                             ; CODE XREF: .text:00401D5B↑j
.text:00401D68                 mov     ecx, [esi+1C0h]
.text:00401D6E                 push    ecx
.text:00401D6F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401D74                 mov     edx, [esi+20h]
.text:00401D77                 add     esp, 4
.text:00401D7A                 push    edx
.text:00401D7A ; ---------------------------------------------------------------------------
.text:00401D7B                 db 0FFh
.text:00401D7C                 db 15h
.text:00401D7D                 db  58h ; X OFF32 SEGDEF [_text,401058]
.text:00401D7E                 dw 4010h
.text:00401D80
.text:00401D80 ; =============== S U B R O U T I N E =======================================
.text:00401D80
.text:00401D80
.text:00401D80 InitializeComponent proc near
.text:00401D80                 add     [ebx-24CCDB82h], cl
.text:00401D86                 cmp     edi, ebx
.text:00401D88                 jz      short loc_401DA5
.text:00401D8A                 mov     eax, [edi]
.text:00401D8C                 mov     [esi+24h], eax
.text:00401D8F                 mov     [edi], ebx
.text:00401D91                 cmp     [esi+24h], ebx
.text:00401D94                 jnz     short loc_401D99
.text:00401D96                 mov     [esi+28h], ebx
.text:00401D99
.text:00401D99 loc_401D99:                             ; CODE XREF: InitializeComponent+14↑j
.text:00401D99                 add     dword ptr [esi+2Ch], 0FFFFFFFFh
.text:00401D9D                 mov     ecx, [edi+8]
.text:00401DA0                 sub     [esi+30h], ecx
.text:00401DA3                 jmp     short loc_401DAB
.text:00401DA5 ; ---------------------------------------------------------------------------
.text:00401DA5
.text:00401DA5 loc_401DA5:                             ; CODE XREF: InitializeComponent+8↑j
.text:00401DA5                 mov     [esi+30h], ebx
.text:00401DA8                 mov     [esi+2Ch], ebx
.text:00401DAB
.text:00401DAB loc_401DAB:                             ; CODE XREF: InitializeComponent+23↑j
.text:00401DAB                 mov     edx, [esi+20h]
.text:00401DAE                 push    edx             ; lpCriticalSection
.text:00401DAF                 call    ds:LeaveCriticalSection
.text:00401DB5                 cmp     edi, ebx
.text:00401DB7                 jz      loc_401E7E
.text:00401DBD                 mov     eax, [edi+8]
.text:00401DC0                 mov     [esi+1C4h], eax
.text:00401DC6                 mov     eax, [edi+4]
.text:00401DC9                 lea     ebx, [esi+1C4h]
.text:00401DCF                 mov     [esi+1C8h], eax
.text:00401DD5                 mov     dword ptr [edi+4], 0
.text:00401DDC                 mov     ecx, [edi+4]
.text:00401DDF                 push    ecx             ; void *
.text:00401DE0                 mov     [ebp+8], eax
.text:00401DE3                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401DE8                 push    edi             ; void *
.text:00401DE9                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00401DEE                 add     esp, 8
.text:00401DF1                 lea     edx, [esi+1D4h]
.text:00401DF7                 push    edx             ; lpAddend
.text:00401DF8                 call    ds:InterlockedIncrement
.text:00401DFE                 mov     eax, [ebp+8]
.text:00401E01                 mov     [esi+1C0h], eax
.text:00401E07                 mov     eax, [esi+18h]
.text:00401E0A                 sub     eax, 0
.text:00401E0D                 jz      short loc_401E3D
.text:00401E0F                 sub     eax, 1
.text:00401E12                 jnz     short loc_401E72
.text:00401E14                 mov     edx, [ebx]
.text:00401E16                 mov     eax, [esi+1C8h]
.text:00401E1C                 lea     ecx, [esi+1A4h]
.text:00401E22                 push    ecx             ; lpOverlapped
.text:00401E23                 mov     ecx, [esi+8]
.text:00401E26                 push    0               ; lpNumberOfBytesWritten
.text:00401E28                 push    edx             ; nNumberOfBytesToWrite
.text:00401E29                 push    eax             ; lpBuffer
.text:00401E2A                 push    ecx             ; hFile
.text:00401E2B                 call    ds:WriteFile
.text:00401E31                 test    eax, eax
.text:00401E33                 jnz     short loc_401E72
.text:00401E35                 call    ds:GetLastError
.text:00401E3B                 jmp     short loc_401E64
.text:00401E3D ; ---------------------------------------------------------------------------
.text:00401E3D
.text:00401E3D loc_401E3D:                             ; CODE XREF: InitializeComponent+8D↑j
.text:00401E3D                 mov     ecx, [esi+8]
.text:00401E40                 push    0               ; lpCompletionRoutine
.text:00401E42                 lea     edx, [esi+1A4h]
.text:00401E48                 push    edx             ; lpOverlapped
.text:00401E49                 push    0               ; dwFlags
.text:00401E4B                 lea     eax, [esi+38h]
.text:00401E4E                 push    eax             ; lpNumberOfBytesSent
.text:00401E4F                 push    1               ; dwBufferCount
.text:00401E51                 push    ebx             ; lpBuffers
.text:00401E52                 push    ecx             ; s
.text:00401E53                 call    ds:WSASend
.text:00401E59                 cmp     eax, 0FFFFFFFFh
.text:00401E5C                 jnz     short loc_401E72
.text:00401E5E                 call    ds:WSAGetLastError
.text:00401E64
.text:00401E64 loc_401E64:                             ; CODE XREF: InitializeComponent+BB↑j
.text:00401E64                 cmp     eax, 3E5h
.text:00401E69                 jz      short loc_401E72
.text:00401E6B                 mov     eax, esi
.text:00401E6D                 call    Main
.text:00401E72
.text:00401E72 loc_401E72:                             ; CODE XREF: InitializeComponent+92↑j
.text:00401E72                                         ; InitializeComponent+B3↑j ...
.text:00401E72                 pop     edi
.text:00401E73                 mov     byte ptr [esi+34h], 1
.text:00401E77                 mov     al, 1
.text:00401E79                 pop     ebx
.text:00401E7A                 pop     ebp
.text:00401E7B                 retn    4
.text:00401E7E ; ---------------------------------------------------------------------------
.text:00401E7E
.text:00401E7E loc_401E7E:                             ; CODE XREF: InitializeComponent+37↑j
.text:00401E7E                 cmp     [ebp+8], bl
.text:00401E81                 jz      short loc_401E92
.text:00401E83                 mov     [esi+1C0h], ebx
.text:00401E89                 mov     [esi+1C8h], ebx
.text:00401E8F                 mov     [esi+34h], bl
.text:00401E92
.text:00401E92 loc_401E92:                             ; CODE XREF: .text:00401D62↑j
.text:00401E92                                         ; InitializeComponent+101↑j
.text:00401E92                 pop     edi
.text:00401E93                 xor     al, al
.text:00401E95                 pop     ebx
.text:00401E96                 pop     ebp
.text:00401E97                 retn    4
.text:00401E97 InitializeComponent endp ; sp-analysis failed
.text:00401E97
.text:00401E97 ; ---------------------------------------------------------------------------
.text:00401E9A                 align 10h
.text:00401EA0
.text:00401EA0 ; =============== S U B R O U T I N E =======================================
.text:00401EA0
.text:00401EA0 ; Attributes: bp-based frame
.text:00401EA0
.text:00401EA0 sub_401EA0      proc near               ; CODE XREF: Function+12F↓p
.text:00401EA0                                         ; sub_402B20+1A5↓p ...
.text:00401EA0
.text:00401EA0 Flags           = dword ptr -4
.text:00401EA0
.text:00401EA0                 mov     edi, edi
.text:00401EA2                 push    ebp
.text:00401EA3                 mov     ebp, esp
.text:00401EA5                 push    ecx
.text:00401EA6                 xor     ecx, ecx
.text:00401EA8                 cmp     dword ptr [esi+0Ch], 2
.text:00401EAC                 mov     [esi+1Ch], ecx
.text:00401EAF                 jnz     loc_401F5C
.text:00401EB5                 mov     eax, [esi+168h]
.text:00401EBB                 add     eax, [esi+3Ch]
.text:00401EBE                 push    ebx
.text:00401EBF                 sub     eax, [esi+44h]
.text:00401EC2                 mov     [esi+17Ch], ecx
.text:00401EC8                 push    edi
.text:00401EC9                 lea     edi, [esi+17Ch]
.text:00401ECF                 mov     [edi+4], ecx
.text:00401ED2                 mov     [edi+8], ecx
.text:00401ED5                 mov     [edi+0Ch], ecx
.text:00401ED8                 mov     [ebp+Flags], ecx
.text:00401EDB                 lea     ebx, [esi+19Ch]
.text:00401EE1                 mov     [ebx], eax
.text:00401EE3                 mov     eax, [esi+44h]
.text:00401EE6                 lea     ecx, [esi+1D4h]
.text:00401EEC                 push    ecx             ; lpAddend
.text:00401EED                 mov     [esi+1A0h], eax
.text:00401EF3                 call    ds:InterlockedIncrement
.text:00401EF9                 mov     eax, [esi+18h]
.text:00401EFC                 sub     eax, 0
.text:00401EFF                 jz      short loc_401F29
.text:00401F01                 sub     eax, 1
.text:00401F04                 jnz     short loc_401F5A
.text:00401F06                 mov     edx, [ebx]
.text:00401F08                 mov     eax, [esi+1A0h]
.text:00401F0E                 mov     ecx, [esi+8]
.text:00401F11                 push    edi             ; lpOverlapped
.text:00401F12                 push    0               ; lpNumberOfBytesRead
.text:00401F14                 push    edx             ; nNumberOfBytesToRead
.text:00401F15                 push    eax             ; lpBuffer
.text:00401F16                 push    ecx             ; hFile
.text:00401F17                 call    ds:ReadFile
.text:00401F1D                 test    eax, eax
.text:00401F1F                 jnz     short loc_401F5A
.text:00401F21                 call    ds:GetLastError
.text:00401F27                 jmp     short loc_401F4C
.text:00401F29 ; ---------------------------------------------------------------------------
.text:00401F29
.text:00401F29 loc_401F29:                             ; CODE XREF: sub_401EA0+5F↑j
.text:00401F29                 push    0               ; lpCompletionRoutine
.text:00401F2B                 push    edi             ; lpOverlapped
.text:00401F2C                 lea     edx, [ebp+Flags]
.text:00401F2F                 push    edx             ; lpFlags
.text:00401F30                 lea     eax, [esi+1Ch]
.text:00401F33                 push    eax             ; lpNumberOfBytesRecvd
.text:00401F34                 mov     eax, [esi+8]
.text:00401F37                 push    1               ; dwBufferCount
.text:00401F39                 push    ebx             ; lpBuffers
.text:00401F3A                 push    eax             ; s
.text:00401F3B                 call    ds:WSARecv
.text:00401F41                 cmp     eax, 0FFFFFFFFh
.text:00401F44                 jnz     short loc_401F5A
.text:00401F46                 call    ds:WSAGetLastError
.text:00401F4C
.text:00401F4C loc_401F4C:                             ; CODE XREF: sub_401EA0+87↑j
.text:00401F4C                 cmp     eax, 3E5h
.text:00401F51                 jz      short loc_401F5A
.text:00401F53                 mov     eax, esi
.text:00401F55                 call    Main
.text:00401F5A
.text:00401F5A loc_401F5A:                             ; CODE XREF: sub_401EA0+64↑j
.text:00401F5A                                         ; sub_401EA0+7F↑j ...
.text:00401F5A                 pop     edi
.text:00401F5B                 pop     ebx
.text:00401F5C
.text:00401F5C loc_401F5C:                             ; CODE XREF: sub_401EA0+F↑j
.text:00401F5C                 mov     esp, ebp
.text:00401F5E                 pop     ebp
.text:00401F5F                 retn
.text:00401F5F sub_401EA0      endp
.text:00401F5F
.text:00401F5F ; ---------------------------------------------------------------------------
.text:00401F60                 db 10h dup(0CCh)
.text:00401F70 ; ---------------------------------------------------------------------------
.text:00401F70                 xor     eax, eax
.text:00401F72                 retn    4
.text:00401F72 ; ---------------------------------------------------------------------------
.text:00401F75                 align 10h
.text:00401F80
.text:00401F80 ; =============== S U B R O U T I N E =======================================
.text:00401F80
.text:00401F80 ; Attributes: bp-based frame
.text:00401F80
.text:00401F80 sub_401F80      proc near               ; CODE XREF: sub_403C30+35↓p
.text:00401F80                                         ; sub_404180:loc_4042D7↓p ...
.text:00401F80
.text:00401F80 optlen          = dword ptr -8
.text:00401F80 optval          = byte ptr -4
.text:00401F80
.text:00401F80                 mov     edi, edi
.text:00401F82                 push    ebp
.text:00401F83                 mov     ebp, esp
.text:00401F85                 sub     esp, 8
.text:00401F88                 push    ebx
.text:00401F89                 xor     bl, bl
.text:00401F8B                 cmp     dword ptr [esi+18h], 0
.text:00401F8F                 mov     dword ptr [ebp+optval], 0
.text:00401F96                 jnz     short loc_401FE4
.text:00401F98                 cmp     dword ptr [esi+0Ch], 1
.text:00401F9C                 jnz     short loc_401FE4
.text:00401F9E                 mov     edx, [esi+8]
.text:00401FA1                 lea     eax, [ebp+optlen]
.text:00401FA4                 push    eax             ; optlen
.text:00401FA5                 lea     ecx, [ebp+optval]
.text:00401FA8                 push    ecx             ; optval
.text:00401FA9                 push    700Ch           ; optname
.text:00401FAE                 push    0FFFFh          ; level
.text:00401FB3                 push    edx             ; s
.text:00401FB4                 mov     [ebp+optlen], 4
.text:00401FBB                 call    ds:getsockopt
.text:00401FC1                 test    eax, eax
.text:00401FC3                 jnz     short loc_401FE4
.text:00401FC5                 mov     eax, dword ptr [ebp+optval]
.text:00401FC8                 cmp     eax, 0FFFFFFFFh
.text:00401FCB                 jz      short loc_401FE4
.text:00401FCD                 cmp     eax, 3
.text:00401FD0                 jbe     short loc_401FE4
.text:00401FD2                 mov     eax, [esi]
.text:00401FD4                 mov     edx, [eax+8]
.text:00401FD7                 push    0C000013Fh
.text:00401FDC                 push    7
.text:00401FDE                 mov     ecx, esi
.text:00401FE0                 call    edx
.text:00401FE2                 mov     bl, 1
.text:00401FE4
.text:00401FE4 loc_401FE4:                             ; CODE XREF: sub_401F80+16↑j
.text:00401FE4                                         ; sub_401F80+1C↑j ...
.text:00401FE4                 cmp     dword ptr [esi+1D8h], 0
.text:00401FEB                 mov     al, 1
.text:00401FED                 jnz     short loc_401FF1
.text:00401FEF                 mov     al, bl
.text:00401FF1
.text:00401FF1 loc_401FF1:                             ; CODE XREF: sub_401F80+6D↑j
.text:00401FF1                 pop     ebx
.text:00401FF2                 mov     esp, ebp
.text:00401FF4                 pop     ebp
.text:00401FF5                 retn
.text:00401FF5 sub_401F80      endp
.text:00401FF5
.text:00401FF5 ; ---------------------------------------------------------------------------
.text:00401FF6                 align 10h
.text:00402000
.text:00402000 ; =============== S U B R O U T I N E =======================================
.text:00402000
.text:00402000 ; Attributes: bp-based frame
.text:00402000
.text:00402000 ; void __stdcall Function(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped)
.text:00402000 Function        proc near               ; DATA XREF: sub_402B20+17C↓o
.text:00402000                                         ; sub_402B20+250↓o
.text:00402000
.text:00402000 dwErrorCode     = dword ptr  8
.text:00402000 dwNumberOfBytesTransfered= dword ptr  0Ch
.text:00402000 lpOverlapped    = dword ptr  10h
.text:00402000
.text:00402000                 mov     edi, edi
.text:00402002                 push    ebp
.text:00402003                 mov     ebp, esp
.text:00402005                 mov     ecx, [ebp+lpOverlapped]
.text:00402008                 test    ecx, ecx
.text:0040200A                 jz      loc_402183
.text:00402010                 mov     eax, [ebp+dwErrorCode]
.text:00402013                 test    eax, eax
.text:00402015                 push    esi
.text:00402016                 mov     esi, [ecx+14h]
.text:00402019                 jz      short loc_402077
.text:0040201B                 cmp     eax, 80000005h
.text:00402020                 jnz     short loc_402028
.text:00402022                 cmp     dword ptr [esi+18h], 1
.text:00402026                 jz      short loc_402077
.text:00402028
.text:00402028 loc_402028:                             ; CODE XREF: Function+20↑j
.text:00402028                 lea     ecx, [eax+3FFFFEE0h] ; switch 238 cases
.text:0040202E                 cmp     ecx, 0EDh
.text:00402034                 ja      short def_40203D ; jumptable 0040203D default case, cases -1073741535--1073741509,-1073741507--1073741494,-1073741492--1073741300
.text:00402036                 movzx   ecx, ds:byte_402194[ecx]
.text:0040203D                 jmp     ds:jpt_40203D[ecx*4] ; switch jump
.text:00402044 ; ---------------------------------------------------------------------------
.text:00402044
.text:00402044 loc_402044:                             ; CODE XREF: Function+3D↑j
.text:00402044                                         ; DATA XREF: .text:jpt_40203D↓o
.text:00402044                 mov     edx, [esi]      ; jumptable 0040203D cases -1073741508,-1073741493,-1073741299
.text:00402046                 push    eax
.text:00402047                 mov     eax, [edx+8]
.text:0040204A                 push    5
.text:0040204C                 mov     ecx, esi
.text:0040204E                 call    eax
.text:00402050                 jmp     loc_402162
.text:00402055 ; ---------------------------------------------------------------------------
.text:00402055
.text:00402055 loc_402055:                             ; CODE XREF: Function+3D↑j
.text:00402055                                         ; DATA XREF: .text:jpt_40203D↓o
.text:00402055                 mov     edx, [esi]      ; jumptable 0040203D case -1073741536
.text:00402057                 push    eax
.text:00402058                 mov     eax, [edx+8]
.text:0040205B                 push    8
.text:0040205D                 mov     ecx, esi
.text:0040205F                 call    eax
.text:00402061                 jmp     loc_402162
.text:00402066 ; ---------------------------------------------------------------------------
.text:00402066
.text:00402066 def_40203D:                             ; CODE XREF: Function+34↑j
.text:00402066                                         ; Function+3D↑j
.text:00402066                                         ; DATA XREF: ...
.text:00402066                 mov     edx, [esi]      ; jumptable 0040203D default case, cases -1073741535--1073741509,-1073741507--1073741494,-1073741492--1073741300
.text:00402068                 push    eax
.text:00402069                 mov     eax, [edx+8]
.text:0040206C                 push    9
.text:0040206E                 mov     ecx, esi
.text:00402070                 call    eax
.text:00402072                 jmp     loc_402162
.text:00402077 ; ---------------------------------------------------------------------------
.text:00402077
.text:00402077 loc_402077:                             ; CODE XREF: Function+19↑j
.text:00402077                                         ; Function+26↑j
.text:00402077                 push    edi
.text:00402078                 mov     edi, [ebp+dwNumberOfBytesTransfered]
.text:0040207B                 test    edi, edi
.text:0040207D                 jz      loc_402151
.text:00402083                 cmp     byte ptr [ecx+18h], 0
.text:00402087                 jz      short loc_4020C3
.text:00402089                 cmp     dword ptr [esi+0Ch], 2
.text:0040208D                 jnz     loc_402161
.text:00402093                 cmp     byte ptr [esi+4Ch], 0
.text:00402097                 jz      short loc_4020A3
.text:00402099                 lea     ecx, [esi+50h]
.text:0040209C                 push    ecx             ; lpCriticalSection
.text:0040209D                 call    ds:EnterCriticalSection
.text:004020A3
.text:004020A3 loc_4020A3:                             ; CODE XREF: Function+97↑j
.text:004020A3                 push    1
.text:004020A5                 call    sub_401D50
.text:004020AA                 cmp     byte ptr [esi+4Ch], 0
.text:004020AE                 jz      loc_402161
.text:004020B4                 lea     edx, [esi+50h]
.text:004020B7                 push    edx             ; lpCriticalSection
.text:004020B8                 call    ds:LeaveCriticalSection
.text:004020BE                 jmp     loc_402161
.text:004020C3 ; ---------------------------------------------------------------------------
.text:004020C3
.text:004020C3 loc_4020C3:                             ; CODE XREF: Function+87↑j
.text:004020C3                 cmp     dword ptr [esi+0Ch], 1
.text:004020C7                 jnz     short loc_4020D2
.text:004020C9                 mov     eax, [esi]
.text:004020CB                 mov     edx, [eax+10h]
.text:004020CE                 mov     ecx, esi
.text:004020D0                 call    edx
.text:004020D2
.text:004020D2 loc_4020D2:                             ; CODE XREF: Function+C7↑j
.text:004020D2                 add     [esi+44h], edi
.text:004020D5                 cmp     dword ptr [esi+1DCh], 0FFFFFFFFh
.text:004020DC                 mov     [esi+1Ch], edi
.text:004020DF                 jnz     short loc_4020E7
.text:004020E1                 mov     [esi+1DCh], edi
.text:004020E7
.text:004020E7 loc_4020E7:                             ; CODE XREF: Function+DF↑j
.text:004020E7                 mov     eax, [esi+16Ch]
.text:004020ED                 push    eax
.text:004020EE                 call    sub_401BA0
.text:004020F3                 test    eax, eax
.text:004020F5                 jnz     short loc_402120
.text:004020F7                 jmp     short loc_402100
.text:004020F7 ; ---------------------------------------------------------------------------
.text:004020F9                 align 10h
.text:00402100
.text:00402100 loc_402100:                             ; CODE XREF: Function+F7↑j
.text:00402100                                         ; Function+11E↓j
.text:00402100                 mov     edx, [esi]
.text:00402102                 mov     eax, [esi+16Ch]
.text:00402108                 mov     edx, [edx+0Ch]
.text:0040210B                 push    eax
.text:0040210C                 mov     ecx, esi
.text:0040210E                 call    edx
.text:00402110                 mov     eax, [esi+16Ch]
.text:00402116                 push    eax
.text:00402117                 call    sub_401BA0
.text:0040211C                 test    eax, eax
.text:0040211E                 jz      short loc_402100
.text:00402120
.text:00402120 loc_402120:                             ; CODE XREF: Function+F5↑j
.text:00402120                 sub     eax, 2
.text:00402123                 jz      short loc_402148
.text:00402125                 sub     eax, 1
.text:00402128                 jz      short loc_40213F
.text:0040212A                 sub     eax, 1
.text:0040212D                 jz      short loc_402136
.text:0040212F                 call    sub_401EA0
.text:00402134                 jmp     short loc_402161
.text:00402136 ; ---------------------------------------------------------------------------
.text:00402136
.text:00402136 loc_402136:                             ; CODE XREF: Function+12D↑j
.text:00402136                 push    8007000Eh
.text:0040213B                 push    3
.text:0040213D                 jmp     short loc_402158
.text:0040213F ; ---------------------------------------------------------------------------
.text:0040213F
.text:0040213F loc_40213F:                             ; CODE XREF: Function+128↑j
.text:0040213F                 push    80004004h
.text:00402144                 push    2
.text:00402146                 jmp     short loc_402158
.text:00402148 ; ---------------------------------------------------------------------------
.text:00402148
.text:00402148 loc_402148:                             ; CODE XREF: Function+123↑j
.text:00402148                 push    80004004h
.text:0040214D                 push    1
.text:0040214F                 jmp     short loc_402158
.text:00402151 ; ---------------------------------------------------------------------------
.text:00402151
.text:00402151 loc_402151:                             ; CODE XREF: Function+7D↑j
.text:00402151                 push    0C000013Eh
.text:00402156                 push    4
.text:00402158
.text:00402158 loc_402158:                             ; CODE XREF: Function+13D↑j
.text:00402158                                         ; Function+146↑j ...
.text:00402158                 mov     edx, [esi]
.text:0040215A                 mov     eax, [edx+8]
.text:0040215D                 mov     ecx, esi
.text:0040215F                 call    eax
.text:00402161
.text:00402161 loc_402161:                             ; CODE XREF: Function+8D↑j
.text:00402161                                         ; Function+AE↑j ...
.text:00402161                 pop     edi
.text:00402162
.text:00402162 loc_402162:                             ; CODE XREF: Function+50↑j
.text:00402162                                         ; Function+61↑j ...
.text:00402162                 lea     ecx, [esi+1D4h]
.text:00402168                 push    ecx             ; lpAddend
.text:00402169                 call    ds:InterlockedDecrement
.text:0040216F                 test    eax, eax
.text:00402171                 jnz     short loc_402182
.text:00402173                 call    loc_401890
.text:00402178                 mov     edx, [esi]
.text:0040217A                 mov     eax, [edx]
.text:0040217C                 push    1
.text:0040217E                 mov     ecx, esi
.text:00402180                 call    eax
.text:00402182
.text:00402182 loc_402182:                             ; CODE XREF: Function+171↑j
.text:00402182                 pop     esi
.text:00402183
.text:00402183 loc_402183:                             ; CODE XREF: Function+A↑j
.text:00402183                 pop     ebp
.text:00402184                 retn    0Ch
.text:00402184 Function        endp
.text:00402184
.text:00402184 ; ---------------------------------------------------------------------------
.text:00402187                 align 4
.text:00402188 jpt_40203D      dd offset loc_402055    ; DATA XREF: Function+3D↑r
.text:00402188                 dd offset loc_402044    ; jump table for switch statement
.text:00402188                 dd offset def_40203D
.text:00402194 byte_402194     db 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:00402194                                         ; DATA XREF: Function+36↑r
.text:004021A6                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2 ; indirect table for switch statement
.text:004021B8                 db 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:004021CA                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:004021DC                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:004021EE                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:00402200                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:00402212                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:00402224                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:00402236                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:00402248                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:0040225A                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:0040226C                 db 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
.text:0040227E                 db 2, 2, 2, 1
.text:00402282                 align 10h
.text:00402290
.text:00402290 loc_402290:                             ; CODE XREF: sub_402E80:loc_402F3A↓p
.text:00402290                 mov     edi, edi
.text:00402292                 push    ebp
.text:00402293                 mov     ebp, esp
.text:00402295                 sub     esp, 1C4h
.text:0040229B                 mov     eax, ___security_cookie
.text:004022A0                 xor     eax, ebp
.text:004022A2                 mov     [ebp-4], eax
.text:004022A5                 push    ebx
.text:004022A6                 push    18Eh
.text:004022AB                 lea     eax, [ebp-196h]
.text:004022B1                 push    0
.text:004022B3                 xor     bl, bl
.text:004022B5                 push    eax
.text:004022B6                 mov     [ebp-199h], bl
.text:004022BC                 mov     word ptr [ebp-198h], 0
.text:004022C5                 call    memset
.text:004022CA                 add     esp, 0Ch
.text:004022CD                 lea     ecx, [ebp-198h]
.text:004022D3                 push    ecx
.text:004022D4                 push    2
.text:004022D6                 call    ds:WSAStartup
.text:004022DC                 test    eax, eax
.text:004022DE                 jnz     loc_4023AA
.text:004022E4                 mov     [ebp-1BCh], eax
.text:004022EA                 mov     [ebp-1B8h], eax
.text:004022F0                 mov     [ebp-1B4h], eax
.text:004022F6                 lea     edx, [ebp-1A0h]
.text:004022FC                 push    edx
.text:004022FD                 mov     [ebp-1A0h], eax
.text:00402303                 mov     [ebp-1B0h], eax
.text:00402309                 mov     [ebp-1ACh], eax
.text:0040230F                 mov     [ebp-1A8h], eax
.text:0040230F ; ---------------------------------------------------------------------------
.text:00402315                 db 89h, 85h, 5Ch
.text:00402318                 db 0FEh
.text:00402319 _ctor_1         db 2 dup(0FFh), 8Dh
.text:0040231C                 dd 0FFFE4085h, 6A50FFh, 1BBh
.text:00402328                 db 0, 68h
.text:0040232A                 dd offset loc_4012EC
.text:0040232E ; ---------------------------------------------------------------------------
.text:0040232E                 mov     dword ptr [ebp-1BCh], 17h
.text:00402338                 mov     [ebp-1B8h], ebx
.text:0040233E                 mov     dword ptr [ebp-1B4h], 6
.text:00402348                 mov     dword ptr [ebp-1C0h], 4
.text:00402352                 call    ds:getaddrinfo
.text:00402358                 test    eax, eax
.text:0040235A                 jnz     short loc_40238F
.text:0040235C                 mov     ecx, [ebp-1A0h]
.text:00402362                 test    ecx, ecx
.text:00402364                 jz      short loc_40238F
.text:00402366                 mov     eax, ecx
.text:00402368
.text:00402368 loc_402368:                             ; CODE XREF: .text:0040237E↓j
.text:00402368                 cmp     dword ptr [eax+4], 17h
.text:0040236C                 jnz     short loc_402379
.text:0040236E                 cmp     dword ptr [eax+0Ch], 6
.text:00402372                 jnz     short loc_402379
.text:00402374                 cmp     [eax+8], ebx
.text:00402377                 jz      short loc_402382
.text:00402379
.text:00402379 loc_402379:                             ; CODE XREF: .text:0040236C↑j
.text:00402379                                         ; .text:00402372↑j
.text:00402379                 mov     eax, [eax+1Ch]
.text:0040237C                 test    eax, eax
.text:0040237E                 jnz     short loc_402368
.text:00402380                 jmp     short loc_402388
.text:00402382 ; ---------------------------------------------------------------------------
.text:00402382
.text:00402382 loc_402382:                             ; CODE XREF: .text:00402377↑j
.text:00402382                 mov     [ebp-199h], bl
.text:00402388
.text:00402388 loc_402388:                             ; CODE XREF: .text:00402380↑j
.text:00402388                 push    ecx
.text:00402389                 call    ds:freeaddrinfo
.text:0040238F
.text:0040238F loc_40238F:                             ; CODE XREF: .text:0040235A↑j
.text:0040238F                                         ; .text:00402364↑j
.text:0040238F                 call    ds:WSACleanup
.text:00402395                 mov     al, [ebp-199h]
.text:0040239B                 pop     ebx
.text:0040239C                 mov     ecx, [ebp-4]
.text:0040239F                 xor     ecx, ebp
.text:004023A1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004023A6                 mov     esp, ebp
.text:004023A8                 pop     ebp
.text:004023A9                 retn
.text:004023AA ; ---------------------------------------------------------------------------
.text:004023AA
.text:004023AA loc_4023AA:                             ; CODE XREF: .text:004022DE↑j
.text:004023AA                 mov     ecx, [ebp-4]
.text:004023AD                 mov     al, bl
.text:004023AF                 xor     ecx, ebp
.text:004023B1                 pop     ebx
.text:004023B1 ; ---------------------------------------------------------------------------
.text:004023B2                 dw 0AEE8h
.text:004023B4 ; ---------------------------------------------------------------------------
.text:004023B4
.text:004023B4 OnDownloadProgressChanged_0:
.text:004023B4                 bound   eax, [eax]
.text:004023B6                 add     [ebx-333CA21Bh], cl
.text:004023BC                 int     3               ; Trap to Debugger
.text:004023BD                 int     3               ; Trap to Debugger
.text:004023BE                 int     3               ; Trap to Debugger
.text:004023BF                 int     3               ; Trap to Debugger
.text:004023C0
.text:004023C0 loc_4023C0:                             ; DATA XREF: .text:stru_409088↓o
.text:004023C0                 mov     dword ptr [ecx], offset loc_4013C4
.text:004023C0 ; ---------------------------------------------------------------------------
.text:004023C6                 dw 25FFh
.text:004023C8
.text:004023C8 ; =============== S U B R O U T I N E =======================================
.text:004023C8
.text:004023C8
.text:004023C8 ; int __thiscall OnDownloadComplete_0(void *, int)
.text:004023C8 OnDownloadComplete_0 proc near
.text:004023C8                 dec     esp
.text:004023C9                 adc     [eax+0], eax
.text:004023CC                 int     3               ; Trap to Debugger
.text:004023CD                 int     3               ; Trap to Debugger
.text:004023CE                 int     3               ; Trap to Debugger
.text:004023CF                 int     3               ; Trap to Debugger
.text:004023D0                 int     3               ; Trap to Debugger
.text:004023D1                 int     3               ; Trap to Debugger
.text:004023D2                 int     3               ; Trap to Debugger
.text:004023D3                 int     3               ; Trap to Debugger
.text:004023D4                 int     3               ; Trap to Debugger
.text:004023D5                 int     3               ; Trap to Debugger
.text:004023D6                 int     3               ; Trap to Debugger
.text:004023D7                 int     3               ; Trap to Debugger
.text:004023D8                 int     3               ; Trap to Debugger
.text:004023D9                 int     3               ; Trap to Debugger
.text:004023DA                 int     3               ; Trap to Debugger
.text:004023DB                 int     3               ; Trap to Debugger
.text:004023DC                 int     3               ; Trap to Debugger
.text:004023DD                 int     3               ; Trap to Debugger
.text:004023DE                 int     3               ; Trap to Debugger
.text:004023DF                 int     3               ; Trap to Debugger
.text:004023E0                 mov     edi, edi
.text:004023E2                 push    ebp
.text:004023E3                 mov     ebp, esp
.text:004023E5                 push    esi
.text:004023E6                 mov     esi, ecx
.text:004023E8                 mov     dword ptr [esi], offset loc_4013C4
.text:004023EE                 call    ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:004023F4                 test    byte ptr [ebp+8], 1
.text:004023F8                 jz      short loc_402403
.text:004023FA                 push    esi             ; void *
.text:004023FB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00402400                 add     esp, 4
.text:00402403
.text:00402403 loc_402403:                             ; CODE XREF: OnDownloadComplete_0+30↑j
.text:00402403                 mov     eax, esi
.text:00402405                 pop     esi
.text:00402406                 pop     ebp
.text:00402407                 retn    4
.text:00402407 OnDownloadComplete_0 endp
.text:00402407
.text:00402407 ; ---------------------------------------------------------------------------
.text:0040240A                 align 10h
.text:00402410 ; [0000000E BYTES: COLLAPSED FUNCTION unknown_libname_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040241E                 db 12h dup(0CCh)
.text:00402430
.text:00402430 ; =============== S U B R O U T I N E =======================================
.text:00402430
.text:00402430
.text:00402430 sub_402430      proc near               ; DATA XREF: .text:pThrowInfo↓o
.text:00402430                 mov     edi, edi
.text:00402432                 push    esi
.text:00402433                 mov     esi, ecx
.text:00402435                 lea     ecx, [esi+0Ch]
.text:00402438                 mov     dword ptr [esi], (offset GetTheLastVersionNumberAvailable+5)
.text:0040243E                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00402444                 mov     ecx, esi
.text:00402446                 pop     esi
.text:00402447                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00402447 sub_402430      endp
.text:00402447
.text:00402447 ; ---------------------------------------------------------------------------
.text:0040244D                 align 20h
.text:00402460                 mov     edi, edi
.text:00402462                 push    ebp
.text:00402463                 mov     ebp, esp
.text:00402465                 push    esi
.text:00402466                 mov     esi, ecx
.text:00402468                 lea     ecx, [esi+0Ch]
.text:0040246B                 mov     dword ptr [esi], (offset GetTheLastVersionNumberAvailable+5)
.text:00402471                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00402477                 mov     ecx, esi
.text:00402479                 call    ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:0040247F                 test    byte ptr [ebp+8], 1
.text:00402483                 jz      short loc_40248E
.text:00402485                 push    esi
.text:00402485 ; ---------------------------------------------------------------------------
.text:00402486                 dw 0EFE8h
.text:00402488                 db 61h
.text:00402489 ManualUpgradeFromCommandLine_0 db 2 dup(0), 83h
.text:0040248C                 db 0C4h, 4
.text:0040248E ; ---------------------------------------------------------------------------
.text:0040248E
.text:0040248E loc_40248E:                             ; CODE XREF: .text:00402483↑j
.text:0040248E                 mov     eax, esi
.text:00402490                 pop     esi
.text:00402491                 pop     ebp
.text:00402492                 retn    4
.text:00402492 ; ---------------------------------------------------------------------------
.text:00402495                 align 10h
.text:004024A0
.text:004024A0 ; =============== S U B R O U T I N E =======================================
.text:004024A0
.text:004024A0 ; Attributes: bp-based frame
.text:004024A0
.text:004024A0 sub_4024A0      proc near               ; CODE XREF: sub_404980+C↓p
.text:004024A0                                         ; DATA XREF: .text:00409020↓o
.text:004024A0
.text:004024A0 var_10          = dword ptr -10h
.text:004024A0 var_C           = dword ptr -0Ch
.text:004024A0 var_4           = dword ptr -4
.text:004024A0 arg_0           = dword ptr  8
.text:004024A0 arg_4           = dword ptr  0Ch
.text:004024A0
.text:004024A0 ; FUNCTION CHUNK AT .text:00408D00 SIZE 00000024 BYTES
.text:004024A0
.text:004024A0 ; __unwind { // SEH_4024A0
.text:004024A0                 mov     edi, edi
.text:004024A2                 push    ebp
.text:004024A3                 mov     ebp, esp
.text:004024A5                 push    0FFFFFFFFh
.text:004024A7                 push    offset SEH_4024A0
.text:004024AC                 mov     eax, large fs:0
.text:004024B2                 push    eax
.text:004024B3                 push    ecx
.text:004024B4                 push    esi
.text:004024B5                 push    edi
.text:004024B6                 mov     eax, ___security_cookie
.text:004024BB                 xor     eax, ebp
.text:004024BD                 push    eax
.text:004024BE                 lea     eax, [ebp+var_C]
.text:004024C1                 mov     large fs:0, eax
.text:004024C7                 mov     esi, ecx
.text:004024C9                 mov     [ebp+var_10], esi
.text:004024CC                 mov     edi, [ebp+arg_0]
.text:004024CF                 push    edi
.text:004024D0                 call    ds:__imp_??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:004024D6                 add     edi, 0Ch
.text:004024D9 ;   try {
.text:004024D9                 mov     [ebp+var_4], 0
.text:004024E0                 push    edi
.text:004024E1                 lea     ecx, [esi+0Ch]
.text:004024E4                 mov     dword ptr [esi], (offset GetTheLastVersionNumberAvailable+5)
.text:004024EA                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text:004024F0                 mov     eax, esi
.text:004024F2                 mov     ecx, [ebp+var_C]
.text:004024F5                 mov     large fs:0, ecx
.text:004024FC                 pop     ecx
.text:004024FD                 pop     edi
.text:004024FE                 pop     esi
.text:004024FF                 mov     esp, ebp
.text:00402501                 pop     ebp
.text:00402502                 retn    4
.text:00402502 ;   } // starts at 4024D9
.text:00402502 ; } // starts at 4024A0
.text:00402502 sub_4024A0      endp
.text:00402502
.text:00402502 ; ---------------------------------------------------------------------------
.text:00402505                 align 10h
.text:00402510
.text:00402510 ; =============== S U B R O U T I N E =======================================
.text:00402510
.text:00402510 ; Attributes: bp-based frame
.text:00402510
.text:00402510 sub_402510      proc near               ; CODE XREF: sub_402B20+C5↓p
.text:00402510                                         ; sub_402B20+119↓p ...
.text:00402510
.text:00402510 Format          = dword ptr  8
.text:00402510 ArgList         = byte ptr  0Ch
.text:00402510
.text:00402510                 mov     edi, edi
.text:00402512                 push    ebp
.text:00402513                 mov     ebp, esp
.text:00402515                 cmp     eax, 7FFFFFFFh
.text:0040251A                 jbe     short loc_402523
.text:0040251C                 mov     eax, 80070057h
.text:00402521                 pop     ebp
.text:00402522                 retn
.text:00402523 ; ---------------------------------------------------------------------------
.text:00402523
.text:00402523 loc_402523:                             ; CODE XREF: sub_402510+A↑j
.text:00402523                 push    ebx
.text:00402524                 xor     ebx, ebx
.text:00402526                 test    eax, eax
.text:00402528                 jnz     short loc_402534
.text:0040252A                 mov     ebx, 80070057h
.text:0040252F                 mov     eax, ebx
.text:00402531                 pop     ebx
.text:00402532                 pop     ebp
.text:00402533                 retn
.text:00402534 ; ---------------------------------------------------------------------------
.text:00402534
.text:00402534 loc_402534:                             ; CODE XREF: sub_402510+18↑j
.text:00402534                 mov     ecx, [ebp+Format]
.text:00402537                 push    esi
.text:00402538                 lea     esi, [eax-1]
.text:0040253B                 lea     eax, [ebp+ArgList]
.text:0040253E                 push    eax             ; ArgList
.text:0040253F                 push    ecx             ; Format
.text:00402540                 push    esi             ; BufferCount
.text:00402541                 push    edi             ; Buffer
.text:00402542                 call    ds:_vsnprintf
.text:00402548                 add     esp, 10h
.text:0040254B                 test    eax, eax
.text:0040254D                 jl      short loc_40255E
.text:0040254F                 cmp     eax, esi
.text:00402551                 ja      short loc_40255E
.text:00402553                 jnz     short loc_402566
.text:00402555                 mov     [esi+edi], bl
.text:00402558                 pop     esi
.text:00402559                 mov     eax, ebx
.text:0040255B                 pop     ebx
.text:0040255C                 pop     ebp
.text:0040255D                 retn
.text:0040255E ; ---------------------------------------------------------------------------
.text:0040255E
.text:0040255E loc_40255E:                             ; CODE XREF: sub_402510+3D↑j
.text:0040255E                                         ; sub_402510+41↑j
.text:0040255E                 mov     [esi+edi], bl
.text:00402561                 mov     ebx, 8007007Ah
.text:00402566
.text:00402566 loc_402566:                             ; CODE XREF: sub_402510+43↑j
.text:00402566                 pop     esi
.text:00402567
.text:00402567 loc_402567:                             ; CODE XREF: label1_Click↓j
.text:00402567                 mov     eax, ebx
.text:00402569                 pop     ebx
.text:0040256A                 pop     ebp
.text:0040256B                 retn
.text:0040256B sub_402510      endp
.text:0040256B
.text:0040256B ; ---------------------------------------------------------------------------
.text:0040256C                 align 20h
.text:00402580
.text:00402580 ; =============== S U B R O U T I N E =======================================
.text:00402580
.text:00402580
.text:00402580 sub_402580      proc near               ; CODE XREF: sub_403490+76↓p
.text:00402580                                         ; sub_403A00+3F↓p ...
.text:00402580                 mov     edi, edi
.text:00402582                 push    esi
.text:00402583                 push    edi
.text:00402584                 mov     esi, eax
.text:00402586                 mov     edi, ecx
.text:00402588                 xor     eax, eax
.text:0040258A                 test    edi, edi
.text:0040258C                 jnz     short loc_402596
.text:0040258E                 pop     edi
.text:0040258F                 mov     eax, 80070057h
.text:00402594                 pop     esi
.text:00402595                 retn
.text:00402596 ; ---------------------------------------------------------------------------
.text:00402596
.text:00402596 loc_402596:                             ; CODE XREF: sub_402580+C↑j
.text:00402596                                         ; sub_402580+27↓j
.text:00402596                 mov     cl, [esi]
.text:00402598                 test    cl, cl
.text:0040259A                 jz      short loc_4025B7
.text:0040259C                 mov     [edx], cl
.text:0040259E                 add     edx, 1
.text:004025A1                 add     esi, 1
.text:004025A4                 sub     edi, 1
.text:004025A7                 jnz     short loc_402596
.text:004025A9                 sub     edx, 1
.text:004025AC                 pop     edi
.text:004025AD                 mov     eax, 8007007Ah
.text:004025B2                 mov     byte ptr [edx], 0
.text:004025B5                 pop     esi
.text:004025B6                 retn
.text:004025B7 ; ---------------------------------------------------------------------------
.text:004025B7
.text:004025B7 loc_4025B7:                             ; CODE XREF: sub_402580+1A↑j
.text:004025B7                 test    edi, edi
.text:004025B9                 jnz     short loc_4025C3
.text:004025BB                 sub     edx, 1
.text:004025BE                 mov     eax, 8007007Ah
.text:004025C3
.text:004025C3 loc_4025C3:                             ; CODE XREF: sub_402580+39↑j
.text:004025C3                 pop     edi
.text:004025C4                 mov     byte ptr [edx], 0
.text:004025C7                 pop     esi
.text:004025C8                 retn
.text:004025C8 sub_402580      endp
.text:004025C8
.text:004025C8 ; ---------------------------------------------------------------------------
.text:004025C9                 align 10h
.text:004025D0
.text:004025D0 loc_4025D0:                             ; CODE XREF: sub_402E80+13F↓p
.text:004025D0                                         ; sub_402E80+211↓p ...
.text:004025D0                 mov     edi, edi
.text:004025D2                 push    ebp
.text:004025D3                 mov     ebp, esp
.text:004025D5                 push    0FFFFFFFFh
.text:004025D5 ; ---------------------------------------------------------------------------
.text:004025D7                 db 68h
.text:004025D8
.text:004025D8 ; =============== S U B R O U T I N E =======================================
.text:004025D8
.text:004025D8
.text:004025D8 label1_Click    proc near
.text:004025D8                 jbe     short near ptr loc_402567+1
.text:004025D8 label1_Click    endp
.text:004025D8
.text:004025DA
.text:004025DA Dispose_0:
.text:004025DA                 inc     eax
.text:004025DB                 add     [ecx+0], ah
.text:004025DB ; ---------------------------------------------------------------------------
.text:004025DF                 db 0
.text:004025E0                 dd 51500000h, 0A1575653h
.text:004025E8                 dd offset ___security_cookie
.text:004025EC ; ---------------------------------------------------------------------------
.text:004025EC                 xor     eax, ebp
.text:004025EE                 push    eax
.text:004025EF                 lea     eax, [ebp-0Ch]
.text:004025F2                 mov     large fs:0, eax
.text:004025F8                 mov     esi, [ebp+8]
.text:004025FB                 mov     eax, [ebp+0Ch]
.text:004025FE                 call    sub_4015F0
.text:00402603                 xor     ebx, ebx
.text:00402605
.text:00402605 ; =============== S U B R O U T I N E =======================================
.text:00402605
.text:00402605
.text:00402605 InitializeComponent_0 proc near
.text:00402605                 mov     [ebp-4], ebx
.text:00402608                 mov     dword ptr [esi], (offset loc_4013D3+1)
.text:0040260E                 mov     byte ptr [esi+1E0h], 1
.text:00402615                 push    18h             ; unsigned int
.text:00402617                 mov     [esi+1E8h], ebx
.text:0040261D                 mov     [esi+1ECh], ebx
.text:00402623                 mov     [esi+1F0h], ebx
.text:00402629                 mov     [esi+1F4h], ebx
.text:0040262F                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00402634                 mov     edi, eax
.text:00402636                 add     esp, 4
.text:00402639                 cmp     edi, ebx
.text:0040263B                 jz      short loc_402646
.text:0040263D                 push    edi             ; lpCriticalSection
.text:0040263E                 call    ds:InitializeCriticalSection
.text:00402644                 jmp     short loc_402648
.text:00402646 ; ---------------------------------------------------------------------------
.text:00402646
.text:00402646 loc_402646:                             ; CODE XREF: InitializeComponent_0+36↑j
.text:00402646                 xor     edi, edi
.text:00402648
.text:00402648 loc_402648:                             ; CODE XREF: InitializeComponent_0+3F↑j
.text:00402648                 mov     [esi+1E4h], edi
.text:0040264E                 lea     eax, [esi+210h]
.text:00402654                 push    0A080h          ; Size
.text:00402659                 mov     [esi+1F8h], ebx
.text:0040265F                 mov     [esi+1FCh], ebx
.text:00402665                 mov     [esi+200h], ebx
.text:0040266B                 mov     [esi+204h], ebx
.text:00402671                 mov     [esi+208h], ebx
.text:00402677                 mov     dword ptr [esi+20Ch], 0A080h
.text:00402681                 mov     [esi+0A290h], eax
.text:00402687                 mov     [esi+0A294h], eax
.text:0040268D                 mov     [esi+0A298h], ebx
.text:00402693                 mov     [esi+0A29Ch], ebx
.text:00402699                 mov     [esi+0A2A0h], ebx
.text:0040269F                 mov     [esi+0A2A4h], ebx
.text:004026A5                 mov     [esi+0A2A8h], ebx
.text:004026AB                 mov     [esi+0A2ACh], ebx
.text:004026B1                 mov     [esi+0A2B0h], ebx
.text:004026B7                 mov     [esi+0A2B4h], ebx
.text:004026BD                 mov     [esi+0A2D0h], ebx
.text:004026C3                 mov     [esi+0A2D4h], ebx
.text:004026C9                 mov     [esi+0A2D8h], ebx
.text:004026CF                 mov     [esi+0A2DCh], ebx
.text:004026D5                 mov     [esi+0A2E0h], bl
.text:004026DB                 push    ebx             ; Val
.text:004026DC                 push    eax             ; void *
.text:004026DD                 mov     [esi+0A2E8h], ebx
.text:004026E3                 mov     [esi+0A2ECh], ebx
.text:004026E9                 mov     [esi+0A2F0h], ebx
.text:004026EF                 call    memset
.text:004026F4                 add     esp, 0Ch
.text:004026F7                 push    offset Addend   ; lpAddend
.text:004026FC                 call    ds:InterlockedIncrement
.text:00402702                 cmp     dword_40B410, ebx
.text:00402708                 jnz     short loc_402712
.text:0040270A                 mov     dword_40B410, esi
.text:00402710                 jmp     short loc_402723
.text:00402712 ; ---------------------------------------------------------------------------
.text:00402712
.text:00402712 loc_402712:                             ; CODE XREF: InitializeComponent_0+103↑j
.text:00402712                 mov     eax, dword_40B414
.text:00402717                 mov     [eax+0A2A8h], esi
.text:0040271D                 mov     [esi+0A2A4h], eax
.text:00402723
.text:00402723 loc_402723:                             ; CODE XREF: InitializeComponent_0+10B↑j
.text:00402723                 mov     eax, esi
.text:00402725                 mov     dword_40B414, esi
.text:0040272B                 mov     ecx, [ebp-0Ch]
.text:0040272E                 mov     large fs:0, ecx
.text:00402735                 pop     ecx
.text:00402736                 pop     edi
.text:00402737                 pop     esi
.text:00402738                 pop     ebx
.text:00402739                 mov     esp, ebp
.text:0040273B                 pop     ebp
.text:0040273C                 retn    8
.text:0040273C InitializeComponent_0 endp ; sp-analysis failed
.text:0040273C
.text:0040273C ; ---------------------------------------------------------------------------
.text:0040273F                 db 11h dup(0CCh)
.text:00402750
.text:00402750 ; =============== S U B R O U T I N E =======================================
.text:00402750
.text:00402750 ; Attributes: bp-based frame
.text:00402750
.text:00402750 ; int __thiscall sub_402750(void *, char)
.text:00402750 sub_402750      proc near
.text:00402750
.text:00402750 arg_0           = byte ptr  8
.text:00402750
.text:00402750                 mov     edi, edi
.text:00402752                 push    ebp
.text:00402753                 mov     ebp, esp
.text:00402755                 push    esi
.text:00402756                 mov     esi, ecx
.text:00402758                 call    sub_402780
.text:0040275D                 test    [ebp+arg_0], 1
.text:00402761                 jz      short loc_40276C
.text:00402763                 push    esi             ; void *
.text:00402764                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00402769                 add     esp, 4
.text:0040276C
.text:0040276C loc_40276C:                             ; CODE XREF: sub_402750+11↑j
.text:0040276C                 mov     eax, esi
.text:0040276E                 pop     esi
.text:0040276F                 pop     ebp
.text:00402770                 retn    4
.text:00402770 sub_402750      endp
.text:00402770
.text:00402770 ; ---------------------------------------------------------------------------
.text:00402773                 align 10h
.text:00402780
.text:00402780 ; =============== S U B R O U T I N E =======================================
.text:00402780
.text:00402780 ; Attributes: bp-based frame
.text:00402780
.text:00402780 sub_402780      proc near               ; CODE XREF: sub_402750+8↑p
.text:00402780
.text:00402780 var_10          = dword ptr -10h
.text:00402780 var_C           = dword ptr -0Ch
.text:00402780 var_4           = dword ptr -4
.text:00402780 arg_4           = dword ptr  0Ch
.text:00402780
.text:00402780 ; FUNCTION CHUNK AT .text:00401510 SIZE 0000002F BYTES
.text:00402780 ; FUNCTION CHUNK AT .text:00401710 SIZE 00000040 BYTES
.text:00402780 ; FUNCTION CHUNK AT .text:00408E20 SIZE 00000031 BYTES
.text:00402780
.text:00402780 ; __unwind { // SEH_402780
.text:00402780                 mov     edi, edi
.text:00402782                 push    ebp
.text:00402783                 mov     ebp, esp
.text:00402785                 push    0FFFFFFFFh
.text:00402787                 push    offset SEH_402780
.text:0040278C                 mov     eax, large fs:0
.text:00402792                 push    eax
.text:00402793                 push    ecx
.text:00402794                 push    ebx
.text:00402795                 push    esi
.text:00402796                 push    edi
.text:00402797                 mov     eax, ___security_cookie
.text:0040279C                 xor     eax, ebp
.text:0040279E                 push    eax
.text:0040279F                 lea     eax, [ebp+var_C]
.text:004027A2                 mov     large fs:0, eax
.text:004027A8                 mov     esi, ecx
.text:004027AA                 mov     [ebp+var_10], esi
.text:004027AD                 mov     dword ptr [esi], (offset loc_4013D3+1)
.text:004027B3                 push    offset Addend   ; lpAddend
.text:004027B8 ;   try {
.text:004027B8                 mov     [ebp+var_4], 1
.text:004027BF                 call    ds:InterlockedDecrement
.text:004027C5                 mov     eax, [esi+0A2E8h]
.text:004027CB                 xor     ebx, ebx
.text:004027CD                 cmp     eax, ebx
.text:004027CF                 jz      short loc_4027DA
.text:004027D1                 push    eax             ; void *
.text:004027D2                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004027D7                 add     esp, 4
.text:004027DA
.text:004027DA loc_4027DA:                             ; CODE XREF: sub_402780+4F↑j
.text:004027DA                 mov     [esi+0A2E8h], ebx
.text:004027E0                 mov     [esi+0A2ECh], ebx
.text:004027E6                 mov     [esi+0A2F0h], ebx
.text:004027E6 ;   } // starts at 4027B8
.text:004027EC ;   try {
.text:004027EC                 mov     byte ptr [ebp+var_4], bl
.text:004027EF                 mov     edi, [esi+1E4h]
.text:004027F5                 cmp     edi, ebx
.text:004027F7                 jz      short loc_402809
.text:004027F9                 push    edi             ; lpCriticalSection
.text:004027FA                 call    ds:DeleteCriticalSection
.text:00402800                 push    edi             ; void *
.text:00402801                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00402806                 add     esp, 4
.text:00402806 ;   } // starts at 4027EC
.text:00402809
.text:00402809 loc_402809:                             ; CODE XREF: sub_402780+77↑j
.text:00402809                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00402810                 sub     dword_40B400, 1
.text:00402817                 mov     [esi+1E4h], ebx
.text:0040281D                 mov     [esi+1F4h], ebx
.text:00402823                 mov     [esi+1F0h], ebx
.text:00402829                 mov     dword ptr [esi], offset off_401310
.text:0040282F                 mov     edi, [esi+20h]
.text:00402832                 cmp     edi, ebx
.text:00402834                 jz      short loc_402846
.text:00402836                 push    edi             ; lpCriticalSection
.text:00402837                 call    ds:DeleteCriticalSection
.text:0040283D                 push    edi             ; void *
.text:0040283E                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00402843                 add     esp, 4
.text:00402846
.text:00402846 loc_402846:                             ; CODE XREF: sub_402780+B4↑j
.text:00402846                 mov     [esi+20h], ebx
.text:00402849                 mov     [esi+30h], ebx
.text:0040284C                 mov     [esi+2Ch], ebx
.text:0040284F                 mov     ecx, [ebp+var_C]
.text:00402852                 mov     large fs:0, ecx
.text:00402859                 pop     ecx
.text:0040285A                 pop     edi
.text:0040285B                 pop     esi
.text:0040285C                 pop     ebx
.text:0040285D                 mov     esp, ebp
.text:0040285F                 pop     ebp
.text:00402860                 retn
.text:00402860 ; } // starts at 402780
.text:00402860 sub_402780      endp
.text:00402860
.text:00402860 ; ---------------------------------------------------------------------------
.text:00402861                 align 10h
.text:00402870
.text:00402870 ; =============== S U B R O U T I N E =======================================
.text:00402870
.text:00402870
.text:00402870 sub_402870      proc near               ; CODE XREF: sub_403330+1D↓p
.text:00402870                 mov     eax, [esi+0A2A0h]
.text:00402876                 test    eax, eax
.text:00402878                 jz      short loc_4028CF
.text:0040287A                 cmp     dword ptr [eax+10h], 0
.text:0040287E                 jz      short loc_4028A7
.text:00402880                 mov     eax, [eax+4]
.text:00402883                 mov     ecx, [esi+1CCh]
.text:00402889                 mov     edx, [esi+0A2ACh]
.text:0040288F                 push    eax
.text:00402890                 mov     eax, [esi+0A2DCh]
.text:00402896                 push    ecx
.text:00402897                 push    edx
.text:00402898                 call    eax
.text:0040289A                 mov     ecx, [esi+0A2A0h]
.text:004028A0                 mov     dword ptr [ecx+4], 0
.text:004028A7
.text:004028A7 loc_4028A7:                             ; CODE XREF: sub_402870+E↑j
.text:004028A7                 push    edi
.text:004028A8                 mov     edi, [esi+0A2A0h]
.text:004028AE                 test    edi, edi
.text:004028B0                 jz      short loc_4028C4
.text:004028B2                 mov     edx, [edi+4]
.text:004028B5                 push    edx             ; void *
.text:004028B6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004028BB                 push    edi             ; void *
.text:004028BC                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004028C1                 add     esp, 8
.text:004028C4
.text:004028C4 loc_4028C4:                             ; CODE XREF: sub_402870+40↑j
.text:004028C4                 mov     dword ptr [esi+0A2A0h], 0
.text:004028CE                 pop     edi
.text:004028CF
.text:004028CF loc_4028CF:                             ; CODE XREF: sub_402870+8↑j
.text:004028CF                 cmp     esi, dword_40B410
.text:004028D5                 jnz     short loc_4028E2
.text:004028D7                 mov     eax, [esi+0A2A8h]
.text:004028DD                 mov     dword_40B410, eax
.text:004028E2
.text:004028E2 loc_4028E2:                             ; CODE XREF: sub_402870+65↑j
.text:004028E2                 cmp     esi, dword_40B414
.text:004028E8                 jnz     short loc_4028F6
.text:004028EA                 mov     ecx, [esi+0A2A4h]
.text:004028F0                 mov     dword_40B414, ecx
.text:004028F6
.text:004028F6 loc_4028F6:                             ; CODE XREF: sub_402870+78↑j
.text:004028F6                 mov     eax, [esi+0A2A4h]
.text:004028FC                 test    eax, eax
.text:004028FE                 jz      short loc_40290C
.text:00402900                 mov     edx, [esi+0A2A8h]
.text:00402906                 mov     [eax+0A2A8h], edx
.text:0040290C
.text:0040290C loc_40290C:                             ; CODE XREF: sub_402870+8E↑j
.text:0040290C                 mov     eax, [esi+0A2A8h]
.text:00402912                 test    eax, eax
.text:00402914                 jz      short locret_402922
.text:00402916                 mov     ecx, [esi+0A2A4h]
.text:0040291C                 mov     [eax+0A2A4h], ecx
.text:00402922
.text:00402922 locret_402922:                          ; CODE XREF: sub_402870+A4↑j
.text:00402922                 retn
.text:00402922 sub_402870      endp
.text:00402922
.text:00402922 ; ---------------------------------------------------------------------------
.text:00402923                 align 10h
.text:00402930
.text:00402930 ; =============== S U B R O U T I N E =======================================
.text:00402930
.text:00402930
.text:00402930 sub_402930      proc near               ; CODE XREF: sub_403FC0+1E↓p
.text:00402930                 mov     eax, dword_40B410
.text:00402935                 test    eax, eax
.text:00402937                 jz      short locret_40295A
.text:00402939                 lea     esp, [esp+0]
.text:00402940
.text:00402940 loc_402940:                             ; CODE XREF: sub_402930+28↓j
.text:00402940                 cmp     [eax+1CCh], edx
.text:00402946                 jnz     short loc_402950
.text:00402948                 cmp     ecx, [eax+0A2ACh]
.text:0040294E                 jz      short locret_40295A
.text:00402950
.text:00402950 loc_402950:                             ; CODE XREF: sub_402930+16↑j
.text:00402950                 mov     eax, [eax+0A2A8h]
.text:00402956                 test    eax, eax
.text:00402958                 jnz     short loc_402940
.text:0040295A
.text:0040295A locret_40295A:                          ; CODE XREF: sub_402930+7↑j
.text:0040295A                                         ; sub_402930+1E↑j
.text:0040295A                 retn
.text:0040295A sub_402930      endp
.text:0040295A
.text:0040295A ; ---------------------------------------------------------------------------
.text:0040295B                 align 10h
.text:00402960
.text:00402960 ; =============== S U B R O U T I N E =======================================
.text:00402960
.text:00402960 ; Attributes: bp-based frame
.text:00402960
.text:00402960 sub_402960      proc near
.text:00402960
.text:00402960 arg_0           = dword ptr  8
.text:00402960
.text:00402960                 mov     edi, edi
.text:00402962                 push    ebp
.text:00402963                 mov     ebp, esp
.text:00402965                 push    ebx
.text:00402966                 push    edi
.text:00402967                 push    14h             ; unsigned int
.text:00402969                 mov     ebx, ecx
.text:0040296B                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00402970                 mov     ecx, [ebp+arg_0]
.text:00402973                 add     esp, 4
.text:00402976                 test    eax, eax
.text:00402978                 jz      short loc_4029A0
.text:0040297A                 mov     edx, [ebx+1CCh]
.text:00402980                 mov     edi, [ecx+8]
.text:00402983                 push    esi
.text:00402984                 mov     esi, [ecx+4]
.text:00402987                 mov     [eax+8], esi
.text:0040298A                 mov     dword ptr [eax], 0
.text:00402990                 mov     [eax+4], edi
.text:00402993                 mov     [eax+0Ch], edx
.text:00402996                 mov     dword ptr [eax+10h], 0
.text:0040299D                 pop     esi
.text:0040299E                 jmp     short loc_4029A2
.text:004029A0 ; ---------------------------------------------------------------------------
.text:004029A0
.text:004029A0 loc_4029A0:                             ; CODE XREF: sub_402960+18↑j
.text:004029A0                 xor     eax, eax
.text:004029A2
.text:004029A2 loc_4029A2:                             ; CODE XREF: sub_402960+3E↑j
.text:004029A2                 xor     edx, edx
.text:004029A4                 mov     edi, eax
.text:004029A6                 mov     eax, ebx
.text:004029A8                 mov     [ecx+8], edx
.text:004029AB                 mov     [ecx], edx
.text:004029AD                 mov     [ecx+4], edx
.text:004029B0                 call    loc_4029D0
.text:004029B5                 pop     edi
.text:004029B6                 xor     eax, eax
.text:004029B8                 pop     ebx
.text:004029B9                 pop     ebp
.text:004029BA                 retn    4
.text:004029BA sub_402960      endp
.text:004029BA
.text:004029BA ; ---------------------------------------------------------------------------
.text:004029BD                 db 13h dup(0CCh)
.text:004029D0 ; ---------------------------------------------------------------------------
.text:004029D0
.text:004029D0 loc_4029D0:                             ; CODE XREF: sub_402960+50↑p
.text:004029D0                                         ; sub_404040+69↓p ...
.text:004029D0                 mov     edi, edi
.text:004029D2                 push    esi
.text:004029D3                 mov     esi, eax
.text:004029D5                 mov     eax, [esi+1E4h]
.text:004029DB                 push    eax
.text:004029DC                 call    ds:EnterCriticalSection
.text:004029E2                 cmp     dword ptr [esi+1E8h], 0
.text:004029E9                 jnz     short loc_4029F3
.text:004029EB                 mov     [esi+1E8h], edi
.text:004029F1                 jmp     short loc_4029FB
.text:004029F3 ; ---------------------------------------------------------------------------
.text:004029F3
.text:004029F3 loc_4029F3:                             ; CODE XREF: .text:004029E9↑j
.text:004029F3                 mov     ecx, [esi+1ECh]
.text:004029F9                 mov     [ecx], edi
.text:004029FB
.text:004029FB loc_4029FB:                             ; CODE XREF: .text:004029F1↑j
.text:004029FB                 add     dword ptr [esi+1F0h], 1
.text:00402A02                 mov     eax, [esi+1E4h]
.text:00402A02 ; ---------------------------------------------------------------------------
.text:00402A08                 db 89h, 0BEh, 0ECh
.text:00402A0B
.text:00402A0B ; =============== S U B R O U T I N E =======================================
.text:00402A0B
.text:00402A0B ; Attributes: noreturn
.text:00402A0B
.text:00402A0B _ctor_2         proc near
.text:00402A0B                 add     [eax], eax
.text:00402A0D                 add     [ebx-69FEF7A9h], cl
.text:00402A13                 hlt
.text:00402A13 _ctor_2         endp
.text:00402A13
.text:00402A14 ; ---------------------------------------------------------------------------
.text:00402A14
.text:00402A14 get_ResourceManager_0:
.text:00402A14                 add     [eax], eax
.text:00402A16                 add     [eax-1], dl
.text:00402A19                 adc     eax, offset LeaveCriticalSection
.text:00402A1E                 mov     eax, [esi+1F8h]
.text:00402A24                 test    eax, eax
.text:00402A26                 jz      short loc_402A3E
.text:00402A28                 mov     ecx, [esi+1FCh]
.text:00402A2E                 test    ecx, ecx
.text:00402A30                 jz      short loc_402A3E
.text:00402A32                 push    0
.text:00402A34                 push    0
.text:00402A36                 push    ecx
.text:00402A37                 push    eax
.text:00402A38                 call    ds:PostMessageA
.text:00402A3E
.text:00402A3E loc_402A3E:                             ; CODE XREF: .text:00402A26↑j
.text:00402A3E                                         ; .text:00402A30↑j
.text:00402A3E                 mov     esi, [esi+0A29Ch]
.text:00402A44                 test    esi, esi
.text:00402A46                 jz      short near ptr loc_402A4E+1
.text:00402A48                 push    esi
.text:00402A48 ; ---------------------------------------------------------------------------
.text:00402A49                 db 0FFh, 15h
.text:00402A4B                 db  38h ; 8 OFF32 SEGDEF [_text,401038]
.text:00402A4C                 db 10h
.text:00402A4D
.text:00402A4D ; =============== S U B R O U T I N E =======================================
.text:00402A4D
.text:00402A4D
.text:00402A4D get_Culture_0   proc near
.text:00402A4D                 inc     eax
.text:00402A4E
.text:00402A4E loc_402A4E:                             ; CODE XREF: .text:00402A46↑j
.text:00402A4E                 add     [esi-3Dh], bl
.text:00402A51                 int     3               ; Trap to Debugger
.text:00402A52                 int     3               ; Trap to Debugger
.text:00402A53                 int     3               ; Trap to Debugger
.text:00402A54                 int     3               ; Trap to Debugger
.text:00402A55                 int     3               ; Trap to Debugger
.text:00402A56                 int     3               ; Trap to Debugger
.text:00402A57                 int     3               ; Trap to Debugger
.text:00402A57 get_Culture_0   endp
.text:00402A57
.text:00402A58
.text:00402A58 ; =============== S U B R O U T I N E =======================================
.text:00402A58
.text:00402A58
.text:00402A58 set_Culture_0   proc near
.text:00402A58                 int     3               ; Trap to Debugger
.text:00402A59                 int     3               ; Trap to Debugger
.text:00402A5A                 int     3               ; Trap to Debugger
.text:00402A5B                 int     3               ; Trap to Debugger
.text:00402A5C                 int     3               ; Trap to Debugger
.text:00402A5D                 int     3               ; Trap to Debugger
.text:00402A5E                 int     3               ; Trap to Debugger
.text:00402A5F                 int     3               ; Trap to Debugger
.text:00402A5F set_Culture_0   endp
.text:00402A5F
.text:00402A60
.text:00402A60 ; =============== S U B R O U T I N E =======================================
.text:00402A60
.text:00402A60 ; Attributes: bp-based frame
.text:00402A60
.text:00402A60 get_ChooseWhichVersionToInstall proc near
.text:00402A60
.text:00402A60 arg_0           = dword ptr  8
.text:00402A60 arg_4           = dword ptr  0Ch
.text:00402A60
.text:00402A60                 mov     edi, edi
.text:00402A62                 push    ebp
.text:00402A63                 mov     ebp, esp
.text:00402A65                 mov     eax, [ebp+arg_4]
.text:00402A68                 push    esi
.text:00402A69                 push    edi
.text:00402A6A                 mov     edi, [ebp+arg_0]
.text:00402A6D                 push    eax
.text:00402A6E                 push    edi
.text:00402A6F                 mov     esi, ecx
.text:00402A71                 call    sub_4019F0
.text:00402A76                 test    edi, edi
.text:00402A78                 jz      short loc_402AAB
.text:00402A78 get_ChooseWhichVersionToInstall endp ; sp-analysis failed
.text:00402A78
.text:00402A7A
.text:00402A7A ; =============== S U B R O U T I N E =======================================
.text:00402A7A
.text:00402A7A
.text:00402A7A get_CurrentlyInstalledVersion proc near
.text:00402A7A                 mov     ecx, [esi+1F8h]
.text:00402A80                 test    ecx, ecx
.text:00402A82                 jz      short loc_402A9A
.text:00402A84                 mov     eax, [esi+1FCh]
.text:00402A8A                 test    eax, eax
.text:00402A8C                 jz      short loc_402A9A
.text:00402A8E                 push    0
.text:00402A90                 push    0
.text:00402A92                 push    eax
.text:00402A93                 push    ecx
.text:00402A93 get_CurrentlyInstalledVersion endp ; sp-analysis failed
.text:00402A93
.text:00402A94
.text:00402A94 ; =============== S U B R O U T I N E =======================================
.text:00402A94
.text:00402A94
.text:00402A94 get_Downloading proc near
.text:00402A94                 call    ds:PostMessageA
.text:00402A9A
.text:00402A9A loc_402A9A:                             ; CODE XREF: get_CurrentlyInstalledVersion+8↑j
.text:00402A9A                                         ; get_CurrentlyInstalledVersion+12↑j
.text:00402A9A                 mov     esi, [esi+0A29Ch]
.text:00402AA0                 test    esi, esi
.text:00402AA2                 jz      short loc_402AAB
.text:00402AA4                 push    esi             ; hEvent
.text:00402AA5                 call    ds:SetEvent
.text:00402AAB
.text:00402AAB loc_402AAB:                             ; CODE XREF: get_ChooseWhichVersionToInstall+18↑j
.text:00402AAB                                         ; get_Downloading+E↑j
.text:00402AAB                 pop     edi
.text:00402AAC                 pop     esi
.text:00402AAD                 pop     ebp
.text:00402AAD get_Downloading endp ; sp-analysis failed
.text:00402AAD
.text:00402AAE
.text:00402AAE get_InstallingPackage:
.text:00402AAE                 retn    8
.text:00402AAE ; ---------------------------------------------------------------------------
.text:00402AB1                 align 10h
.text:00402AC0                 mov     edi, edi
.text:00402AC2                 push    ebp
.text:00402AC3                 mov     ebp, esp
.text:00402AC5                 push    ecx
.text:00402AC6                 push    esi
.text:00402AC6 ; ---------------------------------------------------------------------------
.text:00402AC7                 db 8Bh
.text:00402AC8
.text:00402AC8 ; =============== S U B R O U T I N E =======================================
.text:00402AC8
.text:00402AC8
.text:00402AC8 get_NotEnoughRightsForInstallation proc near
.text:00402AC8                 icebp
.text:00402AC9                 call    sub_401900
.text:00402ACE                 cmp     byte ptr [esi+178h], 0
.text:00402AD5                 jz      short loc_402AF8
.text:00402AD7                 cmp     dword ptr [esi+18h], 0
.text:00402ADB                 jnz     short loc_402AF8
.text:00402ADD                 mov     ecx, [esi+8]
.text:00402AE0                 push    4
.text:00402AE0 get_NotEnoughRightsForInstallation endp ; sp-analysis failed
.text:00402AE0
.text:00402AE2
.text:00402AE2 ; =============== S U B R O U T I N E =======================================
.text:00402AE2
.text:00402AE2
.text:00402AE2 ; int __thiscall CloseMobiFlightAndWait_b__26_0(SOCKET s)
.text:00402AE2 _CloseMobiFlightAndWait_b__26_0 proc near
.text:00402AE2                 lea     eax, [ebp-4]
.text:00402AE5                 push    eax             ; optval
.text:00402AE6                 push    1               ; optname
.text:00402AE8                 push    6               ; level
.text:00402AEA                 push    ecx             ; s
.text:00402AEB                 mov     dword ptr [ebp-4], 1
.text:00402AF2                 call    ds:setsockopt
.text:00402AF8
.text:00402AF8 loc_402AF8:                             ; CODE XREF: get_NotEnoughRightsForInstallation+D↑j
.text:00402AF8                                         ; get_NotEnoughRightsForInstallation+13↑j
.text:00402AF8                 mov     dword ptr [esi+0Ch], 2
.text:00402AFF                 pop     esi
.text:00402B00                 mov     esp, ebp
.text:00402B02                 pop     ebp
.text:00402B03                 retn
.text:00402B03 _CloseMobiFlightAndWait_b__26_0 endp ; sp-analysis failed
.text:00402B03
.text:00402B03 ; ---------------------------------------------------------------------------
.text:00402B04                 align 10h
.text:00402B10 ; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402B11                 align 10h
.text:00402B20
.text:00402B20 ; =============== S U B R O U T I N E =======================================
.text:00402B20
.text:00402B20 ; Attributes: bp-based frame
.text:00402B20
.text:00402B20 ; int __thiscall sub_402B20(PCSTR pNodeName, int, LPCSTR lpString1, int, int)
.text:00402B20 sub_402B20      proc near               ; CODE XREF: sub_402E80+177↓p
.text:00402B20                                         ; sub_402E80+268↓p ...
.text:00402B20
.text:00402B20 pHints          = ADDRINFOA ptr -54h
.text:00402B20 ppResult        = dword ptr -34h
.text:00402B20 var_2D          = byte ptr -2Dh
.text:00402B20 var_2C          = byte ptr -2Ch
.text:00402B20 lpFileName      = dword ptr -28h
.text:00402B20 var_18          = dword ptr -18h
.text:00402B20 var_14          = dword ptr -14h
.text:00402B20 var_10          = dword ptr -10h
.text:00402B20 var_C           = dword ptr -0Ch
.text:00402B20 var_4           = dword ptr -4
.text:00402B20 arg_0           = dword ptr  8
.text:00402B20 lpString1       = dword ptr  0Ch
.text:00402B20 arg_8           = dword ptr  10h
.text:00402B20 arg_C           = dword ptr  14h
.text:00402B20
.text:00402B20 ; FUNCTION CHUNK AT .text:00408EA0 SIZE 0000002E BYTES
.text:00402B20
.text:00402B20 ; __unwind { // SEH_402B20
.text:00402B20                 mov     edi, edi
.text:00402B22                 push    ebp
.text:00402B23                 mov     ebp, esp
.text:00402B25                 push    0FFFFFFFFh
.text:00402B27                 push    offset SEH_402B20
.text:00402B2C                 mov     eax, large fs:0
.text:00402B32                 push    eax
.text:00402B33                 sub     esp, 4Ch
.text:00402B36                 mov     eax, ___security_cookie
.text:00402B3B                 xor     eax, ebp
.text:00402B3D                 mov     [ebp+var_10], eax
.text:00402B40                 push    ebx
.text:00402B41                 push    esi
.text:00402B42                 push    edi
.text:00402B43                 push    eax
.text:00402B44                 lea     eax, [ebp+var_C]
.text:00402B47                 mov     large fs:0, eax
.text:00402B4D                 mov     edi, [ebp+lpString1]
.text:00402B50                 mov     esi, edx
.text:00402B52                 mov     eax, [esi+18h]
.text:00402B55                 xor     edx, edx
.text:00402B57                 sub     eax, edx
.text:00402B59                 mov     bl, 1
.text:00402B5B                 mov     [ebp+var_2D], bl
.text:00402B5E                 jz      loc_402CEE
.text:00402B64                 sub     eax, 1
.text:00402B67                 jnz     loc_402DB3
.text:00402B6D                 mov     [ebp+ppResult], ecx
.text:00402B70                 push    ecx
.text:00402B71                 lea     ecx, [ebp+var_2C]
.text:00402B74                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:00402B7A                 lea     eax, [ebp+var_2C]
.text:00402B7D                 push    (offset loc_40132F+4)
.text:00402B82                 push    eax
.text:00402B83 ;   try {
.text:00402B83                 mov     [ebp+var_4], 0
.text:00402B8A                 call    ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:00402B90                 add     esp, 8
.text:00402B93                 test    al, al
.text:00402B95                 jz      short loc_402BAC
.text:00402B97                 push    offset dword_4012B0
.text:00402B9C                 lea     ecx, [ebp+var_2C]
.text:00402B9F                 mov     [ebp+ppResult], offset dword_4012B0
.text:00402BA6                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00402BAC
.text:00402BAC loc_402BAC:                             ; CODE XREF: sub_402B20+75↑j
.text:00402BAC                 push    (offset loc_40132F+4) ; lpString2
.text:00402BB1                 push    edi             ; lpString1
.text:00402BB2                 call    ds:lstrcmpiA
.text:00402BB8                 test    eax, eax
.text:00402BBA                 jnz     short loc_402BEF
.text:00402BBC                 mov     ecx, [ebp+var_18]
.text:00402BBF                 add     ecx, 30h ; '0'
.text:00402BC2                 push    ecx
.text:00402BC3                 lea     ecx, [ebp+var_2C]
.text:00402BC6                 call    ds:?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(uint)
.text:00402BCC                 mov     edx, [ebp+ppResult]
.text:00402BCF                 push    edx
.text:00402BD0                 push    offset dword_401260
.text:00402BD5                 push    0
.text:00402BD7                 lea     ecx, [ebp+var_2C]
.text:00402BDA                 call    ds:?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::at(uint)
.text:00402BE0                 mov     edi, eax
.text:00402BE2                 mov     eax, [ebp+var_14]
.text:00402BE5                 call    sub_402510
.text:00402BEA                 add     esp, 8
.text:00402BED                 jmp     short loc_402C41
.text:00402BEF ; ---------------------------------------------------------------------------
.text:00402BEF
.text:00402BEF loc_402BEF:                             ; CODE XREF: sub_402B20+9A↑j
.text:00402BEF                 mov     eax, edi
.text:00402BF1                 lea     edx, [eax+1]
.text:00402BF4
.text:00402BF4 loc_402BF4:                             ; CODE XREF: sub_402B20+DB↓j
.text:00402BF4                 mov     cl, [eax]
.text:00402BF6                 add     eax, 1
.text:00402BF9                 test    cl, cl
.text:00402BFB                 jnz     short loc_402BF4
.text:00402BFD                 mov     ecx, [ebp+var_18]
.text:00402C00                 sub     eax, edx
.text:00402C02                 lea     edx, [eax+ecx+0Dh]
.text:00402C06                 push    edx
.text:00402C07                 lea     ecx, [ebp+var_2C]
.text:00402C0A                 call    ds:?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::reserve(uint)
.text:00402C10                 mov     ebx, [ebp+var_14]
.text:00402C13                 cmp     ebx, 100h
.text:00402C19                 jb      short loc_402C20
.text:00402C1B                 mov     ebx, 100h
.text:00402C20
.text:00402C20 loc_402C20:                             ; CODE XREF: sub_402B20+F9↑j
.text:00402C20                 mov     eax, [ebp+ppResult]
.text:00402C23                 push    edi
.text:00402C24                 push    eax
.text:00402C25                 push    (offset loc_40128D+3)
.text:00402C2A                 push    0
.text:00402C2C                 lea     ecx, [ebp+var_2C]
.text:00402C2F                 call    ds:?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::at(uint)
.text:00402C35                 mov     edi, eax
.text:00402C37                 mov     eax, ebx
.text:00402C39                 call    sub_402510
.text:00402C3E                 add     esp, 0Ch
.text:00402C41
.text:00402C41 loc_402C41:                             ; CODE XREF: sub_402B20+CD↑j
.text:00402C41                 mov     ebx, ds:CreateFileA
.text:00402C47
.text:00402C47 loc_402C47:                             ; CODE XREF: sub_402B20+176↓j
.text:00402C47                 cmp     [ebp+var_14], 10h
.text:00402C4B                 mov     eax, [ebp+lpFileName]
.text:00402C4E                 jnb     short loc_402C53
.text:00402C50                 lea     eax, [ebp+lpFileName]
.text:00402C53
.text:00402C53 loc_402C53:                             ; CODE XREF: sub_402B20+12E↑j
.text:00402C53                 push    0               ; hTemplateFile
.text:00402C55                 push    40000000h       ; dwFlagsAndAttributes
.text:00402C5A                 push    3               ; dwCreationDisposition
.text:00402C5C                 push    0               ; lpSecurityAttributes
.text:00402C5E                 push    0               ; dwShareMode
.text:00402C60                 push    0C0000000h      ; dwDesiredAccess
.text:00402C65                 push    eax             ; lpFileName
.text:00402C66                 call    ebx ; CreateFileA
.text:00402C68                 mov     edi, eax
.text:00402C6A                 cmp     edi, 0FFFFFFFFh
.text:00402C6D                 jnz     short loc_402C9A
.text:00402C6F                 call    ds:GetLastError
.text:00402C75                 cmp     eax, 0E7h
.text:00402C7A                 jnz     short loc_402CD6
.text:00402C7C                 cmp     [ebp+var_14], 10h
.text:00402C80                 mov     eax, [ebp+lpFileName]
.text:00402C83                 jnb     short loc_402C88
.text:00402C85                 lea     eax, [ebp+lpFileName]
.text:00402C88
.text:00402C88 loc_402C88:                             ; CODE XREF: sub_402B20+163↑j
.text:00402C88                 push    1388h           ; nTimeOut
.text:00402C8D                 push    eax             ; lpNamedPipeName
.text:00402C8E                 call    ds:WaitNamedPipeA
.text:00402C94                 test    eax, eax
.text:00402C96                 jnz     short loc_402C47
.text:00402C98                 jmp     short loc_402CD6
.text:00402C9A ; ---------------------------------------------------------------------------
.text:00402C9A
.text:00402C9A loc_402C9A:                             ; CODE XREF: sub_402B20+14D↑j
.text:00402C9A                 push    0               ; Flags
.text:00402C9C                 push    offset Function ; Function
.text:00402CA1                 push    edi             ; FileHandle
.text:00402CA2                 call    ds:BindIoCompletionCallback
.text:00402CA8                 test    eax, eax
.text:00402CAA                 jz      short loc_402CD0
.text:00402CAC                 mov     ecx, [ebp+arg_C]
.text:00402CAF                 mov     edx, [ebp+arg_8]
.text:00402CB2                 push    ecx
.text:00402CB3                 push    edx
.text:00402CB4                 push    edi
.text:00402CB5                 xor     edx, edx
.text:00402CB7                 call    loc_401760
.text:00402CBC                 mov     eax, [esi]
.text:00402CBE                 mov     edx, [eax+4]
.text:00402CC1                 mov     ecx, esi
.text:00402CC3                 call    edx
.text:00402CC5                 call    sub_401EA0
.text:00402CCA                 mov     [ebp+var_2D], 0
.text:00402CCE                 jmp     short loc_402CD6
.text:00402CD0 ; ---------------------------------------------------------------------------
.text:00402CD0
.text:00402CD0 loc_402CD0:                             ; CODE XREF: sub_402B20+18A↑j
.text:00402CD0                 call    ds:GetLastError
.text:00402CD6
.text:00402CD6 loc_402CD6:                             ; CODE XREF: sub_402B20+15A↑j
.text:00402CD6                                         ; sub_402B20+178↑j ...
.text:00402CD6                 lea     ecx, [ebp+var_2C]
.text:00402CD6 ;   } // starts at 402B83
.text:00402CD9                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00402CE0                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00402CE6                 mov     al, [ebp+var_2D]
.text:00402CE9                 jmp     loc_402DB5
.text:00402CEE ; ---------------------------------------------------------------------------
.text:00402CEE
.text:00402CEE loc_402CEE:                             ; CODE XREF: sub_402B20+3E↑j
.text:00402CEE                 xor     eax, eax
.text:00402CF0                 mov     [ebp+pHints.ai_family], eax
.text:00402CF3                 mov     [ebp+pHints.ai_socktype], eax
.text:00402CF6                 mov     [ebp+pHints.ai_protocol], eax
.text:00402CF9                 mov     [ebp+pHints.ai_addrlen], eax
.text:00402CFC                 mov     [ebp+pHints.ai_canonname], eax
.text:00402CFF                 mov     [ebp+pHints.ai_addr], eax
.text:00402D02                 mov     [ebp+pHints.ai_next], eax
.text:00402D05                 mov     eax, [ebp+arg_0]
.text:00402D08                 mov     [ebp+pHints.ai_flags], edx
.text:00402D0B                 mov     [ebp+ppResult], edx
.text:00402D0E                 lea     edx, [ebp+ppResult]
.text:00402D11                 push    edx             ; ppResult
.text:00402D12                 mov     [ebp+pHints.ai_family], eax
.text:00402D15                 lea     eax, [ebp+pHints]
.text:00402D18                 push    eax             ; pHints
.text:00402D19                 push    edi             ; pServiceName
.text:00402D1A                 push    ecx             ; pNodeName
.text:00402D1B                 mov     [ebp+pHints.ai_socktype], 1
.text:00402D22                 mov     [ebp+pHints.ai_protocol], 6
.text:00402D29                 call    ds:getaddrinfo
.text:00402D2F                 test    eax, eax
.text:00402D31                 jnz     loc_402DB3
.text:00402D37                 mov     eax, [ebp+ppResult]
.text:00402D3A                 test    eax, eax
.text:00402D3C                 jz      short loc_402DB3
.text:00402D3E                 mov     ecx, [eax+0Ch]
.text:00402D41                 mov     edx, [eax+8]
.text:00402D44                 mov     eax, [eax+4]
.text:00402D47                 push    ecx             ; protocol
.text:00402D48                 push    edx             ; type
.text:00402D49                 push    eax             ; af
.text:00402D4A                 call    ds:socket
.text:00402D50                 mov     edi, eax
.text:00402D52                 cmp     edi, 0FFFFFFFFh
.text:00402D55                 jz      short loc_402DA9
.text:00402D57                 mov     eax, [ebp+ppResult]
.text:00402D5A                 mov     ecx, [eax+10h]
.text:00402D5D                 mov     edx, [eax+18h]
.text:00402D60                 push    ecx             ; namelen
.text:00402D61                 push    edx             ; name
.text:00402D62                 push    edi             ; s
.text:00402D63                 call    ds:connect
.text:00402D69                 cmp     eax, 0FFFFFFFFh
.text:00402D6C                 jz      short loc_402DA9
.text:00402D6E                 push    0               ; Flags
.text:00402D70                 push    offset Function ; Function
.text:00402D75                 push    edi             ; FileHandle
.text:00402D76                 call    ds:BindIoCompletionCallback
.text:00402D7C                 test    eax, eax
.text:00402D7E                 jz      short loc_402DA9
.text:00402D80                 mov     eax, [ebp+arg_C]
.text:00402D83                 mov     ecx, [ebp+arg_8]
.text:00402D86                 mov     edx, [ebp+ppResult]
.text:00402D89                 mov     edx, [edx+4]
.text:00402D8C                 push    eax
.text:00402D8D                 push    ecx
.text:00402D8E                 push    edi
.text:00402D8F                 call    loc_401760
.text:00402D94                 mov     eax, [esi]
.text:00402D96                 mov     edx, [eax+4]
.text:00402D99                 mov     ecx, esi
.text:00402D9B                 call    edx
.text:00402D9D                 call    sub_401EA0
.text:00402DA2                 mov     [ebp+var_2D], 0
.text:00402DA6                 mov     bl, [ebp+var_2D]
.text:00402DA9
.text:00402DA9 loc_402DA9:                             ; CODE XREF: sub_402B20+235↑j
.text:00402DA9                                         ; sub_402B20+24C↑j ...
.text:00402DA9                 mov     eax, [ebp+ppResult]
.text:00402DAC                 push    eax             ; pAddrInfo
.text:00402DAD                 call    ds:freeaddrinfo
.text:00402DB3
.text:00402DB3 loc_402DB3:                             ; CODE XREF: sub_402B20+47↑j
.text:00402DB3                                         ; sub_402B20+211↑j ...
.text:00402DB3                 mov     al, bl
.text:00402DB5
.text:00402DB5 loc_402DB5:                             ; CODE XREF: sub_402B20+1C9↑j
.text:00402DB5                 mov     ecx, [ebp+var_C]
.text:00402DB8                 mov     large fs:0, ecx
.text:00402DBF                 pop     ecx
.text:00402DC0                 pop     edi
.text:00402DC1                 pop     esi
.text:00402DC2                 pop     ebx
.text:00402DC3                 mov     ecx, [ebp+var_10]
.text:00402DC6                 xor     ecx, ebp        ; StackCookie
.text:00402DC8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402DCD                 mov     esp, ebp
.text:00402DCF                 pop     ebp
.text:00402DD0                 retn    10h
.text:00402DD0 ; } // starts at 402B20
.text:00402DD0 sub_402B20      endp
.text:00402DD0
.text:00402DD0 ; ---------------------------------------------------------------------------
.text:00402DD3                 align 10h
.text:00402DE0
.text:00402DE0 ; =============== S U B R O U T I N E =======================================
.text:00402DE0
.text:00402DE0
.text:00402DE0 sub_402DE0      proc near               ; CODE XREF: sub_403C30+8D↓p
.text:00402DE0                                         ; sub_403C30+D2↓p
.text:00402DE0                 mov     ecx, 1
.text:00402DE5                 add     [eax+0A298h], ecx
.text:00402DEB                 jnz     short loc_402DF3
.text:00402DED                 mov     [eax+0A298h], ecx
.text:00402DF3
.text:00402DF3 loc_402DF3:                             ; CODE XREF: sub_402DE0+B↑j
.text:00402DF3                 mov     eax, [eax+0A298h]
.text:00402DF9                 retn
.text:00402DF9 sub_402DE0      endp
.text:00402DF9
.text:00402DF9 ; ---------------------------------------------------------------------------
.text:00402DFA                 align 10h
.text:00402E00
.text:00402E00 ; =============== S U B R O U T I N E =======================================
.text:00402E00
.text:00402E00 ; Attributes: bp-based frame
.text:00402E00
.text:00402E00 sub_402E00      proc near               ; CODE XREF: sub_402E80:loc_403067↓p
.text:00402E00                                         ; sub_402E80:loc_403143↓p
.text:00402E00
.text:00402E00 WSAData         = WSAData ptr -198h
.text:00402E00 var_4           = dword ptr -4
.text:00402E00
.text:00402E00                 mov     edi, edi
.text:00402E02                 push    ebp
.text:00402E03                 mov     ebp, esp
.text:00402E05                 sub     esp, 198h
.text:00402E0B                 mov     eax, ___security_cookie
.text:00402E10                 xor     eax, ebp
.text:00402E12                 mov     [ebp+var_4], eax
.text:00402E15                 mov     al, byte_40B40C
.text:00402E1A                 test    al, al
.text:00402E1C                 jnz     short loc_402E6A
.text:00402E1E                 push    18Eh            ; Size
.text:00402E23                 lea     eax, [ebp+WSAData.wHighVersion]
.text:00402E29                 push    0               ; Val
.text:00402E2B                 push    eax             ; void *
.text:00402E2C                 mov     [ebp+WSAData.wVersion], 0
.text:00402E35                 call    memset
.text:00402E3A                 add     esp, 0Ch
.text:00402E3D                 lea     ecx, [ebp+WSAData]
.text:00402E43                 push    ecx             ; lpWSAData
.text:00402E44                 push    2               ; wVersionRequested
.text:00402E46                 call    ds:WSAStartup
.text:00402E4C                 test    eax, eax
.text:00402E4E                 jnz     short loc_402E65
.text:00402E50                 mov     al, 1
.text:00402E52                 mov     byte_40B40C, al
.text:00402E57                 mov     ecx, [ebp+var_4]
.text:00402E5A                 xor     ecx, ebp        ; StackCookie
.text:00402E5C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402E61                 mov     esp, ebp
.text:00402E63                 pop     ebp
.text:00402E64                 retn
.text:00402E65 ; ---------------------------------------------------------------------------
.text:00402E65
.text:00402E65 loc_402E65:                             ; CODE XREF: sub_402E00+4E↑j
.text:00402E65                 mov     al, byte_40B40C
.text:00402E6A
.text:00402E6A loc_402E6A:                             ; CODE XREF: sub_402E00+1C↑j
.text:00402E6A                 mov     ecx, [ebp+var_4]
.text:00402E6D                 xor     ecx, ebp        ; StackCookie
.text:00402E6F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00402E74                 mov     esp, ebp
.text:00402E76                 pop     ebp
.text:00402E77                 retn
.text:00402E77 sub_402E00      endp
.text:00402E77
.text:00402E77 ; ---------------------------------------------------------------------------
.text:00402E78                 align 10h
.text:00402E80
.text:00402E80 ; =============== S U B R O U T I N E =======================================
.text:00402E80
.text:00402E80 ; Attributes: bp-based frame fuzzy-sp
.text:00402E80
.text:00402E80 sub_402E80      proc near               ; CODE XREF: SimConnect_Open+14↓p
.text:00402E80                                         ; DATA XREF: sub_402E80+8F↓o
.text:00402E80
.text:00402E80 var_6C          = dword ptr -6Ch
.text:00402E80 var_68          = dword ptr -68h
.text:00402E80 var_64          = dword ptr -64h
.text:00402E80 var_60          = dword ptr -60h
.text:00402E80 var_5C          = dword ptr -5Ch
.text:00402E80 var_58          = dword ptr -58h
.text:00402E80 phModule        = dword ptr -54h
.text:00402E80 dwProcessId     = dword ptr -50h
.text:00402E80 var_4C          = dword ptr -4Ch
.text:00402E80 pNodeName       = byte ptr -48h
.text:00402E80 var_34          = byte ptr -34h
.text:00402E80 var_30          = dword ptr -30h
.text:00402E80 lpString1       = dword ptr -2Ch
.text:00402E80 var_18          = dword ptr -18h
.text:00402E80 var_14          = dword ptr -14h
.text:00402E80 var_C           = byte ptr -0Ch
.text:00402E80 var_4           = dword ptr -4
.text:00402E80 arg_0           = dword ptr  8
.text:00402E80 arg_4           = dword ptr  0Ch
.text:00402E80
.text:00402E80 ; FUNCTION CHUNK AT .text:00408EE0 SIZE 00000066 BYTES
.text:00402E80
.text:00402E80 ; __unwind { // SEH_402E80
.text:00402E80                 mov     edi, edi
.text:00402E82                 push    ebp
.text:00402E83                 mov     ebp, esp
.text:00402E85                 and     esp, 0FFFFFFF8h
.text:00402E88                 push    0FFFFFFFFh
.text:00402E8A                 push    offset SEH_402E80
.text:00402E8F                 mov     eax, large fs:0
.text:00402E95                 push    eax
.text:00402E96                 sub     esp, 60h
.text:00402E99                 mov     eax, ___security_cookie
.text:00402E9E                 xor     eax, esp
.text:00402EA0                 mov     [esp+6Ch+var_14], eax
.text:00402EA4                 push    ebx
.text:00402EA5                 push    esi
.text:00402EA6                 push    edi
.text:00402EA7                 mov     eax, ___security_cookie
.text:00402EAC                 xor     eax, esp
.text:00402EAE                 push    eax
.text:00402EAF                 lea     eax, [esp+7Ch+var_C]
.text:00402EB3                 mov     large fs:0, eax
.text:00402EB9                 mov     eax, [ebp+arg_0]
.text:00402EBC                 mov     edi, [ebp+arg_4]
.text:00402EBF                 xor     ebx, ebx
.text:00402EC1                 mov     [esp+7Ch+var_64], eax
.text:00402EC5                 mov     [eax], ebx
.text:00402EC7                 mov     [esp+7Ch+var_6C], 1
.text:00402ECF                 call    sub_403AC0
.text:00402ED4                 cmp     eax, ebx
.text:00402ED6                 jnz     loc_4032FF
.text:00402EDC                 push    ebx             ; lpWindowName
.text:00402EDD                 push    (offset loc_40132F+5) ; lpClassName
.text:00402EE2                 mov     [esp+84h+var_60], ebx
.text:00402EE6                 call    ds:FindWindowA
.text:00402EEC                 mov     esi, eax
.text:00402EEE                 cmp     esi, ebx
.text:00402EF0                 jz      short loc_402F3A
.text:00402EF2                 lea     eax, [esp+7Ch+dwProcessId]
.text:00402EF6                 push    eax             ; lpdwProcessId
.text:00402EF7                 push    esi             ; hWnd
.text:00402EF8                 call    ds:GetWindowThreadProcessId
.text:00402EFE                 call    ds:GetCurrentProcessId
.text:00402F04                 cmp     [esp+7Ch+dwProcessId], eax
.text:00402F08                 jnz     short loc_402F3A
.text:00402F0A                 lea     ecx, [esp+7Ch+phModule]
.text:00402F0E                 push    ecx             ; phModule
.text:00402F0F                 push    offset sub_402E80 ; lpModuleName
.text:00402F14                 push    4               ; dwFlags
.text:00402F16                 call    ds:GetModuleHandleExA
.text:00402F1C                 test    eax, eax
.text:00402F1E                 jz      short loc_402F3A
.text:00402F20                 mov     edx, [esp+7Ch+phModule]
.text:00402F24                 push    edx             ; lParam
.text:00402F25                 push    2002Ah          ; wParam
.text:00402F2A                 push    111h            ; Msg
.text:00402F2F                 push    esi             ; hWnd
.text:00402F30                 call    ds:PostMessageA
.text:00402F36                 mov     [esp+7Ch+var_60], esi
.text:00402F3A
.text:00402F3A loc_402F3A:                             ; CODE XREF: sub_402E80+70↑j
.text:00402F3A                                         ; sub_402E80+88↑j ...
.text:00402F3A                 call    loc_402290
.text:00402F3F                 lea     ecx, [esp+7Ch+var_4C]
.text:00402F43                 mov     byte_40B40D, al
.text:00402F48                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00402F4E                 push    (offset loc_40132F+4)
.text:00402F53                 lea     ecx, [esp+80h+var_30]
.text:00402F57                 mov     [esp+80h+var_4], ebx
.text:00402F5B                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:00402F61                 lea     eax, [esp+7Ch+var_58]
.text:00402F65                 mov     byte ptr [esp+7Ch+var_4], 1
.text:00402F6A                 push    eax
.text:00402F6B                 mov     byte ptr [esp+80h+var_5C], bl
.text:00402F6F                 push    edi
.text:00402F70                 lea     ecx, [esp+84h+var_5C]
.text:00402F74                 lea     ebx, [esp+84h+var_30]
.text:00402F78                 lea     edi, [esp+84h+var_4C]
.text:00402F7C                 lea     esi, [esp+84h+var_68]
.text:00402F80                 mov     [esp+84h+var_58], 0A080h
.text:00402F88                 call    sub_403850
.text:00402F8D                 mov     eax, [esp+7Ch+var_68]
.text:00402F91                 cmp     eax, 1
.text:00402F94                 mov     edi, [esp+7Ch+var_58]
.text:00402F98                 mov     ebx, [esp+7Ch+var_5C]
.text:00402F9C                 jnz     loc_40305E
.text:00402FA2                 push    0A2F4h          ; unsigned int
.text:00402FA7                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00402FAC                 add     esp, 4
.text:00402FAF                 mov     [esp+7Ch+var_68], eax
.text:00402FB3                 test    eax, eax
.text:00402FB5                 mov     byte ptr [esp+7Ch+var_4], 2
.text:00402FBA                 jz      short loc_402FC8
.text:00402FBC                 push    1
.text:00402FBE                 push    eax
.text:00402FBF                 call    loc_4025D0
.text:00402FC4                 mov     esi, eax
.text:00402FC6                 jmp     short loc_402FCA
.text:00402FC8 ; ---------------------------------------------------------------------------
.text:00402FC8
.text:00402FC8 loc_402FC8:                             ; CODE XREF: sub_402E80+13A↑j
.text:00402FC8                 xor     esi, esi
.text:00402FCA
.text:00402FCA loc_402FCA:                             ; CODE XREF: sub_402E80+146↑j
.text:00402FCA                 mov     byte ptr [esp+7Ch+var_4], 1
.text:00402FCF                 mov     eax, [esp+7Ch+lpString1]
.text:00402FD3                 mov     ecx, 10h
.text:00402FD8                 cmp     [esp+7Ch+var_18], ecx
.text:00402FDC                 jnb     short loc_402FE2
.text:00402FDE                 lea     eax, [esp+7Ch+lpString1]
.text:00402FE2
.text:00402FE2 loc_402FE2:                             ; CODE XREF: sub_402E80+15C↑j
.text:00402FE2                 cmp     dword ptr [esp+7Ch+var_34], ecx
.text:00402FE6                 mov     ecx, dword ptr [esp+7Ch+pNodeName]
.text:00402FEA                 jnb     short loc_402FF0
.text:00402FEC                 lea     ecx, [esp+7Ch+pNodeName] ; pNodeName
.text:00402FF0
.text:00402FF0 loc_402FF0:                             ; CODE XREF: sub_402E80+16A↑j
.text:00402FF0                 push    ebx             ; int
.text:00402FF1                 push    edi             ; int
.text:00402FF2                 push    eax             ; lpString1
.text:00402FF3                 push    0               ; int
.text:00402FF5                 mov     edx, esi
.text:00402FF7                 call    sub_402B20
.text:00402FFC                 test    al, al
.text:00402FFE                 jz      short loc_403053
.text:00403000                 mov     eax, esi
.text:00403002                 call    sub_403330
.text:00403007                 mov     esi, ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:0040300D                 lea     ecx, [esp+7Ch+var_4C]
.text:00403011                 push    (offset loc_40132F+4)
.text:00403016                 push    ecx
.text:00403017                 call    esi ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *) ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:00403019                 add     esp, 8
.text:0040301C                 test    al, al
.text:0040301E                 jnz     short loc_403037
.text:00403020                 lea     edx, [esp+7Ch+var_4C]
.text:00403024                 push    offset dword_4012B0
.text:00403029                 push    edx
.text:0040302A                 call    esi ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *) ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:0040302C                 add     esp, 8
.text:0040302F                 test    al, al
.text:00403031                 jz      loc_40327D
.text:00403037
.text:00403037 loc_403037:                             ; CODE XREF: sub_402E80+19E↑j
.text:00403037                 push    offset dword_4012AC
.text:0040303C                 lea     ecx, [esp+80h+var_4C]
.text:00403040                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403046                 push    1
.text:00403048                 lea     esi, [esp+80h+var_30]
.text:0040304C                 call    sub_4033E0
.text:00403051                 jmp     short loc_403067
.text:00403053 ; ---------------------------------------------------------------------------
.text:00403053
.text:00403053 loc_403053:                             ; CODE XREF: sub_402E80+17E↑j
.text:00403053                 mov     eax, [esp+7Ch+var_64]
.text:00403057                 mov     [eax], esi
.text:00403059                 jmp     loc_4032AB
.text:0040305E ; ---------------------------------------------------------------------------
.text:0040305E
.text:0040305E loc_40305E:                             ; CODE XREF: sub_402E80+11C↑j
.text:0040305E                 cmp     eax, 17h
.text:00403061                 jnz     loc_40313A
.text:00403067
.text:00403067 loc_403067:                             ; CODE XREF: sub_402E80+1D1↑j
.text:00403067                 call    sub_402E00
.text:0040306C                 test    al, al
.text:0040306E                 jz      loc_4032DA
.text:00403074                 push    0A2F4h          ; unsigned int
.text:00403079                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0040307E                 add     esp, 4
.text:00403081                 mov     [esp+7Ch+var_68], eax
.text:00403085                 test    eax, eax
.text:00403087                 mov     byte ptr [esp+7Ch+var_4], 3
.text:0040308C                 jz      short loc_40309A
.text:0040308E                 push    0
.text:00403090                 push    eax
.text:00403091                 call    loc_4025D0
.text:00403096                 mov     esi, eax
.text:00403098                 jmp     short loc_40309C
.text:0040309A ; ---------------------------------------------------------------------------
.text:0040309A
.text:0040309A loc_40309A:                             ; CODE XREF: sub_402E80+20C↑j
.text:0040309A                 xor     esi, esi
.text:0040309C
.text:0040309C loc_40309C:                             ; CODE XREF: sub_402E80+218↑j
.text:0040309C                 test    esi, esi
.text:0040309E                 mov     byte ptr [esp+7Ch+var_4], 1
.text:004030A3                 jz      loc_4032DA
.text:004030A9                 lea     ecx, [esp+7Ch+var_30]
.text:004030AD                 push    (offset loc_40132F+4)
.text:004030B2                 push    ecx
.text:004030B3                 call    ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:004030B9                 add     esp, 8
.text:004030BC                 test    al, al
.text:004030BE                 jnz     short loc_4030FC
.text:004030C0                 mov     eax, [esp+7Ch+lpString1]
.text:004030C4                 mov     ecx, 10h
.text:004030C9                 cmp     [esp+7Ch+var_18], ecx
.text:004030CD                 jnb     short loc_4030D3
.text:004030CF                 lea     eax, [esp+7Ch+lpString1]
.text:004030D3
.text:004030D3 loc_4030D3:                             ; CODE XREF: sub_402E80+24D↑j
.text:004030D3                 cmp     dword ptr [esp+7Ch+var_34], ecx
.text:004030D7                 mov     ecx, dword ptr [esp+7Ch+pNodeName]
.text:004030DB                 jnb     short loc_4030E1
.text:004030DD                 lea     ecx, [esp+7Ch+pNodeName] ; pNodeName
.text:004030E1
.text:004030E1 loc_4030E1:                             ; CODE XREF: sub_402E80+25B↑j
.text:004030E1                 push    ebx             ; int
.text:004030E2                 push    edi             ; int
.text:004030E3                 push    eax             ; lpString1
.text:004030E4                 push    17h             ; int
.text:004030E6                 mov     edx, esi
.text:004030E8                 call    sub_402B20
.text:004030ED                 test    al, al
.text:004030EF                 jnz     short loc_4030FC
.text:004030F1                 mov     edx, [esp+7Ch+var_64]
.text:004030F5                 mov     [edx], esi
.text:004030F7                 jmp     loc_4032AB
.text:004030FC ; ---------------------------------------------------------------------------
.text:004030FC
.text:004030FC loc_4030FC:                             ; CODE XREF: sub_402E80+23E↑j
.text:004030FC                                         ; sub_402E80+26F↑j
.text:004030FC                 mov     eax, esi
.text:004030FE                 call    sub_403330
.text:00403103                 lea     eax, [esp+7Ch+var_4C]
.text:00403107                 push    offset dword_4012AC
.text:0040310C                 push    eax
.text:0040310D                 call    ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:00403113                 add     esp, 8
.text:00403116                 test    al, al
.text:00403118                 jz      loc_40327D
.text:0040311E                 push    (offset loc_40129F+1)
.text:00403123                 lea     ecx, [esp+80h+var_4C]
.text:00403127                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:0040312D                 push    0
.text:0040312F                 lea     esi, [esp+80h+var_30]
.text:00403133                 call    sub_4033E0
.text:00403138                 jmp     short loc_403143
.text:0040313A ; ---------------------------------------------------------------------------
.text:0040313A
.text:0040313A loc_40313A:                             ; CODE XREF: sub_402E80+1E1↑j
.text:0040313A                 cmp     eax, 2
.text:0040313D                 jnz     loc_4032DA
.text:00403143
.text:00403143 loc_403143:                             ; CODE XREF: sub_402E80+2B8↑j
.text:00403143                 call    sub_402E00
.text:00403148                 test    al, al
.text:0040314A                 jz      loc_4032DA
.text:00403150                 push    0A2F4h          ; unsigned int
.text:00403155                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0040315A                 add     esp, 4
.text:0040315D                 mov     [esp+7Ch+var_68], eax
.text:00403161                 test    eax, eax
.text:00403163                 mov     byte ptr [esp+7Ch+var_4], 4
.text:00403168                 jz      short loc_403176
.text:0040316A                 push    0
.text:0040316C                 push    eax
.text:0040316D                 call    loc_4025D0
.text:00403172                 mov     esi, eax
.text:00403174                 jmp     short loc_403178
.text:00403176 ; ---------------------------------------------------------------------------
.text:00403176
.text:00403176 loc_403176:                             ; CODE XREF: sub_402E80+2E8↑j
.text:00403176                 xor     esi, esi
.text:00403178
.text:00403178 loc_403178:                             ; CODE XREF: sub_402E80+2F4↑j
.text:00403178                 test    esi, esi
.text:0040317A                 mov     byte ptr [esp+7Ch+var_4], 1
.text:0040317F                 jz      loc_4032DA
.text:00403185                 lea     ecx, [esp+7Ch+var_30]
.text:00403189                 push    (offset loc_40132F+4)
.text:0040318E                 push    ecx
.text:0040318F                 call    ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:00403195                 add     esp, 8
.text:00403198                 test    al, al
.text:0040319A                 jnz     short loc_4031D8
.text:0040319C                 mov     eax, [esp+7Ch+lpString1]
.text:004031A0                 mov     ecx, 10h
.text:004031A5                 cmp     [esp+7Ch+var_18], ecx
.text:004031A9                 jnb     short loc_4031AF
.text:004031AB                 lea     eax, [esp+7Ch+lpString1]
.text:004031AF
.text:004031AF loc_4031AF:                             ; CODE XREF: sub_402E80+329↑j
.text:004031AF                 cmp     dword ptr [esp+7Ch+var_34], ecx
.text:004031B3                 mov     ecx, dword ptr [esp+7Ch+pNodeName]
.text:004031B7                 jnb     short loc_4031BD
.text:004031B9                 lea     ecx, [esp+7Ch+pNodeName] ; pNodeName
.text:004031BD
.text:004031BD loc_4031BD:                             ; CODE XREF: sub_402E80+337↑j
.text:004031BD                 push    ebx             ; int
.text:004031BE                 push    edi             ; int
.text:004031BF                 push    eax             ; lpString1
.text:004031C0                 push    2               ; int
.text:004031C2                 mov     edx, esi
.text:004031C4                 call    sub_402B20
.text:004031C9                 test    al, al
.text:004031CB                 jnz     short loc_4031D8
.text:004031CD                 mov     edx, [esp+7Ch+var_64]
.text:004031D1                 mov     [edx], esi
.text:004031D3                 jmp     loc_4032AB
.text:004031D8 ; ---------------------------------------------------------------------------
.text:004031D8
.text:004031D8 loc_4031D8:                             ; CODE XREF: sub_402E80+31A↑j
.text:004031D8                                         ; sub_402E80+34B↑j
.text:004031D8                 mov     eax, esi
.text:004031DA                 call    sub_403330
.text:004031DF                 lea     eax, [esp+7Ch+var_4C]
.text:004031E3                 push    (offset loc_40129F+1)
.text:004031E8                 push    eax
.text:004031E9                 call    ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:004031EF                 add     esp, 8
.text:004031F2                 test    al, al
.text:004031F4                 jz      loc_40327D
.text:004031FA                 push    offset dword_4012B0
.text:004031FF                 lea     ecx, [esp+80h+var_4C]
.text:00403203                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403209                 push    (offset loc_40132F+4)
.text:0040320E                 lea     ecx, [esp+80h+var_30]
.text:00403212                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403218                 push    0A2F4h          ; unsigned int
.text:0040321D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00403222                 add     esp, 4
.text:00403225                 mov     [esp+7Ch+var_68], eax
.text:00403229                 test    eax, eax
.text:0040322B                 mov     byte ptr [esp+7Ch+var_4], 5
.text:00403230                 jz      short loc_40323E
.text:00403232                 push    1
.text:00403234                 push    eax
.text:00403235                 call    loc_4025D0
.text:0040323A                 mov     esi, eax
.text:0040323C                 jmp     short loc_403240
.text:0040323E ; ---------------------------------------------------------------------------
.text:0040323E
.text:0040323E loc_40323E:                             ; CODE XREF: sub_402E80+3B0↑j
.text:0040323E                 xor     esi, esi
.text:00403240
.text:00403240 loc_403240:                             ; CODE XREF: sub_402E80+3BC↑j
.text:00403240                 mov     byte ptr [esp+7Ch+var_4], 1
.text:00403245                 mov     eax, [esp+7Ch+lpString1]
.text:00403249                 mov     ecx, 10h
.text:0040324E                 cmp     [esp+7Ch+var_18], ecx
.text:00403252                 jnb     short loc_403258
.text:00403254                 lea     eax, [esp+7Ch+lpString1]
.text:00403258
.text:00403258 loc_403258:                             ; CODE XREF: sub_402E80+3D2↑j
.text:00403258                 cmp     dword ptr [esp+7Ch+var_34], ecx
.text:0040325C                 mov     ecx, dword ptr [esp+7Ch+pNodeName]
.text:00403260                 jnb     short loc_403266
.text:00403262                 lea     ecx, [esp+7Ch+pNodeName] ; pNodeName
.text:00403266
.text:00403266 loc_403266:                             ; CODE XREF: sub_402E80+3E0↑j
.text:00403266                 push    ebx             ; int
.text:00403267                 push    edi             ; int
.text:00403268                 push    eax             ; lpString1
.text:00403269                 push    0               ; int
.text:0040326B                 mov     edx, esi
.text:0040326D                 call    sub_402B20
.text:00403272                 test    al, al
.text:00403274                 jz      short loc_4032A5
.text:00403276                 mov     eax, esi
.text:00403278                 call    sub_403330
.text:0040327D
.text:0040327D loc_40327D:                             ; CODE XREF: sub_402E80+1B1↑j
.text:0040327D                                         ; sub_402E80+298↑j ...
.text:0040327D                 lea     ecx, [esp+7Ch+var_30]
.text:00403281                 mov     byte ptr [esp+7Ch+var_4], 0
.text:00403286                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:0040328C                 lea     ecx, [esp+7Ch+var_4C]
.text:00403290                 mov     [esp+7Ch+var_4], 0FFFFFFFFh
.text:00403298                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:0040329E                 mov     eax, 1
.text:004032A3                 jmp     short loc_4032FF
.text:004032A5 ; ---------------------------------------------------------------------------
.text:004032A5
.text:004032A5 loc_4032A5:                             ; CODE XREF: sub_402E80+3F4↑j
.text:004032A5                 mov     ecx, [esp+7Ch+var_64]
.text:004032A9                 mov     [ecx], esi
.text:004032AB
.text:004032AB loc_4032AB:                             ; CODE XREF: sub_402E80+1D9↑j
.text:004032AB                                         ; sub_402E80+277↑j ...
.text:004032AB                 mov     ecx, [esp+7Ch+var_60]
.text:004032AF                 test    ecx, ecx
.text:004032B1                 mov     [esp+7Ch+var_6C], 0
.text:004032B9                 jz      short loc_4032DA
.text:004032BB                 mov     edx, [esp+7Ch+var_64]
.text:004032BF                 mov     eax, [edx]
.text:004032C1                 cmp     dword ptr [eax+0A2B0h], 0
.text:004032C8                 jnz     short loc_4032DA
.text:004032CA                 mov     dword ptr [eax+0A2B0h], 1
.text:004032D4                 mov     [eax+0A2B4h], ecx
.text:004032DA
.text:004032DA loc_4032DA:                             ; CODE XREF: sub_402E80+1EE↑j
.text:004032DA                                         ; sub_402E80+223↑j ...
.text:004032DA                 lea     ecx, [esp+7Ch+var_30]
.text:004032DE                 mov     byte ptr [esp+7Ch+var_4], 0
.text:004032E3                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:004032E9                 lea     ecx, [esp+7Ch+var_4C]
.text:004032ED                 mov     [esp+7Ch+var_4], 0FFFFFFFFh
.text:004032F5                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:004032FB                 mov     eax, [esp+7Ch+var_6C]
.text:004032FF
.text:004032FF loc_4032FF:                             ; CODE XREF: sub_402E80+56↑j
.text:004032FF                                         ; sub_402E80+423↑j
.text:004032FF                 mov     ecx, dword ptr [esp+7Ch+var_C]
.text:00403303                 mov     large fs:0, ecx
.text:0040330A                 pop     ecx
.text:0040330B                 pop     edi
.text:0040330C                 pop     esi
.text:0040330D                 pop     ebx
.text:0040330E                 mov     ecx, [esp+6Ch+var_14]
.text:00403312                 xor     ecx, esp        ; StackCookie
.text:00403314                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403319                 mov     esp, ebp
.text:0040331B                 pop     ebp
.text:0040331C                 retn    8
.text:0040331C ; } // starts at 402E80
.text:0040331C sub_402E80      endp
.text:0040331C
.text:0040331C ; ---------------------------------------------------------------------------
.text:0040331F                 db 11h dup(0CCh)
.text:00403330
.text:00403330 ; =============== S U B R O U T I N E =======================================
.text:00403330
.text:00403330
.text:00403330 sub_403330      proc near               ; CODE XREF: sub_402E80+182↑p
.text:00403330                                         ; sub_402E80+27E↑p ...
.text:00403330                 mov     edi, edi
.text:00403332                 push    esi
.text:00403333                 mov     esi, eax
.text:00403335                 test    esi, esi
.text:00403337                 mov     eax, 1
.text:0040333C                 jz      loc_4033CB
.text:00403342                 push    edi
.text:00403343                 mov     edi, ds:Sleep
.text:00403349                 push    64h ; 'd'       ; dwMilliseconds
.text:0040334B                 call    edi ; Sleep
.text:0040334D                 call    sub_402870
.text:00403352                 mov     eax, [esi]
.text:00403354                 mov     edx, [eax+8]
.text:00403357                 push    0
.text:00403359                 push    0
.text:0040335B                 mov     ecx, esi
.text:0040335D                 call    edx
.text:0040335F                 mov     eax, [esi]
.text:00403361                 mov     edx, [eax+4]
.text:00403364                 mov     ecx, esi
.text:00403366                 call    edx
.text:00403368                 lea     eax, [esi+1D4h]
.text:0040336E                 push    eax             ; lpAddend
.text:0040336F                 call    ds:InterlockedDecrement
.text:00403375                 test    eax, eax
.text:00403377                 jnz     short loc_403388
.text:00403379                 call    loc_401890
.text:0040337E                 mov     edx, [esi]
.text:00403380                 mov     eax, [edx]
.text:00403382                 push    1
.text:00403384                 mov     ecx, esi
.text:00403386                 call    eax
.text:00403388
.text:00403388 loc_403388:                             ; CODE XREF: sub_403330+47↑j
.text:00403388                 cmp     Addend, 0
.text:0040338F                 jnz     short loc_4033C8
.text:00403391                 xor     esi, esi
.text:00403393
.text:00403393 loc_403393:                             ; CODE XREF: sub_403330+79↓j
.text:00403393                 cmp     dword_40B400, 0
.text:0040339A                 jz      short loc_4033AB
.text:0040339C                 push    0FAh            ; dwMilliseconds
.text:004033A1                 call    edi ; Sleep
.text:004033A3                 add     esi, 1
.text:004033A6                 cmp     esi, 14h
.text:004033A9                 jb      short loc_403393
.text:004033AB
.text:004033AB loc_4033AB:                             ; CODE XREF: sub_403330+6A↑j
.text:004033AB                 cmp     byte_40B40C, 0
.text:004033B2                 jz      short loc_4033C8
.text:004033B4                 call    ds:WSACleanup
.text:004033BA                 mov     byte_40B40C, 0
.text:004033C1                 mov     byte_40B40D, 0
.text:004033C8
.text:004033C8 loc_4033C8:                             ; CODE XREF: sub_403330+5F↑j
.text:004033C8                                         ; sub_403330+82↑j
.text:004033C8                 xor     eax, eax
.text:004033CA                 pop     edi
.text:004033CB
.text:004033CB loc_4033CB:                             ; CODE XREF: sub_403330+C↑j
.text:004033CB                 pop     esi
.text:004033CC                 retn
.text:004033CC sub_403330      endp
.text:004033CC
.text:004033CC ; ---------------------------------------------------------------------------
.text:004033CD                 align 20h
.text:004033E0
.text:004033E0 ; =============== S U B R O U T I N E =======================================
.text:004033E0
.text:004033E0 ; Attributes: bp-based frame
.text:004033E0
.text:004033E0 sub_4033E0      proc near               ; CODE XREF: sub_402E80+1CC↑p
.text:004033E0                                         ; sub_402E80+2B3↑p ...
.text:004033E0
.text:004033E0 cbData          = dword ptr -20h
.text:004033E0 phkResult       = dword ptr -1Ch
.text:004033E0 Data            = byte ptr -18h
.text:004033E0 var_4           = dword ptr -4
.text:004033E0 arg_0           = byte ptr  8
.text:004033E0
.text:004033E0                 mov     edi, edi
.text:004033E2                 push    ebp
.text:004033E3                 mov     ebp, esp
.text:004033E5                 sub     esp, 20h
.text:004033E8                 mov     eax, ___security_cookie
.text:004033ED                 xor     eax, ebp
.text:004033EF                 mov     [ebp+var_4], eax
.text:004033F2                 push    ebx
.text:004033F3                 push    (offset loc_40132F+4)
.text:004033F8                 mov     ecx, esi
.text:004033FA                 xor     ebx, ebx
.text:004033FC                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403402                 lea     eax, [ebp+phkResult]
.text:00403405                 push    eax             ; phkResult
.text:00403406                 push    20019h          ; samDesired
.text:0040340B                 push    ebx             ; ulOptions
.text:0040340C                 push    offset SubKey   ; "SOFTWARE\\Microsoft\\Micro"
.text:00403411                 push    80000001h       ; hKey
.text:00403416                 mov     [ebp+phkResult], ebx
.text:00403419                 call    ds:RegOpenKeyExA
.text:0040341F                 test    eax, eax
.text:00403421                 jnz     short loc_40346A
.text:00403423                 cmp     [ebp+arg_0], bl
.text:00403426                 mov     [ebp+cbData], 14h
.text:0040342D                 mov     eax, offset ValueName ; "SimConnect_Port_IPv"
.text:00403432                 jnz     short loc_403439
.text:00403434                 mov     eax, offset dword_401228
.text:00403439
.text:00403439 loc_403439:                             ; CODE XREF: sub_4033E0+52↑j
.text:00403439                 lea     ecx, [ebp+cbData]
.text:0040343C                 push    ecx             ; lpcbData
.text:0040343D                 lea     edx, [ebp+Data]
.text:00403440                 push    edx             ; lpData
.text:00403441                 push    ebx             ; lpType
.text:00403442                 push    ebx             ; lpReserved
.text:00403443                 push    eax             ; lpValueName
.text:00403444                 mov     eax, [ebp+phkResult]
.text:00403447                 push    eax             ; hKey
.text:00403448                 call    ds:RegQueryValueExA
.text:0040344E                 test    eax, eax
.text:00403450                 jnz     short loc_403460
.text:00403452                 lea     ecx, [ebp+Data]
.text:00403455                 push    ecx
.text:00403456                 mov     ecx, esi
.text:00403458                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:0040345E                 mov     bl, 1
.text:00403460
.text:00403460 loc_403460:                             ; CODE XREF: sub_4033E0+70↑j
.text:00403460                 mov     edx, [ebp+phkResult]
.text:00403463                 push    edx             ; hKey
.text:00403464                 call    ds:RegCloseKey
.text:0040346A
.text:0040346A loc_40346A:                             ; CODE XREF: sub_4033E0+41↑j
.text:0040346A                 mov     ecx, [ebp+var_4]
.text:0040346D                 mov     al, bl
.text:0040346F                 xor     ecx, ebp        ; StackCookie
.text:00403471                 pop     ebx
.text:00403472                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403477                 mov     esp, ebp
.text:00403479                 pop     ebp
.text:0040347A                 retn    4
.text:0040347A sub_4033E0      endp
.text:0040347A
.text:0040347A ; ---------------------------------------------------------------------------
.text:0040347D                 db 13h dup(0CCh)
.text:00403490
.text:00403490 ; =============== S U B R O U T I N E =======================================
.text:00403490
.text:00403490 ; Attributes: bp-based frame
.text:00403490
.text:00403490 ; int __stdcall sub_403490(int, LPCSTR lpFileName, int, int, int, int, int, int, int, int, int)
.text:00403490 sub_403490      proc near               ; CODE XREF: sub_403850+C4↓p
.text:00403490                                         ; sub_403850+12A↓p ...
.text:00403490
.text:00403490 var_854         = dword ptr -854h
.text:00403490 var_850         = dword ptr -850h
.text:00403490 var_84C         = dword ptr -84Ch
.text:00403490 var_848         = byte ptr -848h
.text:00403490 lpString1       = dword ptr -844h
.text:00403490 var_830         = dword ptr -830h
.text:00403490 ReturnedString  = byte ptr -82Ch
.text:00403490 AppName         = byte ptr -2Ch
.text:00403490 var_10          = dword ptr -10h
.text:00403490 var_C           = dword ptr -0Ch
.text:00403490 var_4           = dword ptr -4
.text:00403490 arg_0           = dword ptr  8
.text:00403490 lpFileName      = dword ptr  0Ch
.text:00403490 arg_18          = dword ptr  20h
.text:00403490 arg_1C          = dword ptr  24h
.text:00403490 arg_20          = dword ptr  28h
.text:00403490 arg_24          = dword ptr  2Ch
.text:00403490 arg_28          = dword ptr  30h
.text:00403490
.text:00403490 ; FUNCTION CHUNK AT .text:00408D70 SIZE 0000003D BYTES
.text:00403490
.text:00403490 ; __unwind { // SEH_403490
.text:00403490                 mov     edi, edi
.text:00403492                 push    ebp
.text:00403493                 mov     ebp, esp
.text:00403495                 push    0FFFFFFFFh
.text:00403497                 push    offset SEH_403490
.text:0040349C                 mov     eax, large fs:0
.text:004034A2                 push    eax
.text:004034A3                 sub     esp, 848h
.text:004034A9                 mov     eax, ___security_cookie
.text:004034AE                 xor     eax, ebp
.text:004034B0                 mov     [ebp+var_10], eax
.text:004034B3                 push    ebx
.text:004034B4                 push    esi
.text:004034B5                 push    edi
.text:004034B6                 push    eax
.text:004034B7                 lea     eax, [ebp+var_C]
.text:004034BA                 mov     large fs:0, eax
.text:004034C0                 mov     edi, [ebp+arg_1C]
.text:004034C3                 mov     eax, [ebp+arg_24]
.text:004034C6                 mov     esi, [ebp+arg_20]
.text:004034C9                 mov     ebx, [ebp+arg_28]
.text:004034CC                 mov     [ebp+var_850], eax
.text:004034D2                 mov     [ebp+var_854], ecx
.text:004034D8                 mov     [ebp+var_84C], edx
.text:004034DE                 lea     ecx, [ebp+var_848]
.text:004034E4 ;   try {
.text:004034E4                 mov     [ebp+var_4], 0
.text:004034EB                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:004034F1                 test    edi, edi
.text:004034F1 ;   } // starts at 4034E4
.text:004034F3 ;   try {
.text:004034F3                 mov     byte ptr [ebp+var_4], 1
.text:004034F7                 jnz     short loc_40350D
.text:004034F9                 mov     eax, offset aSimconnect ; "SimConnect"
.text:004034FE                 mov     ecx, 1Ah
.text:00403503                 lea     edx, [ebp+AppName]
.text:00403506                 call    sub_402580
.text:0040350B                 jmp     short loc_403523
.text:0040350D ; ---------------------------------------------------------------------------
.text:0040350D
.text:0040350D loc_40350D:                             ; CODE XREF: sub_403490+67↑j
.text:0040350D                 push    edi
.text:0040350E                 push    offset aSimconnectU ; "SimConnect.%u"
.text:00403513                 mov     eax, 1Ah
.text:00403518                 lea     edi, [ebp+AppName]
.text:0040351B                 call    sub_402510
.text:00403520                 add     esp, 8
.text:00403523
.text:00403523 loc_403523:                             ; CODE XREF: sub_403490+7B↑j
.text:00403523                 mov     eax, [ebp+lpFileName]
.text:00403526                 mov     edi, 10h
.text:0040352B                 cmp     [ebp+arg_18], edi
.text:0040352E                 jnb     short loc_403533
.text:00403530                 lea     eax, [ebp+lpFileName]
.text:00403533
.text:00403533 loc_403533:                             ; CODE XREF: sub_403490+9E↑j
.text:00403533                 push    eax             ; lpFileName
.text:00403534                 push    800h            ; nSize
.text:00403539                 lea     eax, [ebp+ReturnedString]
.text:0040353F                 push    eax             ; lpReturnedString
.text:00403540                 push    (offset loc_40132F+4) ; lpDefault
.text:00403545                 push    offset loc_401374 ; lpKeyName
.text:0040354A                 lea     ecx, [ebp+AppName]
.text:0040354D                 push    ecx             ; lpAppName
.text:0040354E                 call    ds:GetPrivateProfileStringA
.text:00403554                 lea     edx, [ebp+ReturnedString]
.text:0040355A                 push    edx
.text:0040355B                 lea     ecx, [ebp+var_848]
.text:00403561                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403567                 cmp     [ebp+var_830], edi
.text:0040356D                 mov     eax, [ebp+lpString1]
.text:00403573                 jnb     short loc_40357B
.text:00403575                 lea     eax, [ebp+lpString1]
.text:0040357B
.text:0040357B loc_40357B:                             ; CODE XREF: sub_403490+E3↑j
.text:0040357B                 mov     edi, ds:lstrcmpiA
.text:00403581                 push    offset String2  ; "Auto"
.text:00403586                 push    eax             ; lpString1
.text:00403587                 call    edi ; lstrcmpiA
.text:00403589                 test    eax, eax
.text:0040358B                 jz      loc_40363C
.text:00403591                 cmp     [ebp+var_830], 10h
.text:00403598                 mov     eax, [ebp+lpString1]
.text:0040359E                 jnb     short loc_4035A6
.text:004035A0                 lea     eax, [ebp+lpString1]
.text:004035A6
.text:004035A6 loc_4035A6:                             ; CODE XREF: sub_403490+10E↑j
.text:004035A6                 push    offset aIpv4    ; "IPv4"
.text:004035AB                 push    eax             ; lpString1
.text:004035AC                 call    edi ; lstrcmpiA
.text:004035AE                 test    eax, eax
.text:004035B0                 jnz     short loc_4035D6
.text:004035B2                 push    (offset loc_40132F+4)
.text:004035B7                 push    ebx
.text:004035B8                 mov     dword ptr [esi], 2
.text:004035BE                 call    ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:004035C4                 add     esp, 8
.text:004035C7                 test    al, al
.text:004035C9                 jz      short loc_403642
.text:004035CB                 push    0
.text:004035CD                 mov     esi, ebx
.text:004035CF                 call    sub_4033E0
.text:004035D4                 jmp     short loc_403642
.text:004035D6 ; ---------------------------------------------------------------------------
.text:004035D6
.text:004035D6 loc_4035D6:                             ; CODE XREF: sub_403490+120↑j
.text:004035D6                 cmp     [ebp+var_830], 10h
.text:004035DD                 mov     eax, [ebp+lpString1]
.text:004035E3                 jnb     short loc_4035EB
.text:004035E5                 lea     eax, [ebp+lpString1]
.text:004035EB
.text:004035EB loc_4035EB:                             ; CODE XREF: sub_403490+153↑j
.text:004035EB                 push    offset aIpv6    ; "IPv6"
.text:004035F0                 push    eax             ; lpString1
.text:004035F1                 call    edi ; lstrcmpiA
.text:004035F3                 test    eax, eax
.text:004035F5                 jnz     short loc_40361B
.text:004035F7                 push    (offset loc_40132F+4)
.text:004035FC                 push    ebx
.text:004035FD                 mov     dword ptr [esi], 17h
.text:00403603                 call    ds:??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:00403609                 add     esp, 8
.text:0040360C                 test    al, al
.text:0040360E                 jz      short loc_403642
.text:00403610                 push    1
.text:00403612                 mov     esi, ebx
.text:00403614                 call    sub_4033E0
.text:00403619                 jmp     short loc_403642
.text:0040361B ; ---------------------------------------------------------------------------
.text:0040361B
.text:0040361B loc_40361B:                             ; CODE XREF: sub_403490+165↑j
.text:0040361B                 cmp     [ebp+var_830], 10h
.text:00403622                 mov     eax, [ebp+lpString1]
.text:00403628                 jnb     short loc_403630
.text:0040362A                 lea     eax, [ebp+lpString1]
.text:00403630
.text:00403630 loc_403630:                             ; CODE XREF: sub_403490+198↑j
.text:00403630                 push    offset aPipe    ; "Pipe"
.text:00403635                 push    eax             ; lpString1
.text:00403636                 call    edi ; lstrcmpiA
.text:00403638                 test    eax, eax
.text:0040363A                 jnz     short loc_403642
.text:0040363C
.text:0040363C loc_40363C:                             ; CODE XREF: sub_403490+FB↑j
.text:0040363C                 mov     dword ptr [esi], 1
.text:00403642
.text:00403642 loc_403642:                             ; CODE XREF: sub_403490+139↑j
.text:00403642                                         ; sub_403490+144↑j ...
.text:00403642                 cmp     [ebp+arg_18], 10h
.text:00403646                 mov     eax, [ebp+lpFileName]
.text:00403649                 jnb     short loc_40364E
.text:0040364B                 lea     eax, [ebp+lpFileName]
.text:0040364E
.text:0040364E loc_40364E:                             ; CODE XREF: sub_403490+1B9↑j
.text:0040364E                 mov     esi, ds:GetPrivateProfileStringA
.text:00403654                 push    eax             ; lpFileName
.text:00403655                 push    800h            ; nSize
.text:0040365A                 lea     eax, [ebp+ReturnedString]
.text:00403660                 push    eax             ; lpReturnedString
.text:00403661                 push    (offset loc_40132F+4) ; lpDefault
.text:00403666                 push    offset KeyName  ; "Address"
.text:0040366B                 lea     ecx, [ebp+AppName]
.text:0040366E                 push    ecx             ; lpAppName
.text:0040366F                 call    esi ; GetPrivateProfileStringA
.text:00403671                 lea     edx, [ebp+ReturnedString]
.text:00403677                 push    edx
.text:00403678                 lea     ecx, [ebp+var_848]
.text:0040367E                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403684                 mov     edi, ds:??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:0040368A                 lea     eax, [ebp+var_848]
.text:00403690                 push    (offset loc_40132F+4)
.text:00403695                 push    eax
.text:00403696                 call    edi ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *) ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:00403698                 add     esp, 8
.text:0040369B                 test    al, al
.text:0040369D                 jz      short loc_4036B2
.text:0040369F                 lea     ecx, [ebp+var_848]
.text:004036A5                 push    ecx
.text:004036A6                 mov     ecx, [ebp+var_850]
.text:004036AC                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text:004036B2
.text:004036B2 loc_4036B2:                             ; CODE XREF: sub_403490+20D↑j
.text:004036B2                 cmp     [ebp+arg_18], 10h
.text:004036B6                 mov     eax, [ebp+lpFileName]
.text:004036B9                 jnb     short loc_4036BE
.text:004036BB                 lea     eax, [ebp+lpFileName]
.text:004036BE
.text:004036BE loc_4036BE:                             ; CODE XREF: sub_403490+229↑j
.text:004036BE                 push    eax             ; lpFileName
.text:004036BF                 push    800h            ; nSize
.text:004036C4                 lea     edx, [ebp+ReturnedString]
.text:004036CA                 push    edx             ; lpReturnedString
.text:004036CB                 push    (offset loc_40132F+4) ; lpDefault
.text:004036D0                 push    offset aPort    ; "Port"
.text:004036D5                 lea     eax, [ebp+AppName]
.text:004036D8                 push    eax             ; lpAppName
.text:004036D9                 call    esi ; GetPrivateProfileStringA
.text:004036DB                 lea     ecx, [ebp+ReturnedString]
.text:004036E1                 push    ecx
.text:004036E2                 lea     ecx, [ebp+var_848]
.text:004036E8                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:004036EE                 lea     edx, [ebp+var_848]
.text:004036F4                 push    (offset loc_40132F+4)
.text:004036F9                 push    edx
.text:004036FA                 call    edi ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *) ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:004036FC                 add     esp, 8
.text:004036FF                 test    al, al
.text:00403701                 jz      short loc_403712
.text:00403703                 lea     eax, [ebp+var_848]
.text:00403709                 push    eax
.text:0040370A                 mov     ecx, ebx
.text:0040370C                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text:00403712
.text:00403712 loc_403712:                             ; CODE XREF: sub_403490+271↑j
.text:00403712                 cmp     [ebp+arg_18], 10h
.text:00403716                 mov     eax, [ebp+lpFileName]
.text:00403719                 jnb     short loc_40371E
.text:0040371B                 lea     eax, [ebp+lpFileName]
.text:0040371E
.text:0040371E loc_40371E:                             ; CODE XREF: sub_403490+289↑j
.text:0040371E                 push    eax             ; lpFileName
.text:0040371F                 push    800h            ; nSize
.text:00403724                 lea     ecx, [ebp+ReturnedString]
.text:0040372A                 push    ecx             ; lpReturnedString
.text:0040372B                 push    (offset loc_40132F+4) ; lpDefault
.text:00403730                 push    offset aMaxreceivesize ; "MaxReceiveSize"
.text:00403735                 lea     edx, [ebp+AppName]
.text:00403738                 push    edx             ; lpAppName
.text:00403739                 call    esi ; GetPrivateProfileStringA
.text:0040373B                 lea     eax, [ebp+ReturnedString]
.text:00403741                 push    eax
.text:00403742                 lea     ecx, [ebp+var_848]
.text:00403748                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:0040374E                 lea     ecx, [ebp+var_848]
.text:00403754                 push    (offset loc_40132F+4)
.text:00403759                 push    ecx
.text:0040375A                 call    edi ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *) ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:0040375C                 mov     ebx, ds:atoi
.text:00403762                 add     esp, 8
.text:00403765                 test    al, al
.text:00403767                 jz      short loc_403790
.text:00403769                 cmp     [ebp+var_830], 10h
.text:00403770                 mov     eax, [ebp+lpString1]
.text:00403776                 jnb     short loc_40377E
.text:00403778                 lea     eax, [ebp+lpString1]
.text:0040377E
.text:0040377E loc_40377E:                             ; CODE XREF: sub_403490+2E6↑j
.text:0040377E                 push    eax             ; String
.text:0040377F                 call    ebx ; atoi
.text:00403781                 mov     ecx, [ebp+var_854]
.text:00403787                 add     esp, 4
.text:0040378A                 cmp     eax, [ecx]
.text:0040378C                 jbe     short loc_403790
.text:0040378E                 mov     [ecx], eax
.text:00403790
.text:00403790 loc_403790:                             ; CODE XREF: sub_403490+2D7↑j
.text:00403790                                         ; sub_403490+2FC↑j
.text:00403790                 cmp     [ebp+arg_18], 10h
.text:00403794                 mov     eax, [ebp+lpFileName]
.text:00403797                 jnb     short loc_40379C
.text:00403799                 lea     eax, [ebp+lpFileName]
.text:0040379C
.text:0040379C loc_40379C:                             ; CODE XREF: sub_403490+307↑j
.text:0040379C                 push    eax             ; lpFileName
.text:0040379D                 push    800h            ; nSize
.text:004037A2                 lea     edx, [ebp+ReturnedString]
.text:004037A8                 push    edx             ; lpReturnedString
.text:004037A9                 push    (offset loc_40132F+4) ; lpDefault
.text:004037AE                 push    offset aDisablenagle ; "DisableNagle"
.text:004037B3                 lea     eax, [ebp+AppName]
.text:004037B6                 push    eax             ; lpAppName
.text:004037B7                 call    esi ; GetPrivateProfileStringA
.text:004037B9                 lea     ecx, [ebp+ReturnedString]
.text:004037BF                 push    ecx
.text:004037C0                 lea     ecx, [ebp+var_848]
.text:004037C6                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:004037CC                 lea     edx, [ebp+var_848]
.text:004037D2                 push    (offset loc_40132F+4)
.text:004037D7                 push    edx
.text:004037D8                 call    edi ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *) ; std::operator!=<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,char const *)
.text:004037DA                 add     esp, 8
.text:004037DD                 test    al, al
.text:004037DF                 jz      short loc_403809
.text:004037E1                 cmp     [ebp+var_830], 10h
.text:004037E8                 mov     eax, [ebp+lpString1]
.text:004037EE                 jnb     short loc_4037F6
.text:004037F0                 lea     eax, [ebp+lpString1]
.text:004037F6
.text:004037F6 loc_4037F6:                             ; CODE XREF: sub_403490+35E↑j
.text:004037F6                 push    eax             ; String
.text:004037F7                 call    ebx ; atoi
.text:004037F9                 mov     ecx, [ebp+var_84C]
.text:004037FF                 add     esp, 4
.text:00403802                 test    eax, eax
.text:00403804                 setnz   al
.text:00403807                 mov     [ecx], al
.text:00403809
.text:00403809 loc_403809:                             ; CODE XREF: sub_403490+34F↑j
.text:00403809                 lea     ecx, [ebp+var_848]
.text:00403809 ;   } // starts at 4034F3
.text:0040380F ;   try {
.text:0040380F                 mov     byte ptr [ebp+var_4], 0
.text:00403813                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00403819                 lea     ecx, [ebp+arg_0]
.text:00403819 ;   } // starts at 40380F
.text:0040381C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00403823                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00403829                 mov     ecx, [ebp+var_C]
.text:0040382C                 mov     large fs:0, ecx
.text:00403833                 pop     ecx
.text:00403834                 pop     edi
.text:00403835                 pop     esi
.text:00403836                 pop     ebx
.text:00403837                 mov     ecx, [ebp+var_10]
.text:0040383A                 xor     ecx, ebp        ; StackCookie
.text:0040383C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403841                 mov     esp, ebp
.text:00403843                 pop     ebp
.text:00403844                 retn    2Ch ; ','
.text:00403844 ; } // starts at 403490
.text:00403844 sub_403490      endp
.text:00403844
.text:00403844 ; ---------------------------------------------------------------------------
.text:00403847                 align 10h
.text:00403850
.text:00403850 ; =============== S U B R O U T I N E =======================================
.text:00403850
.text:00403850 ; Attributes: bp-based frame
.text:00403850
.text:00403850 sub_403850      proc near               ; CODE XREF: sub_402E80+108↑p
.text:00403850
.text:00403850 var_218         = dword ptr -218h
.text:00403850 var_214         = dword ptr -214h
.text:00403850 var_210         = dword ptr -210h
.text:00403850 pszDest         = byte ptr -20Ch
.text:00403850 pszPath         = byte ptr -108h
.text:00403850 var_4           = dword ptr -4
.text:00403850 arg_0           = dword ptr  8
.text:00403850 arg_4           = dword ptr  0Ch
.text:00403850
.text:00403850                 mov     edi, edi
.text:00403852                 push    ebp
.text:00403853                 mov     ebp, esp
.text:00403855                 sub     esp, 218h
.text:0040385B                 mov     eax, ___security_cookie
.text:00403860                 xor     eax, ebp
.text:00403862                 mov     [ebp+var_4], eax
.text:00403865                 mov     eax, [ebp+arg_4]
.text:00403868                 mov     [ebp+var_214], ecx
.text:0040386E                 push    (offset loc_40132F+4)
.text:00403873                 mov     ecx, edi
.text:00403875                 mov     [ebp+var_210], eax
.text:0040387B                 mov     dword ptr [esi], 1
.text:00403881                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403887                 push    (offset loc_40132F+4)
.text:0040388C                 mov     ecx, ebx
.text:0040388E                 call    ds:??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::operator=(char const *)
.text:00403894                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text:00403898                 mov     edx, [ebp+var_210]
.text:0040389E                 mov     eax, [ebp+var_214]
.text:004038A4                 mov     dword ptr [edx], 0A080h
.text:004038AA                 mov     byte ptr [eax], 0
.text:004038AD                 jz      loc_4039E2
.text:004038B3                 lea     ecx, [ebp+pszPath]
.text:004038B9                 push    ecx             ; pszPath
.text:004038BA                 push    0               ; dwFlags
.text:004038BC                 push    0               ; hToken
.text:004038BE                 push    2Eh ; '.'       ; csidl
.text:004038C0                 push    0               ; int
.text:004038C2                 call    ds:SHGetFolderPathA
.text:004038C8                 test    eax, eax
.text:004038CA                 jl      short loc_403919
.text:004038CC                 push    offset pszFile  ; "SimConnect.cfg"
.text:004038D1                 lea     edx, [ebp+pszPath]
.text:004038D7                 push    edx             ; pszDir
.text:004038D8                 lea     eax, [ebp+pszDest]
.text:004038DE                 push    eax             ; pszDest
.text:004038DF                 call    ds:PathCombineA
.text:004038E5                 test    eax, eax
.text:004038E7                 jz      short loc_403919
.text:004038E9                 mov     ecx, [ebp+arg_0]
.text:004038EC                 push    ebx             ; int
.text:004038ED                 push    edi             ; int
.text:004038EE                 push    esi             ; int
.text:004038EF                 push    ecx             ; int
.text:004038F0                 sub     esp, 1Ch
.text:004038F3                 lea     edx, [ebp+pszDest]
.text:004038F9                 mov     ecx, esp
.text:004038FB                 mov     [ebp+var_218], esp
.text:00403901                 push    edx
.text:00403902                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:00403908                 mov     edx, [ebp+var_214]
.text:0040390E                 mov     ecx, [ebp+var_210]
.text:00403914                 call    sub_403490
.text:00403919
.text:00403919 loc_403919:                             ; CODE XREF: sub_403850+7A↑j
.text:00403919                                         ; sub_403850+97↑j
.text:00403919                 lea     eax, [ebp+pszPath]
.text:0040391F                 push    eax             ; pszPath
.text:00403920                 push    0               ; dwFlags
.text:00403922                 push    0               ; hToken
.text:00403924                 push    5               ; csidl
.text:00403926                 push    0               ; int
.text:00403928                 call    ds:SHGetFolderPathA
.text:0040392E                 test    eax, eax
.text:00403930                 jl      short loc_40397F
.text:00403932                 push    offset pszFile  ; "SimConnect.cfg"
.text:00403937                 lea     ecx, [ebp+pszPath]
.text:0040393D                 push    ecx             ; pszDir
.text:0040393E                 lea     edx, [ebp+pszDest]
.text:00403944                 push    edx             ; pszDest
.text:00403945                 call    ds:PathCombineA
.text:0040394B                 test    eax, eax
.text:0040394D                 jz      short loc_40397F
.text:0040394F                 mov     eax, [ebp+arg_0]
.text:00403952                 push    ebx             ; int
.text:00403953                 push    edi             ; int
.text:00403954                 push    esi             ; int
.text:00403955                 push    eax             ; int
.text:00403956                 sub     esp, 1Ch
.text:00403959                 lea     edx, [ebp+pszDest]
.text:0040395F                 mov     ecx, esp
.text:00403961                 mov     [ebp+var_218], esp
.text:00403967                 push    edx
.text:00403968                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:0040396E                 mov     edx, [ebp+var_214]
.text:00403974                 mov     ecx, [ebp+var_210]
.text:0040397A                 call    sub_403490
.text:0040397F
.text:0040397F loc_40397F:                             ; CODE XREF: sub_403850+E0↑j
.text:0040397F                                         ; sub_403850+FD↑j
.text:0040397F                 lea     eax, [ebp+pszPath]
.text:00403985                 push    eax             ; lpBuffer
.text:00403986                 push    104h            ; nBufferLength
.text:0040398B                 call    ds:GetCurrentDirectoryA
.text:00403991                 test    eax, eax
.text:00403993                 jz      short loc_4039E2
.text:00403995                 push    offset pszFile  ; "SimConnect.cfg"
.text:0040399A                 lea     ecx, [ebp+pszPath]
.text:004039A0                 push    ecx             ; pszDir
.text:004039A1                 lea     edx, [ebp+pszDest]
.text:004039A7                 push    edx             ; pszDest
.text:004039A8                 call    ds:PathCombineA
.text:004039AE                 test    eax, eax
.text:004039B0                 jz      short loc_4039E2
.text:004039B2                 mov     eax, [ebp+arg_0]
.text:004039B5                 push    ebx             ; int
.text:004039B6                 push    edi             ; int
.text:004039B7                 push    esi             ; int
.text:004039B8                 push    eax             ; int
.text:004039B9                 sub     esp, 1Ch
.text:004039BC                 lea     edx, [ebp+pszDest]
.text:004039C2                 mov     ecx, esp
.text:004039C4                 mov     [ebp+var_218], esp
.text:004039CA                 push    edx
.text:004039CB                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:004039D1                 mov     edx, [ebp+var_214]
.text:004039D7                 mov     ecx, [ebp+var_210]
.text:004039DD                 call    sub_403490
.text:004039E2
.text:004039E2 loc_4039E2:                             ; CODE XREF: sub_403850+5D↑j
.text:004039E2                                         ; sub_403850+143↑j ...
.text:004039E2                 mov     ecx, [ebp+var_4]
.text:004039E5                 xor     ecx, ebp        ; StackCookie
.text:004039E7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:004039EC                 mov     esp, ebp
.text:004039EE                 pop     ebp
.text:004039EF                 retn    8
.text:004039EF sub_403850      endp
.text:004039EF
.text:004039EF ; ---------------------------------------------------------------------------
.text:004039F2                 align 10h
.text:00403A00
.text:00403A00 ; =============== S U B R O U T I N E =======================================
.text:00403A00
.text:00403A00 ; Attributes: bp-based frame
.text:00403A00
.text:00403A00 ; int __stdcall sub_403A00(int, LPCSTR lpFileName, int, int, int, int, int, int)
.text:00403A00 sub_403A00      proc near               ; CODE XREF: sub_403AC0+7E↓p
.text:00403A00                                         ; sub_403AC0+D8↓p ...
.text:00403A00
.text:00403A00 ReturnedString  = byte ptr -4Ch
.text:00403A00 AppName         = byte ptr -2Ch
.text:00403A00 var_10          = dword ptr -10h
.text:00403A00 var_C           = dword ptr -0Ch
.text:00403A00 var_4           = dword ptr -4
.text:00403A00 arg_0           = dword ptr  8
.text:00403A00 lpFileName      = dword ptr  0Ch
.text:00403A00 arg_18          = dword ptr  20h
.text:00403A00 arg_1C          = dword ptr  24h
.text:00403A00
.text:00403A00 ; FUNCTION CHUNK AT .text:00408D30 SIZE 0000002E BYTES
.text:00403A00
.text:00403A00 ; __unwind { // SEH_403A00
.text:00403A00                 mov     edi, edi
.text:00403A02                 push    ebp
.text:00403A03                 mov     ebp, esp
.text:00403A05                 push    0FFFFFFFFh
.text:00403A07                 push    offset SEH_403A00
.text:00403A0C                 mov     eax, large fs:0
.text:00403A12                 push    eax
.text:00403A13                 sub     esp, 40h
.text:00403A16                 mov     eax, ___security_cookie
.text:00403A1B                 xor     eax, ebp
.text:00403A1D                 mov     [ebp+var_10], eax
.text:00403A20                 push    edi
.text:00403A21                 push    eax
.text:00403A22                 lea     eax, [ebp+var_C]
.text:00403A25                 mov     large fs:0, eax
.text:00403A2B                 mov     eax, [ebp+arg_1C]
.text:00403A2E                 test    eax, eax
.text:00403A30                 jnz     short loc_403A46
.text:00403A32                 mov     eax, offset aSimconnect ; "SimConnect"
.text:00403A37                 mov     ecx, 1Ah
.text:00403A3C                 lea     edx, [ebp+AppName]
.text:00403A3F                 call    sub_402580
.text:00403A44                 jmp     short loc_403A5C
.text:00403A46 ; ---------------------------------------------------------------------------
.text:00403A46
.text:00403A46 loc_403A46:                             ; CODE XREF: sub_403A00+30↑j
.text:00403A46                 push    eax
.text:00403A47                 push    offset aSimconnectU ; "SimConnect.%u"
.text:00403A4C                 mov     eax, 1Ah
.text:00403A51                 lea     edi, [ebp+AppName]
.text:00403A54                 call    sub_402510
.text:00403A59                 add     esp, 8
.text:00403A5C
.text:00403A5C loc_403A5C:                             ; CODE XREF: sub_403A00+44↑j
.text:00403A5C                 cmp     [ebp+arg_18], 10h
.text:00403A60                 mov     eax, [ebp+lpFileName]
.text:00403A63                 jnb     short loc_403A68
.text:00403A65                 lea     eax, [ebp+lpFileName]
.text:00403A68
.text:00403A68 loc_403A68:                             ; CODE XREF: sub_403A00+63↑j
.text:00403A68                 push    eax             ; lpFileName
.text:00403A69                 push    1Eh             ; nSize
.text:00403A6B                 lea     eax, [ebp+ReturnedString]
.text:00403A6E                 push    eax             ; lpReturnedString
.text:00403A6F                 lea     ecx, [ebp+AppName]
.text:00403A72                 push    ecx             ; lpAppName
.text:00403A73                 call    ds:GetPrivateProfileSectionA
.text:00403A79                 test    eax, eax
.text:00403A7B                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00403A82                 lea     ecx, [ebp+arg_0]
.text:00403A85                 jnz     short loc_403A94
.text:00403A87                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00403A8D                 mov     eax, 3
.text:00403A92                 jmp     short loc_403A9C
.text:00403A94 ; ---------------------------------------------------------------------------
.text:00403A94
.text:00403A94 loc_403A94:                             ; CODE XREF: sub_403A00+85↑j
.text:00403A94                 call    ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00403A9A                 xor     eax, eax
.text:00403A9C
.text:00403A9C loc_403A9C:                             ; CODE XREF: sub_403A00+92↑j
.text:00403A9C                 mov     ecx, [ebp+var_C]
.text:00403A9F                 mov     large fs:0, ecx
.text:00403AA6                 pop     ecx
.text:00403AA7                 pop     edi
.text:00403AA8                 mov     ecx, [ebp+var_10]
.text:00403AAB                 xor     ecx, ebp        ; StackCookie
.text:00403AAD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403AB2                 mov     esp, ebp
.text:00403AB4                 pop     ebp
.text:00403AB5                 retn    20h ; ' '
.text:00403AB5 ; } // starts at 403A00
.text:00403AB5 sub_403A00      endp
.text:00403AB5
.text:00403AB5 ; ---------------------------------------------------------------------------
.text:00403AB8                 align 10h
.text:00403AC0
.text:00403AC0 ; =============== S U B R O U T I N E =======================================
.text:00403AC0
.text:00403AC0 ; Attributes: bp-based frame
.text:00403AC0
.text:00403AC0 sub_403AC0      proc near               ; CODE XREF: sub_402E80+4F↑p
.text:00403AC0
.text:00403AC0 var_210         = dword ptr -210h
.text:00403AC0 pszDest         = byte ptr -20Ch
.text:00403AC0 pszPath         = byte ptr -108h
.text:00403AC0 var_4           = dword ptr -4
.text:00403AC0
.text:00403AC0                 mov     edi, edi
.text:00403AC2                 push    ebp
.text:00403AC3                 mov     ebp, esp
.text:00403AC5                 sub     esp, 210h
.text:00403ACB                 mov     eax, ___security_cookie
.text:00403AD0                 xor     eax, ebp
.text:00403AD2                 mov     [ebp+var_4], eax
.text:00403AD5                 test    edi, edi
.text:00403AD7                 push    ebx
.text:00403AD8                 push    esi
.text:00403AD9                 jz      loc_403C0C
.text:00403ADF                 cmp     edi, 0FFFFFFFFh
.text:00403AE2                 jz      loc_403C0C
.text:00403AE8                 mov     ebx, ds:SHGetFolderPathA
.text:00403AEE                 lea     eax, [ebp+pszPath]
.text:00403AF4                 push    eax             ; pszPath
.text:00403AF5                 push    0               ; dwFlags
.text:00403AF7                 push    0               ; hToken
.text:00403AF9                 push    2Eh ; '.'       ; int
.text:00403AFB                 push    0               ; int
.text:00403AFD                 mov     esi, 3
.text:00403B02                 call    ebx ; SHGetFolderPathA
.text:00403B04                 test    eax, eax
.text:00403B06                 jl      short loc_403B4D
.text:00403B08                 push    offset pszFile  ; "SimConnect.cfg"
.text:00403B0D                 lea     ecx, [ebp+pszPath]
.text:00403B13                 push    ecx             ; int
.text:00403B14                 lea     edx, [ebp+pszDest]
.text:00403B1A                 push    edx             ; int
.text:00403B1B                 call    ds:PathCombineA
.text:00403B21                 test    eax, eax
.text:00403B23                 jz      short loc_403B4D
.text:00403B25                 push    edi             ; int
.text:00403B26                 sub     esp, 1Ch
.text:00403B29                 lea     eax, [ebp+pszDest]
.text:00403B2F                 mov     ecx, esp
.text:00403B31                 mov     [ebp+var_210], esp
.text:00403B37                 push    eax
.text:00403B38                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:00403B3E                 call    sub_403A00
.text:00403B43                 mov     esi, eax
.text:00403B45                 test    esi, esi
.text:00403B47                 jz      loc_403C0C
.text:00403B4D
.text:00403B4D loc_403B4D:                             ; CODE XREF: sub_403AC0+46↑j
.text:00403B4D                                         ; sub_403AC0+63↑j
.text:00403B4D                 lea     ecx, [ebp+pszPath]
.text:00403B53                 push    ecx             ; pszPath
.text:00403B54                 push    0               ; dwFlags
.text:00403B56                 push    0               ; hToken
.text:00403B58                 push    5               ; int
.text:00403B5A                 push    0               ; int
.text:00403B5C                 call    ebx ; SHGetFolderPathA
.text:00403B5E                 test    eax, eax
.text:00403B60                 jl      short loc_403BA3
.text:00403B62                 push    offset pszFile  ; "SimConnect.cfg"
.text:00403B67                 lea     edx, [ebp+pszPath]
.text:00403B6D                 push    edx             ; int
.text:00403B6E                 lea     eax, [ebp+pszDest]
.text:00403B74                 push    eax             ; int
.text:00403B75                 call    ds:PathCombineA
.text:00403B7B                 test    eax, eax
.text:00403B7D                 jz      short loc_403BA3
.text:00403B7F                 push    edi             ; int
.text:00403B80                 sub     esp, 1Ch
.text:00403B83                 lea     edx, [ebp+pszDest]
.text:00403B89                 mov     ecx, esp
.text:00403B8B                 mov     [ebp+var_210], esp
.text:00403B91                 push    edx
.text:00403B92                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:00403B98                 call    sub_403A00
.text:00403B9D                 mov     esi, eax
.text:00403B9F                 test    esi, esi
.text:00403BA1                 jz      short loc_403C0C
.text:00403BA3
.text:00403BA3 loc_403BA3:                             ; CODE XREF: sub_403AC0+A0↑j
.text:00403BA3                                         ; sub_403AC0+BD↑j
.text:00403BA3                 lea     eax, [ebp+pszPath]
.text:00403BA9                 push    eax             ; lpBuffer
.text:00403BAA                 push    104h            ; nBufferLength
.text:00403BAF                 call    ds:GetCurrentDirectoryA
.text:00403BB5                 test    eax, eax
.text:00403BB7                 jz      short loc_403BFA
.text:00403BB9                 push    offset pszFile  ; "SimConnect.cfg"
.text:00403BBE                 lea     ecx, [ebp+pszPath]
.text:00403BC4                 push    ecx             ; int
.text:00403BC5                 lea     edx, [ebp+pszDest]
.text:00403BCB                 push    edx             ; int
.text:00403BCC                 call    ds:PathCombineA
.text:00403BD2                 test    eax, eax
.text:00403BD4                 jz      short loc_403BFA
.text:00403BD6                 push    edi             ; int
.text:00403BD7                 sub     esp, 1Ch
.text:00403BDA                 lea     eax, [ebp+pszDest]
.text:00403BE0                 mov     ecx, esp
.text:00403BE2                 mov     [ebp+var_210], esp
.text:00403BE8                 push    eax
.text:00403BE9                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:00403BEF                 call    sub_403A00
.text:00403BF4                 mov     esi, eax
.text:00403BF6                 test    esi, esi
.text:00403BF8                 jz      short loc_403C0C
.text:00403BFA
.text:00403BFA loc_403BFA:                             ; CODE XREF: sub_403AC0+F7↑j
.text:00403BFA                                         ; sub_403AC0+114↑j
.text:00403BFA                 mov     eax, esi
.text:00403BFC                 pop     esi
.text:00403BFD                 pop     ebx
.text:00403BFE                 mov     ecx, [ebp+var_4]
.text:00403C01                 xor     ecx, ebp        ; StackCookie
.text:00403C03                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403C08                 mov     esp, ebp
.text:00403C0A                 pop     ebp
.text:00403C0B                 retn
.text:00403C0C ; ---------------------------------------------------------------------------
.text:00403C0C
.text:00403C0C loc_403C0C:                             ; CODE XREF: sub_403AC0+19↑j
.text:00403C0C                                         ; sub_403AC0+22↑j ...
.text:00403C0C                 mov     ecx, [ebp+var_4]
.text:00403C0F                 pop     esi
.text:00403C10                 xor     ecx, ebp        ; StackCookie
.text:00403C12                 xor     eax, eax
.text:00403C14                 pop     ebx
.text:00403C15                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00403C1A                 mov     esp, ebp
.text:00403C1C                 pop     ebp
.text:00403C1D                 retn
.text:00403C1D sub_403AC0      endp
.text:00403C1D
.text:00403C1D ; ---------------------------------------------------------------------------
.text:00403C1E                 db 12h dup(0CCh)
.text:00403C30
.text:00403C30 ; =============== S U B R O U T I N E =======================================
.text:00403C30
.text:00403C30 ; Attributes: bp-based frame fuzzy-sp
.text:00403C30
.text:00403C30 sub_403C30      proc near               ; CODE XREF: SimConnect_MapClientEventToSimEvent+23↓p
.text:00403C30                                         ; SimConnect_TransmitClientEvent+22↓p ...
.text:00403C30
.text:00403C30 var_8           = dword ptr -8
.text:00403C30 var_4           = dword ptr -4
.text:00403C30 arg_0           = dword ptr  8
.text:00403C30
.text:00403C30                 mov     edi, edi
.text:00403C32                 push    ebp
.text:00403C33                 mov     ebp, esp
.text:00403C35                 and     esp, 0FFFFFFF8h
.text:00403C38                 sub     esp, 0Ch
.text:00403C3B                 push    ebx
.text:00403C3C                 push    esi
.text:00403C3D                 push    edi
.text:00403C3E                 mov     edi, [ebp+arg_0]
.text:00403C41                 mov     esi, ecx
.text:00403C43                 test    esi, esi
.text:00403C45                 mov     ebx, eax
.text:00403C47                 mov     eax, 1
.text:00403C4C                 mov     dword ptr [edi], 0
.text:00403C52                 jz      loc_403D14
.text:00403C58                 cmp     dword ptr [esi+0A290h], 0
.text:00403C5F                 jz      loc_403D14
.text:00403C65                 call    sub_401F80
.text:00403C6A                 test    al, al
.text:00403C6C                 jz      short loc_403C7C
.text:00403C6E                 mov     eax, 2
.text:00403C73                 pop     edi
.text:00403C74                 pop     esi
.text:00403C75                 pop     ebx
.text:00403C76                 mov     esp, ebp
.text:00403C78                 pop     ebp
.text:00403C79                 retn    4
.text:00403C7C ; ---------------------------------------------------------------------------
.text:00403C7C
.text:00403C7C loc_403C7C:                             ; CODE XREF: sub_403C30+3C↑j
.text:00403C7C                 cmp     byte ptr [esi+0A2E0h], 0
.text:00403C83                 jz      short loc_403CE6
.text:00403C85                 mov     eax, [esi+1CCh]
.text:00403C8B                 mov     ecx, [esi+0A2D0h]
.text:00403C91                 push    ebx
.text:00403C92                 push    eax
.text:00403C93                 mov     eax, [esi+0A2ACh]
.text:00403C99                 push    eax
.text:00403C9A                 call    ecx
.text:00403C9C                 mov     edx, [ebp+arg_0]
.text:00403C9F                 mov     edi, eax
.text:00403CA1                 test    edi, edi
.text:00403CA3                 mov     [edx], edi
.text:00403CA5                 jz      short loc_403CE4
.text:00403CA7                 push    ebx             ; Size
.text:00403CA8                 push    0               ; Val
.text:00403CAA                 push    edi             ; void *
.text:00403CAB                 call    memset
.text:00403CB0                 add     esp, 0Ch
.text:00403CB3                 mov     eax, esi
.text:00403CB5                 mov     [esp+18h+var_4], ebx
.text:00403CB9                 mov     [esp+18h+var_8], edi
.text:00403CBD                 call    sub_402DE0
.text:00403CC2                 mov     ecx, [ebp+arg_0]
.text:00403CC5                 mov     edx, [ecx]
.text:00403CC7                 add     esi, 0A2E4h
.text:00403CCD                 lea     ebx, [esp+18h+var_8]
.text:00403CD1                 mov     [edx+0Ch], eax
.text:00403CD4                 call    sub_404440
.text:00403CD9                 xor     eax, eax
.text:00403CDB                 pop     edi
.text:00403CDC                 pop     esi
.text:00403CDD                 pop     ebx
.text:00403CDE                 mov     esp, ebp
.text:00403CE0                 pop     ebp
.text:00403CE1                 retn    4
.text:00403CE4 ; ---------------------------------------------------------------------------
.text:00403CE4
.text:00403CE4 loc_403CE4:                             ; CODE XREF: sub_403C30+75↑j
.text:00403CE4                 mov     edi, edx
.text:00403CE6
.text:00403CE6 loc_403CE6:                             ; CODE XREF: sub_403C30+53↑j
.text:00403CE6                 mov     eax, [esi+0A294h]
.text:00403CEC                 mov     ecx, [esi+20Ch]
.text:00403CF2                 sub     ecx, eax
.text:00403CF4                 add     ecx, [esi+0A290h]
.text:00403CFA                 cmp     ecx, ebx
.text:00403CFC                 jb      short loc_403D12
.text:00403CFE                 mov     [edi], eax
.text:00403D00                 mov     eax, esi
.text:00403D02                 call    sub_402DE0
.text:00403D07                 mov     edx, [edi]
.text:00403D09                 mov     [edx+0Ch], eax
.text:00403D0C                 add     [esi+0A294h], ebx
.text:00403D12
.text:00403D12 loc_403D12:                             ; CODE XREF: sub_403C30+CC↑j
.text:00403D12                 xor     eax, eax
.text:00403D14
.text:00403D14 loc_403D14:                             ; CODE XREF: sub_403C30+22↑j
.text:00403D14                                         ; sub_403C30+2F↑j
.text:00403D14                 pop     edi
.text:00403D15                 pop     esi
.text:00403D16                 pop     ebx
.text:00403D17                 mov     esp, ebp
.text:00403D19                 pop     ebp
.text:00403D1A                 retn    4
.text:00403D1A sub_403C30      endp
.text:00403D1A
.text:00403D1A ; ---------------------------------------------------------------------------
.text:00403D1D                 db 13h dup(0CCh)
.text:00403D30
.text:00403D30 ; =============== S U B R O U T I N E =======================================
.text:00403D30
.text:00403D30 ; Attributes: bp-based frame fuzzy-sp
.text:00403D30
.text:00403D30 ; int __stdcall sub_403D30(int, void *, size_t Size)
.text:00403D30 sub_403D30      proc near               ; CODE XREF: SimConnect_MapClientEventToSimEvent+8C↓p
.text:00403D30                                         ; SimConnect_TransmitClientEvent+A0↓p ...
.text:00403D30
.text:00403D30 var_8           = byte ptr -8
.text:00403D30 arg_0           = dword ptr  8
.text:00403D30 arg_4           = dword ptr  0Ch
.text:00403D30 Size            = dword ptr  10h
.text:00403D30
.text:00403D30                 mov     edi, edi
.text:00403D32                 push    ebp
.text:00403D33                 mov     ebp, esp
.text:00403D35                 and     esp, 0FFFFFFF8h
.text:00403D38                 sub     esp, 0Ch
.text:00403D3B                 push    ebx
.text:00403D3C                 push    esi
.text:00403D3D                 push    edi
.text:00403D3E                 mov     edi, [ebp+arg_0]
.text:00403D41                 test    edi, edi
.text:00403D43                 mov     eax, 1
.text:00403D48                 jz      loc_403E31
.text:00403D4E                 cmp     dword ptr [edi+0A290h], 0
.text:00403D55                 jz      loc_403E31
.text:00403D5B                 mov     ecx, [ebp+arg_4]
.text:00403D5E                 test    ecx, ecx
.text:00403D60                 jz      loc_403E31
.text:00403D66                 cmp     byte ptr [edi+0A2E0h], 0
.text:00403D6D                 jz      loc_403E1A
.text:00403D73                 mov     esi, [edi+0A2E8h]
.text:00403D79                 add     edi, 0A2E4h
.text:00403D7F                 cmp     esi, [edi+8]
.text:00403D82                 jbe     short loc_403D90
.text:00403D84                 call    ds:_invalid_parameter_noinfo
.text:00403D8A                 lea     ebx, [ebx+0]
.text:00403D90
.text:00403D90 loc_403D90:                             ; CODE XREF: sub_403D30+52↑j
.text:00403D90                                         ; sub_403D30+A9↓j
.text:00403D90                 mov     ebx, [edi+8]
.text:00403D93                 cmp     [edi+4], ebx
.text:00403D96                 jbe     short loc_403D9E
.text:00403D98                 call    ds:_invalid_parameter_noinfo
.text:00403D9E
.text:00403D9E loc_403D9E:                             ; CODE XREF: sub_403D30+66↑j
.text:00403D9E                 cmp     edi, edi
.text:00403DA0                 jz      short loc_403DA8
.text:00403DA2                 call    ds:_invalid_parameter_noinfo
.text:00403DA8
.text:00403DA8 loc_403DA8:                             ; CODE XREF: sub_403D30+70↑j
.text:00403DA8                 cmp     esi, ebx
.text:00403DAA                 jz      short loc_403E14
.text:00403DAC                 cmp     esi, [edi+8]
.text:00403DAF                 mov     ebx, ds:_invalid_parameter_noinfo
.text:00403DB5                 jb      short loc_403DB9
.text:00403DB7                 call    ebx ; _invalid_parameter_noinfo
.text:00403DB9
.text:00403DB9 loc_403DB9:                             ; CODE XREF: sub_403D30+85↑j
.text:00403DB9                 mov     eax, [ebp+arg_4]
.text:00403DBC                 cmp     [esi], eax
.text:00403DBE                 jnz     short loc_403DCF
.text:00403DC0                 cmp     esi, [edi+8]
.text:00403DC3                 jb      short loc_403DC7
.text:00403DC5                 call    ebx ; _invalid_parameter_noinfo
.text:00403DC7
.text:00403DC7 loc_403DC7:                             ; CODE XREF: sub_403D30+93↑j
.text:00403DC7                 mov     ecx, [ebp+Size]
.text:00403DCA                 cmp     [esi+4], ecx
.text:00403DCD                 jz      short loc_403DDB
.text:00403DCF
.text:00403DCF loc_403DCF:                             ; CODE XREF: sub_403D30+8E↑j
.text:00403DCF                 cmp     esi, [edi+8]
.text:00403DD2                 jb      short loc_403DD6
.text:00403DD4                 call    ebx ; _invalid_parameter_noinfo
.text:00403DD6
.text:00403DD6 loc_403DD6:                             ; CODE XREF: sub_403D30+A2↑j
.text:00403DD6                 add     esi, 8
.text:00403DD9                 jmp     short loc_403D90
.text:00403DDB ; ---------------------------------------------------------------------------
.text:00403DDB
.text:00403DDB loc_403DDB:                             ; CODE XREF: sub_403D30+9D↑j
.text:00403DDB                 cmp     esi, [edi+8]
.text:00403DDE                 jb      short loc_403DE2
.text:00403DE0                 call    ebx ; _invalid_parameter_noinfo
.text:00403DE2
.text:00403DE2 loc_403DE2:                             ; CODE XREF: sub_403D30+AE↑j
.text:00403DE2                 mov     edx, [esi]
.text:00403DE4                 mov     eax, [ebp+arg_0]
.text:00403DE7                 mov     ecx, [eax+1CCh]
.text:00403DED                 push    edx
.text:00403DEE                 mov     edx, [eax+0A2ACh]
.text:00403DF4                 mov     eax, [eax+0A2D4h]
.text:00403DFA                 push    ecx
.text:00403DFB                 push    edx
.text:00403DFC                 call    eax
.text:00403DFE                 push    esi
.text:00403DFF                 push    edi
.text:00403E00                 lea     eax, [esp+20h+var_8]
.text:00403E04                 call    sub_4044C0
.text:00403E09                 xor     eax, eax
.text:00403E0B                 pop     edi
.text:00403E0C                 pop     esi
.text:00403E0D                 pop     ebx
.text:00403E0E                 mov     esp, ebp
.text:00403E10                 pop     ebp
.text:00403E11                 retn    0Ch
.text:00403E14 ; ---------------------------------------------------------------------------
.text:00403E14
.text:00403E14 loc_403E14:                             ; CODE XREF: sub_403D30+7A↑j
.text:00403E14                 mov     edi, [ebp+arg_0]
.text:00403E17                 mov     ecx, [ebp+arg_4]
.text:00403E1A
.text:00403E1A loc_403E1A:                             ; CODE XREF: sub_403D30+3D↑j
.text:00403E1A                 mov     edx, [ebp+Size]
.text:00403E1D                 push    edx             ; Size
.text:00403E1E                 push    0               ; Val
.text:00403E20                 push    ecx             ; void *
.text:00403E21                 mov     [edi+0A294h], ecx
.text:00403E27                 call    memset
.text:00403E2C                 add     esp, 0Ch
.text:00403E2F                 xor     eax, eax
.text:00403E31
.text:00403E31 loc_403E31:                             ; CODE XREF: sub_403D30+18↑j
.text:00403E31                                         ; sub_403D30+25↑j ...
.text:00403E31                 pop     edi
.text:00403E32                 pop     esi
.text:00403E33                 pop     ebx
.text:00403E34                 mov     esp, ebp
.text:00403E36                 pop     ebp
.text:00403E37                 retn    0Ch
.text:00403E37 sub_403D30      endp
.text:00403E37
.text:00403E37 ; ---------------------------------------------------------------------------
.text:00403E3A                 align 10h
.text:00403E40
.text:00403E40 ; =============== S U B R O U T I N E =======================================
.text:00403E40
.text:00403E40 ; Attributes: bp-based frame fuzzy-sp
.text:00403E40
.text:00403E40 sub_403E40      proc near               ; CODE XREF: SimConnect_MapClientEventToSimEvent+B0↓p
.text:00403E40                                         ; SimConnect_TransmitClientEvent+86↓p ...
.text:00403E40
.text:00403E40 var_8           = dword ptr -8
.text:00403E40
.text:00403E40                 mov     edi, edi
.text:00403E42                 push    ebp
.text:00403E43                 mov     ebp, esp
.text:00403E45                 and     esp, 0FFFFFFF8h
.text:00403E48                 sub     esp, 8
.text:00403E4B                 test    esi, esi
.text:00403E4D                 push    ebx
.text:00403E4E                 push    edi
.text:00403E4F                 mov     eax, 1
.text:00403E54                 jz      loc_403FAA
.text:00403E5A                 cmp     byte ptr [esi+0A2E0h], 0
.text:00403E61                 jz      loc_403F19
.text:00403E67                 mov     ebx, [esi+0A2E8h]
.text:00403E6D                 cmp     ebx, [esi+0A2ECh]
.text:00403E73                 lea     edi, [esi+0A2E4h]
.text:00403E79                 jbe     short loc_403E81
.text:00403E7B                 call    ds:_invalid_parameter_noinfo
.text:00403E81
.text:00403E81 loc_403E81:                             ; CODE XREF: sub_403E40+39↑j
.text:00403E81                                         ; sub_403E40+A4↓j
.text:00403E81                 mov     eax, [edi+8]
.text:00403E84                 cmp     [edi+4], eax
.text:00403E87                 mov     [esp+10h+var_8], eax
.text:00403E8B                 jbe     short loc_403E93
.text:00403E8D                 call    ds:_invalid_parameter_noinfo
.text:00403E93
.text:00403E93 loc_403E93:                             ; CODE XREF: sub_403E40+4B↑j
.text:00403E93                 cmp     edi, edi
.text:00403E95                 jz      short loc_403E9D
.text:00403E97                 call    ds:_invalid_parameter_noinfo
.text:00403E9D
.text:00403E9D loc_403E9D:                             ; CODE XREF: sub_403E40+55↑j
.text:00403E9D                 cmp     ebx, [esp+10h+var_8]
.text:00403EA1                 jz      short loc_403EE6
.text:00403EA3                 cmp     ebx, [edi+8]
.text:00403EA6                 jb      short loc_403EB9
.text:00403EA8                 call    ds:_invalid_parameter_noinfo
.text:00403EAE                 cmp     ebx, [edi+8]
.text:00403EB1                 jb      short loc_403EB9
.text:00403EB3                 call    ds:_invalid_parameter_noinfo
.text:00403EB9
.text:00403EB9 loc_403EB9:                             ; CODE XREF: sub_403E40+66↑j
.text:00403EB9                                         ; sub_403E40+71↑j
.text:00403EB9                 mov     eax, [ebx]
.text:00403EBB                 mov     ecx, [ebx+4]
.text:00403EBE                 mov     edx, [esi+1CCh]
.text:00403EC4                 push    eax
.text:00403EC5                 mov     eax, [esi+0A2ACh]
.text:00403ECB                 push    ecx
.text:00403ECC                 mov     ecx, [esi+0A2D8h]
.text:00403ED2                 push    edx
.text:00403ED3                 push    eax
.text:00403ED4                 call    ecx
.text:00403ED6                 cmp     ebx, [edi+8]
.text:00403ED9                 jb      short loc_403EE1
.text:00403EDB                 call    ds:_invalid_parameter_noinfo
.text:00403EE1
.text:00403EE1 loc_403EE1:                             ; CODE XREF: sub_403E40+99↑j
.text:00403EE1                 add     ebx, 8
.text:00403EE4                 jmp     short loc_403E81
.text:00403EE6 ; ---------------------------------------------------------------------------
.text:00403EE6
.text:00403EE6 loc_403EE6:                             ; CODE XREF: sub_403E40+61↑j
.text:00403EE6                 mov     eax, [edi+8]
.text:00403EE9                 cmp     [edi+4], eax
.text:00403EEC                 mov     [esp+10h+var_8], eax
.text:00403EF0                 jbe     short loc_403EF8
.text:00403EF2                 call    ds:_invalid_parameter_noinfo
.text:00403EF8
.text:00403EF8 loc_403EF8:                             ; CODE XREF: sub_403E40+B0↑j
.text:00403EF8                 mov     ebx, [edi+4]
.text:00403EFB                 cmp     ebx, [edi+8]
.text:00403EFE                 jbe     short loc_403F06
.text:00403F00                 call    ds:_invalid_parameter_noinfo
.text:00403F06
.text:00403F06 loc_403F06:                             ; CODE XREF: sub_403E40+BE↑j
.text:00403F06                 mov     edx, [esp+10h+var_8]
.text:00403F0A                 push    edx
.text:00403F0B                 push    edi
.text:00403F0C                 push    ebx
.text:00403F0D                 push    edi
.text:00403F0E                 lea     eax, [esp+20h+var_8]
.text:00403F12                 push    eax
.text:00403F13                 push    edi
.text:00403F14                 call    sub_4045B0
.text:00403F19
.text:00403F19 loc_403F19:                             ; CODE XREF: sub_403E40+21↑j
.text:00403F19                 mov     edi, [esi+0A294h]
.text:00403F1F                 sub     edi, [esi+0A290h]
.text:00403F25                 jz      loc_403FA5
.text:00403F2B                 push    edi             ; unsigned int
.text:00403F2C                 call    ??_U@YAPAXI@Z   ; operator new[](uint)
.text:00403F31                 mov     ebx, eax
.text:00403F33                 add     esp, 4
.text:00403F36                 test    ebx, ebx
.text:00403F38                 jz      short loc_403FA5
.text:00403F3A                 mov     ecx, [esi+0A290h]
.text:00403F40                 push    edi             ; Size
.text:00403F41                 push    ecx             ; Src
.text:00403F42                 push    ebx             ; void *
.text:00403F43                 call    memcpy
.text:00403F48                 add     esp, 0Ch
.text:00403F4B                 push    14h             ; unsigned int
.text:00403F4D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00403F52                 add     esp, 4
.text:00403F55                 test    eax, eax
.text:00403F57                 jz      short loc_403F9C
.text:00403F59                 mov     ecx, [esi+1CCh]
.text:00403F5F                 mov     [eax+0Ch], ecx
.text:00403F62                 mov     ecx, esi
.text:00403F64                 mov     dword ptr [eax], 0
.text:00403F6A                 mov     [eax+4], ebx
.text:00403F6D                 mov     [eax+8], edi
.text:00403F70                 mov     dword ptr [eax+10h], 0
.text:00403F77                 call    sub_401B00
.text:00403F7C                 mov     eax, [esi+0A290h]
.text:00403F82                 push    edi             ; Size
.text:00403F83                 push    0               ; Val
.text:00403F85                 push    eax             ; void *
.text:00403F86                 mov     [esi+0A294h], eax
.text:00403F8C                 call    memset
.text:00403F91                 add     esp, 0Ch
.text:00403F94                 xor     eax, eax
.text:00403F96                 pop     edi
.text:00403F97                 pop     ebx
.text:00403F98                 mov     esp, ebp
.text:00403F9A                 pop     ebp
.text:00403F9B                 retn
.text:00403F9C ; ---------------------------------------------------------------------------
.text:00403F9C
.text:00403F9C loc_403F9C:                             ; CODE XREF: sub_403E40+117↑j
.text:00403F9C                 push    ebx             ; void *
.text:00403F9D                 call    ??_V@YAXPAX@Z   ; operator delete[](void *)
.text:00403FA2                 add     esp, 4
.text:00403FA5
.text:00403FA5 loc_403FA5:                             ; CODE XREF: sub_403E40+E5↑j
.text:00403FA5                                         ; sub_403E40+F8↑j
.text:00403FA5                 mov     eax, 1
.text:00403FAA
.text:00403FAA loc_403FAA:                             ; CODE XREF: sub_403E40+14↑j
.text:00403FAA                 pop     edi
.text:00403FAB                 pop     ebx
.text:00403FAC                 mov     esp, ebp
.text:00403FAE                 pop     ebp
.text:00403FAF                 retn
.text:00403FAF sub_403E40      endp
.text:00403FAF
.text:00403FAF ; ---------------------------------------------------------------------------
.text:00403FB0                 align 20h
.text:00403FC0
.text:00403FC0 ; =============== S U B R O U T I N E =======================================
.text:00403FC0
.text:00403FC0 ; Attributes: bp-based frame
.text:00403FC0
.text:00403FC0 sub_403FC0      proc near               ; DATA XREF: sub_4040D0+81↓o
.text:00403FC0
.text:00403FC0 arg_0           = dword ptr  8
.text:00403FC0
.text:00403FC0                 mov     edi, edi
.text:00403FC2                 push    ebp
.text:00403FC3                 mov     ebp, esp
.text:00403FC5                 push    esi
.text:00403FC6                 mov     esi, [ebp+arg_0]
.text:00403FC9                 test    esi, esi
.text:00403FCB                 jz      short loc_404025
.text:00403FCD                 cmp     dword ptr [esi], 20h ; ' '
.text:00403FD0                 jnz     short loc_404025
.text:00403FD2                 cmp     dword ptr [esi+4], 2
.text:00403FD6                 jnz     short loc_404025
.text:00403FD8                 mov     ecx, [esi+8]
.text:00403FDB                 mov     edx, [esi+0Ch]
.text:00403FDE                 call    sub_402930
.text:00403FE3                 test    eax, eax
.text:00403FE5                 jz      short loc_404025
.text:00403FE7                 cmp     byte ptr [eax+0A2E0h], 0
.text:00403FEE                 jnz     short loc_404025
.text:00403FF0                 mov     ecx, [esi+10h]
.text:00403FF3                 mov     [eax+0A2D0h], ecx
.text:00403FF9                 mov     edx, [esi+14h]
.text:00403FFC                 mov     [eax+0A2D4h], edx
.text:00404002                 mov     ecx, [esi+18h]
.text:00404005                 mov     [eax+0A2D8h], ecx
.text:0040400B                 mov     edx, [esi+1Ch]
.text:0040400E                 mov     [eax+0A2DCh], edx
.text:00404014                 mov     byte ptr [eax+0A2E0h], 1
.text:0040401B                 mov     eax, 1
.text:00404020                 pop     esi
.text:00404021                 pop     ebp
.text:00404022                 retn    4
.text:00404025 ; ---------------------------------------------------------------------------
.text:00404025
.text:00404025 loc_404025:                             ; CODE XREF: sub_403FC0+B↑j
.text:00404025                                         ; sub_403FC0+10↑j ...
.text:00404025                 xor     eax, eax
.text:00404027                 pop     esi
.text:00404028                 pop     ebp
.text:00404029                 retn    4
.text:00404029 sub_403FC0      endp
.text:00404029
.text:00404029 ; ---------------------------------------------------------------------------
.text:0040402C                 align 20h
.text:00404040
.text:00404040 ; =============== S U B R O U T I N E =======================================
.text:00404040
.text:00404040 ; Attributes: bp-based frame
.text:00404040
.text:00404040 sub_404040      proc near               ; DATA XREF: sub_4040D0+88↓o
.text:00404040
.text:00404040 arg_0           = dword ptr  8
.text:00404040 arg_4           = dword ptr  0Ch
.text:00404040 arg_8           = dword ptr  10h
.text:00404040 arg_C           = dword ptr  14h
.text:00404040
.text:00404040                 mov     edi, edi
.text:00404042                 push    ebp
.text:00404043                 mov     ebp, esp
.text:00404045                 push    esi
.text:00404046                 mov     esi, dword_40B410
.text:0040404C                 test    esi, esi
.text:0040404E                 jz      short loc_4040C0
.text:00404050                 mov     eax, [ebp+arg_0]
.text:00404053                 push    edi
.text:00404054                 mov     edi, [ebp+arg_4]
.text:00404057
.text:00404057 loc_404057:                             ; CODE XREF: sub_404040+2F↓j
.text:00404057                 cmp     [esi+1CCh], edi
.text:0040405D                 jnz     short loc_404067
.text:0040405F                 cmp     eax, [esi+0A2ACh]
.text:00404065                 jz      short loc_404077
.text:00404067
.text:00404067 loc_404067:                             ; CODE XREF: sub_404040+1D↑j
.text:00404067                 mov     esi, [esi+0A2A8h]
.text:0040406D                 test    esi, esi
.text:0040406F                 jnz     short loc_404057
.text:00404071                 pop     edi
.text:00404072                 pop     esi
.text:00404073                 pop     ebp
.text:00404074                 retn    10h
.text:00404077 ; ---------------------------------------------------------------------------
.text:00404077
.text:00404077 loc_404077:                             ; CODE XREF: sub_404040+25↑j
.text:00404077                 test    esi, esi
.text:00404079                 jz      short loc_4040BF
.text:0040407B                 push    14h             ; unsigned int
.text:0040407D                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:00404082                 add     esp, 4
.text:00404085                 test    eax, eax
.text:00404087                 jz      short loc_4040B4
.text:00404089                 mov     ecx, [ebp+arg_C]
.text:0040408C                 mov     edx, [ebp+arg_8]
.text:0040408F                 mov     [eax+0Ch], edi
.text:00404092                 mov     dword ptr [eax], 0
.text:00404098                 mov     [eax+4], ecx
.text:0040409B                 mov     [eax+8], edx
.text:0040409E                 mov     dword ptr [eax+10h], 1
.text:004040A5                 mov     edi, eax
.text:004040A7                 mov     eax, esi
.text:004040A9                 call    loc_4029D0
.text:004040AE                 pop     edi
.text:004040AF                 pop     esi
.text:004040B0                 pop     ebp
.text:004040B1                 retn    10h
.text:004040B4 ; ---------------------------------------------------------------------------
.text:004040B4
.text:004040B4 loc_4040B4:                             ; CODE XREF: sub_404040+47↑j
.text:004040B4                 xor     eax, eax
.text:004040B6                 mov     edi, eax
.text:004040B8                 mov     eax, esi
.text:004040BA                 call    loc_4029D0
.text:004040BF
.text:004040BF loc_4040BF:                             ; CODE XREF: sub_404040+39↑j
.text:004040BF                 pop     edi
.text:004040C0
.text:004040C0 loc_4040C0:                             ; CODE XREF: sub_404040+E↑j
.text:004040C0                 pop     esi
.text:004040C1                 pop     ebp
.text:004040C2                 retn    10h
.text:004040C2 sub_404040      endp
.text:004040C2
.text:004040C2 ; ---------------------------------------------------------------------------
.text:004040C5                 align 10h
.text:004040D0
.text:004040D0 ; =============== S U B R O U T I N E =======================================
.text:004040D0
.text:004040D0 ; Attributes: bp-based frame
.text:004040D0
.text:004040D0 sub_4040D0      proc near               ; CODE XREF: sub_404180+EE↓p
.text:004040D0                                         ; sub_4042F0+101↓p
.text:004040D0
.text:004040D0 arg_0           = dword ptr  8
.text:004040D0
.text:004040D0                 mov     edi, edi
.text:004040D2                 push    ebp
.text:004040D3                 mov     ebp, esp
.text:004040D5                 mov     ecx, 2
.text:004040DA                 cmp     [eax+8], ecx
.text:004040DD                 jnz     loc_404171
.text:004040E3                 cmp     [ebp+arg_0], 134h
.text:004040EA                 jnz     loc_404171
.text:004040F0                 cmp     dword ptr [edx+0A2ACh], 0
.text:004040F7                 jnz     short loc_404171
.text:004040F9                 cmp     dword ptr [edx+0A2B0h], 1
.text:00404100                 jnz     short loc_404171
.text:00404102                 mov     eax, [eax+12Ch]
.text:00404108                 test    eax, eax
.text:0040410A                 jz      short loc_404171
.text:0040410C                 mov     [edx+0A2B0h], ecx
.text:00404112                 mov     [edx+0A2ACh], eax
.text:00404118                 lea     eax, [edx+0A2B8h]
.text:0040411E                 xor     ecx, ecx
.text:00404120                 mov     [eax+8], ecx
.text:00404123                 mov     [eax+0Ch], ecx
.text:00404126                 mov     [eax+10h], ecx
.text:00404129                 mov     [eax+14h], ecx
.text:0040412C                 mov     dword ptr [eax], 18h
.text:00404132                 mov     dword ptr [eax+4], 1
.text:00404139                 mov     ecx, [edx+0A2ACh]
.text:0040413F                 push    eax             ; lParam
.text:00404140                 mov     [eax+8], ecx
.text:00404143                 mov     ecx, [edx+1CCh]
.text:00404149                 push    2002Ah          ; wParam
.text:0040414E                 mov     [eax+0Ch], ecx
.text:00404151                 mov     dword ptr [eax+10h], offset sub_403FC0
.text:00404158                 mov     dword ptr [eax+14h], offset sub_404040
.text:0040415F                 mov     edx, [edx+0A2B4h]
.text:00404165                 push    111h            ; Msg
.text:0040416A                 push    edx             ; hWnd
.text:0040416B                 call    ds:PostMessageA
.text:00404171
.text:00404171 loc_404171:                             ; CODE XREF: sub_4040D0+D↑j
.text:00404171                                         ; sub_4040D0+1A↑j ...
.text:00404171                 pop     ebp
.text:00404172                 retn    4
.text:00404172 sub_4040D0      endp
.text:00404172
.text:00404172 ; ---------------------------------------------------------------------------
.text:00404175                 align 10h
.text:00404180
.text:00404180 ; =============== S U B R O U T I N E =======================================
.text:00404180
.text:00404180 ; Attributes: bp-based frame
.text:00404180
.text:00404180 ; int __stdcall sub_404180(void *, int, int)
.text:00404180 sub_404180      proc near               ; CODE XREF: sub_404180+43↓p
.text:00404180                                         ; SimConnect_CallDispatch+18↓p ...
.text:00404180
.text:00404180 arg_0           = dword ptr  8
.text:00404180 arg_4           = dword ptr  0Ch
.text:00404180 arg_8           = dword ptr  10h
.text:00404180
.text:00404180                 mov     edi, edi
.text:00404182                 push    ebp
.text:00404183                 mov     ebp, esp
.text:00404185                 push    ebx
.text:00404186                 push    esi
.text:00404187                 mov     esi, [ebp+arg_0]
.text:0040418A                 xor     ebx, ebx
.text:0040418C                 cmp     esi, ebx
.text:0040418E                 push    edi
.text:0040418F                 mov     edi, 1
.text:00404194                 jnz     short loc_4041DB
.text:00404196                 cmp     [ebp+arg_4], 0FFFFFFFEh
.text:0040419A                 jnz     short loc_4041D2
.text:0040419C                 cmp     [ebp+arg_8], 0FFFFFFFDh
.text:004041A0                 jnz     short loc_4041D2
.text:004041A2                 mov     esi, dword_40B410
.text:004041A8                 cmp     esi, ebx
.text:004041AA                 jz      short loc_4041D2
.text:004041AC                 lea     esp, [esp+0]
.text:004041B0
.text:004041B0 loc_4041B0:                             ; CODE XREF: sub_404180+50↓j
.text:004041B0                 mov     eax, [esi+204h]
.text:004041B6                 cmp     eax, ebx
.text:004041B8                 jz      short loc_4041C8
.text:004041BA                 mov     ecx, [esi+208h]
.text:004041C0                 push    ecx             ; int
.text:004041C1                 push    eax             ; int
.text:004041C2                 push    esi             ; void *
.text:004041C3                 call    sub_404180
.text:004041C8
.text:004041C8 loc_4041C8:                             ; CODE XREF: sub_404180+38↑j
.text:004041C8                 mov     esi, [esi+0A2A8h]
.text:004041CE                 cmp     esi, ebx
.text:004041D0                 jnz     short loc_4041B0
.text:004041D2
.text:004041D2 loc_4041D2:                             ; CODE XREF: sub_404180+1A↑j
.text:004041D2                                         ; sub_404180+20↑j ...
.text:004041D2                 mov     eax, edi
.text:004041D4                 pop     edi
.text:004041D5                 pop     esi
.text:004041D6                 pop     ebx
.text:004041D7                 pop     ebp
.text:004041D8                 retn    0Ch
.text:004041DB ; ---------------------------------------------------------------------------
.text:004041DB
.text:004041DB loc_4041DB:                             ; CODE XREF: sub_404180+14↑j
.text:004041DB                 mov     eax, [esi+200h]
.text:004041E1                 cmp     eax, ebx
.text:004041E3                 jnz     short loc_4041EC
.text:004041E5                 cmp     [ebp+arg_4], ebx
.text:004041E8                 jz      short loc_4041D2
.text:004041EA                 jmp     short loc_4041F1
.text:004041EC ; ---------------------------------------------------------------------------
.text:004041EC
.text:004041EC loc_4041EC:                             ; CODE XREF: sub_404180+63↑j
.text:004041EC                 cmp     [ebp+arg_4], ebx
.text:004041EF                 jz      short loc_404205
.text:004041F1
.text:004041F1 loc_4041F1:                             ; CODE XREF: sub_404180+6A↑j
.text:004041F1                 mov     edx, [ebp+arg_4]
.text:004041F4                 mov     eax, [ebp+arg_8]
.text:004041F7                 mov     [esi+204h], edx
.text:004041FD                 mov     [esi+208h], eax
.text:00404203                 jmp     short loc_404214
.text:00404205 ; ---------------------------------------------------------------------------
.text:00404205
.text:00404205 loc_404205:                             ; CODE XREF: sub_404180+6F↑j
.text:00404205                 mov     ecx, [ebp+arg_8]
.text:00404208                 mov     [esi+204h], eax
.text:0040420E                 mov     [esi+208h], ecx
.text:00404214
.text:00404214 loc_404214:                             ; CODE XREF: sub_404180+83↑j
.text:00404214                 mov     edx, [esi+1E4h]
.text:0040421A                 push    edx             ; lpCriticalSection
.text:0040421B                 call    ds:EnterCriticalSection
.text:00404221                 mov     eax, [esi+1E4h]
.text:00404227                 mov     edi, [esi+1E8h]
.text:0040422D                 push    eax             ; lpCriticalSection
.text:0040422E                 mov     [esi+1ECh], ebx
.text:00404234                 mov     [esi+1E8h], ebx
.text:0040423A                 mov     [esi+1F4h], ebx
.text:00404240                 mov     [esi+1F0h], ebx
.text:00404246                 call    ds:LeaveCriticalSection
.text:0040424C                 cmp     edi, ebx
.text:0040424E                 mov     [ebp+arg_0], edi
.text:00404251                 jz      loc_4042D7
.text:00404257
.text:00404257 loc_404257:                             ; CODE XREF: sub_404180+155↓j
.text:00404257                 mov     eax, [ebp+arg_0]
.text:0040425A                 mov     edi, [eax+8]
.text:0040425D                 cmp     edi, 0Ch
.text:00404260                 mov     ebx, [eax+4]
.text:00404263                 jb      short loc_404292
.text:00404265                 test    ebx, ebx
.text:00404267                 jz      short loc_404292
.text:00404269                 push    edi
.text:0040426A                 mov     eax, ebx
.text:0040426C                 mov     edx, esi
.text:0040426E                 call    sub_4040D0
.text:00404273                 mov     eax, [ebp+arg_4]
.text:00404276                 test    eax, eax
.text:00404278                 jz      short loc_404280
.text:0040427A                 mov     ecx, [ebp+arg_8]
.text:0040427D                 push    ecx
.text:0040427E                 jmp     short loc_40428E
.text:00404280 ; ---------------------------------------------------------------------------
.text:00404280
.text:00404280 loc_404280:                             ; CODE XREF: sub_404180+F8↑j
.text:00404280                 mov     eax, [esi+200h]
.text:00404286                 test    eax, eax
.text:00404288                 jz      short loc_404292
.text:0040428A                 mov     edx, [ebp+arg_8]
.text:0040428D                 push    edx
.text:0040428E
.text:0040428E loc_40428E:                             ; CODE XREF: sub_404180+FE↑j
.text:0040428E                 push    edi
.text:0040428F                 push    ebx
.text:00404290                 call    eax
.text:00404292
.text:00404292 loc_404292:                             ; CODE XREF: sub_404180+E3↑j
.text:00404292                                         ; sub_404180+E7↑j ...
.text:00404292                 mov     edi, [ebp+arg_0]
.text:00404295                 cmp     dword ptr [edi+10h], 0
.text:00404299                 mov     ebx, [edi]
.text:0040429B                 mov     [ebp+arg_0], ebx
.text:0040429E                 jz      short loc_4042C1
.text:004042A0                 mov     eax, [edi+4]
.text:004042A3                 mov     ecx, [esi+1CCh]
.text:004042A9                 mov     edx, [esi+0A2ACh]
.text:004042AF                 push    eax
.text:004042B0                 mov     eax, [esi+0A2DCh]
.text:004042B6                 push    ecx
.text:004042B7                 push    edx
.text:004042B8                 call    eax
.text:004042BA                 mov     dword ptr [edi+4], 0
.text:004042C1
.text:004042C1 loc_4042C1:                             ; CODE XREF: sub_404180+11E↑j
.text:004042C1                 mov     ecx, [edi+4]
.text:004042C4                 push    ecx             ; void *
.text:004042C5                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004042CA                 push    edi             ; void *
.text:004042CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004042D0                 add     esp, 8
.text:004042D3                 test    ebx, ebx
.text:004042D5                 jnz     short loc_404257
.text:004042D7
.text:004042D7 loc_4042D7:                             ; CODE XREF: sub_404180+D1↑j
.text:004042D7                 call    sub_401F80
.text:004042DC                 neg     al
.text:004042DE                 pop     edi
.text:004042DF                 pop     esi
.text:004042E0                 pop     ebx
.text:004042E1                 sbb     eax, eax
.text:004042E3                 and     eax, 2
.text:004042E6                 pop     ebp
.text:004042E7                 retn    0Ch
.text:004042E7 sub_404180      endp
.text:004042E7
.text:004042E7 ; ---------------------------------------------------------------------------
.text:004042EA                 align 10h
.text:004042F0
.text:004042F0 ; =============== S U B R O U T I N E =======================================
.text:004042F0
.text:004042F0 ; Attributes: bp-based frame
.text:004042F0
.text:004042F0 sub_4042F0      proc near               ; CODE XREF: SimConnect_GetNextDispatch+19↓p
.text:004042F0
.text:004042F0 arg_0           = dword ptr  8
.text:004042F0
.text:004042F0                 mov     edi, edi
.text:004042F2                 push    ebp
.text:004042F3                 mov     ebp, esp
.text:004042F5                 mov     ecx, [ebp+arg_0]
.text:004042F8                 push    esi
.text:004042F9                 mov     esi, eax
.text:004042FB                 test    esi, esi
.text:004042FD                 mov     dword ptr [ecx], 0
.text:00404303                 mov     eax, 1
.text:00404308                 mov     dword ptr [ebx], 0
.text:0040430E                 jz      loc_404429
.text:00404314                 mov     eax, [esi+0A2A0h]
.text:0040431A                 test    eax, eax
.text:0040431C                 push    edi
.text:0040431D                 jz      short loc_404368
.text:0040431F                 cmp     dword ptr [eax+10h], 0
.text:00404323                 jz      short loc_40434C
.text:00404325                 mov     edx, [eax+4]
.text:00404328                 mov     eax, [esi+1CCh]
.text:0040432E                 mov     ecx, [esi+0A2ACh]
.text:00404334                 push    edx
.text:00404335                 mov     edx, [esi+0A2DCh]
.text:0040433B                 push    eax
.text:0040433C                 push    ecx
.text:0040433D                 call    edx
.text:0040433F                 mov     eax, [esi+0A2A0h]
.text:00404345                 mov     dword ptr [eax+4], 0
.text:0040434C
.text:0040434C loc_40434C:                             ; CODE XREF: sub_4042F0+33↑j
.text:0040434C                 mov     edi, [esi+0A2A0h]
.text:00404352                 test    edi, edi
.text:00404354                 jz      short loc_404368
.text:00404356                 mov     ecx, [edi+4]
.text:00404359                 push    ecx             ; void *
.text:0040435A                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:0040435F                 push    edi             ; void *
.text:00404360                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00404365                 add     esp, 8
.text:00404368
.text:00404368 loc_404368:                             ; CODE XREF: sub_4042F0+2D↑j
.text:00404368                                         ; sub_4042F0+64↑j
.text:00404368                 mov     edx, [esi+1E4h]
.text:0040436E                 push    edx             ; lpCriticalSection
.text:0040436F                 call    ds:EnterCriticalSection
.text:00404375                 mov     edi, [esi+1E8h]
.text:0040437B                 xor     eax, eax
.text:0040437D                 cmp     edi, eax
.text:0040437F                 jz      short loc_4043AB
.text:00404381                 mov     ecx, [edi]
.text:00404383                 mov     [esi+1E8h], ecx
.text:00404389                 mov     [edi], eax
.text:0040438B                 cmp     [esi+1E8h], eax
.text:00404391                 jnz     short loc_404399
.text:00404393                 mov     [esi+1ECh], eax
.text:00404399
.text:00404399 loc_404399:                             ; CODE XREF: sub_4042F0+A1↑j
.text:00404399                 add     dword ptr [esi+1F0h], 0FFFFFFFFh
.text:004043A0                 mov     edx, [edi+8]
.text:004043A3                 sub     [esi+1F4h], edx
.text:004043A9                 jmp     short loc_4043B7
.text:004043AB ; ---------------------------------------------------------------------------
.text:004043AB
.text:004043AB loc_4043AB:                             ; CODE XREF: sub_4042F0+8F↑j
.text:004043AB                 mov     [esi+1F4h], eax
.text:004043B1                 mov     [esi+1F0h], eax
.text:004043B7
.text:004043B7 loc_4043B7:                             ; CODE XREF: sub_4042F0+B9↑j
.text:004043B7                 mov     eax, [esi+1E4h]
.text:004043BD                 push    eax             ; lpCriticalSection
.text:004043BE                 call    ds:LeaveCriticalSection
.text:004043C4                 test    edi, edi
.text:004043C6                 mov     [esi+0A2A0h], edi
.text:004043CC                 jz      short loc_404415
.text:004043CE                 mov     ecx, [edi+8]
.text:004043D1                 mov     [ebx], ecx
.text:004043D3                 mov     edx, [esi+0A2A0h]
.text:004043D9                 mov     eax, [edx+4]
.text:004043DC                 mov     edx, [ebp+arg_0]
.text:004043DF                 mov     [edx], eax
.text:004043E1                 mov     ecx, [ebx]
.text:004043E3                 cmp     ecx, 0Ch
.text:004043E6                 jb      short loc_4043FE
.text:004043E8                 test    eax, eax
.text:004043EA                 jz      short loc_4043FE
.text:004043EC                 push    ecx
.text:004043ED                 mov     edx, esi
.text:004043EF                 xor     edi, edi
.text:004043F1                 call    sub_4040D0
.text:004043F6                 mov     eax, edi
.text:004043F8                 pop     edi
.text:004043F9                 pop     esi
.text:004043FA                 pop     ebp
.text:004043FB                 retn    4
.text:004043FE ; ---------------------------------------------------------------------------
.text:004043FE
.text:004043FE loc_4043FE:                             ; CODE XREF: sub_4042F0+F6↑j
.text:004043FE                                         ; sub_4042F0+FA↑j
.text:004043FE                 pop     edi
.text:004043FF                 mov     dword ptr [edx], 0
.text:00404405                 mov     dword ptr [ebx], 0
.text:0040440B                 mov     eax, 1
.text:00404410                 pop     esi
.text:00404411                 pop     ebp
.text:00404412                 retn    4
.text:00404415 ; ---------------------------------------------------------------------------
.text:00404415
.text:00404415 loc_404415:                             ; CODE XREF: sub_4042F0+DC↑j
.text:00404415                 call    sub_401F80
.text:0040441A                 test    al, al
.text:0040441C                 mov     eax, 2
.text:00404421                 jnz     short loc_404428
.text:00404423                 mov     eax, 1
.text:00404428
.text:00404428 loc_404428:                             ; CODE XREF: sub_4042F0+131↑j
.text:00404428                 pop     edi
.text:00404429
.text:00404429 loc_404429:                             ; CODE XREF: sub_4042F0+1E↑j
.text:00404429                 pop     esi
.text:0040442A                 pop     ebp
.text:0040442B                 retn    4
.text:0040442B sub_4042F0      endp
.text:0040442B
.text:0040442B ; ---------------------------------------------------------------------------
.text:0040442E                 align 20h
.text:00404440
.text:00404440 ; =============== S U B R O U T I N E =======================================
.text:00404440
.text:00404440 ; Attributes: bp-based frame
.text:00404440
.text:00404440 sub_404440      proc near               ; CODE XREF: sub_403C30+A4↑p
.text:00404440
.text:00404440 var_8           = dword ptr -8
.text:00404440 var_4           = dword ptr -4
.text:00404440
.text:00404440                 mov     edi, edi
.text:00404442                 push    ebp
.text:00404443                 mov     ebp, esp
.text:00404445                 mov     ecx, [esi+4]
.text:00404448                 sub     esp, 0Ch
.text:0040444B                 test    ecx, ecx
.text:0040444D                 push    edi
.text:0040444E                 jnz     short loc_404454
.text:00404450                 xor     edx, edx
.text:00404452                 jmp     short loc_40445C
.text:00404454 ; ---------------------------------------------------------------------------
.text:00404454
.text:00404454 loc_404454:                             ; CODE XREF: sub_404440+E↑j
.text:00404454                 mov     edx, [esi+8]
.text:00404457                 sub     edx, ecx
.text:00404459                 sar     edx, 3
.text:0040445C
.text:0040445C loc_40445C:                             ; CODE XREF: sub_404440+12↑j
.text:0040445C                 test    ecx, ecx
.text:0040445E                 jz      short loc_404494
.text:00404460                 mov     eax, [esi+0Ch]
.text:00404463                 sub     eax, ecx
.text:00404465                 sar     eax, 3
.text:00404468                 cmp     edx, eax
.text:0040446A                 jnb     short loc_404494
.text:0040446C                 mov     edi, [esi+8]
.text:0040446F                 mov     byte ptr [ebp+var_4], 0
.text:00404473                 mov     eax, [ebp+var_4]
.text:00404476                 mov     ecx, [ebp+var_4]
.text:00404479                 push    eax
.text:0040447A                 push    ecx
.text:0040447B                 mov     edx, ebx
.text:0040447D                 mov     ecx, 1
.text:00404482                 mov     eax, edi
.text:00404484                 call    sub_404A20
.text:00404489                 add     edi, 8
.text:0040448C                 mov     [esi+8], edi
.text:0040448F                 pop     edi
.text:00404490                 mov     esp, ebp
.text:00404492                 pop     ebp
.text:00404493                 retn
.text:00404494 ; ---------------------------------------------------------------------------
.text:00404494
.text:00404494 loc_404494:                             ; CODE XREF: sub_404440+1E↑j
.text:00404494                                         ; sub_404440+2A↑j
.text:00404494                 mov     edi, [esi+8]
.text:00404497                 cmp     ecx, edi
.text:00404499                 jbe     short loc_4044A1
.text:0040449B                 call    ds:_invalid_parameter_noinfo
.text:004044A1
.text:004044A1 loc_4044A1:                             ; CODE XREF: sub_404440+59↑j
.text:004044A1                 push    edi             ; int
.text:004044A2                 push    esi             ; int
.text:004044A3                 push    ebx             ; void *
.text:004044A4                 lea     edx, [ebp+var_8]
.text:004044A7                 push    edx             ; int
.text:004044A8                 mov     eax, esi
.text:004044AA                 call    sub_404510
.text:004044AF                 pop     edi
.text:004044B0                 mov     esp, ebp
.text:004044B2                 pop     ebp
.text:004044B3                 retn
.text:004044B3 sub_404440      endp
.text:004044B3
.text:004044B3 ; ---------------------------------------------------------------------------
.text:004044B4                 align 10h
.text:004044C0
.text:004044C0 ; =============== S U B R O U T I N E =======================================
.text:004044C0
.text:004044C0 ; Attributes: bp-based frame
.text:004044C0
.text:004044C0 sub_4044C0      proc near               ; CODE XREF: sub_403D30+D4↑p
.text:004044C0
.text:004044C0 arg_0           = dword ptr  8
.text:004044C0 arg_4           = dword ptr  0Ch
.text:004044C0
.text:004044C0                 mov     edi, edi
.text:004044C2                 push    ebp
.text:004044C3                 mov     ebp, esp
.text:004044C5                 mov     ecx, [ebp+arg_4]
.text:004044C8                 push    esi
.text:004044C9                 mov     esi, [edi+8]
.text:004044CC                 add     ecx, 8
.text:004044CF                 cmp     ecx, esi
.text:004044D1                 jz      short loc_4044EC
.text:004044D3                 lea     edx, [ecx-8]
.text:004044D6                 push    ebx
.text:004044D7
.text:004044D7 loc_4044D7:                             ; CODE XREF: sub_4044C0+29↓j
.text:004044D7                 mov     ebx, [ecx]
.text:004044D9                 mov     [edx], ebx
.text:004044DB                 mov     ebx, [ecx+4]
.text:004044DE                 mov     [edx+4], ebx
.text:004044E1                 add     ecx, 8
.text:004044E4                 add     edx, 8
.text:004044E7                 cmp     ecx, esi
.text:004044E9                 jnz     short loc_4044D7
.text:004044EB                 pop     ebx
.text:004044EC
.text:004044EC loc_4044EC:                             ; CODE XREF: sub_4044C0+11↑j
.text:004044EC                 mov     ecx, [ebp+arg_0]
.text:004044EF                 mov     edx, [ebp+arg_4]
.text:004044F2                 add     dword ptr [edi+8], 0FFFFFFF8h
.text:004044F6                 mov     [eax], ecx
.text:004044F8                 mov     [eax+4], edx
.text:004044FB                 pop     esi
.text:004044FC                 pop     ebp
.text:004044FD                 retn    8
.text:004044FD sub_4044C0      endp
.text:004044FD
.text:004044FD ; ---------------------------------------------------------------------------
.text:00404500                 db 10h dup(0CCh)
.text:00404510
.text:00404510 ; =============== S U B R O U T I N E =======================================
.text:00404510
.text:00404510 ; Attributes: bp-based frame
.text:00404510
.text:00404510 ; int __stdcall sub_404510(int, void *, int, int)
.text:00404510 sub_404510      proc near               ; CODE XREF: sub_404440+6A↑p
.text:00404510
.text:00404510 arg_0           = dword ptr  8
.text:00404510 arg_4           = dword ptr  0Ch
.text:00404510 arg_8           = dword ptr  10h
.text:00404510 arg_C           = dword ptr  14h
.text:00404510
.text:00404510                 mov     edi, edi
.text:00404512                 push    ebp
.text:00404513                 mov     ebp, esp
.text:00404515                 push    ecx
.text:00404516                 push    ebx
.text:00404517                 push    esi
.text:00404518                 mov     esi, eax
.text:0040451A                 push    edi
.text:0040451B                 mov     edi, [esi+4]
.text:0040451E                 test    edi, edi
.text:00404520                 jz      short loc_40452E
.text:00404522                 mov     eax, [esi+8]
.text:00404525                 mov     ecx, eax
.text:00404527                 sub     ecx, edi
.text:00404529                 sar     ecx, 3
.text:0040452C                 jnz     short loc_404532
.text:0040452E
.text:0040452E loc_40452E:                             ; CODE XREF: sub_404510+10↑j
.text:0040452E                 xor     ebx, ebx
.text:00404530                 jmp     short loc_404555
.text:00404532 ; ---------------------------------------------------------------------------
.text:00404532
.text:00404532 loc_404532:                             ; CODE XREF: sub_404510+1C↑j
.text:00404532                 cmp     edi, eax
.text:00404534                 jbe     short loc_40453C
.text:00404536                 call    ds:_invalid_parameter_noinfo
.text:0040453C
.text:0040453C loc_40453C:                             ; CODE XREF: sub_404510+24↑j
.text:0040453C                 mov     eax, [ebp+arg_8]
.text:0040453F                 test    eax, eax
.text:00404541                 jz      short loc_404547
.text:00404543                 cmp     eax, esi
.text:00404545                 jz      short loc_40454D
.text:00404547
.text:00404547 loc_404547:                             ; CODE XREF: sub_404510+31↑j
.text:00404547                 call    ds:_invalid_parameter_noinfo
.text:0040454D
.text:0040454D loc_40454D:                             ; CODE XREF: sub_404510+35↑j
.text:0040454D                 mov     ebx, [ebp+arg_C]
.text:00404550                 sub     ebx, edi
.text:00404552                 sar     ebx, 3
.text:00404555
.text:00404555 loc_404555:                             ; CODE XREF: sub_404510+20↑j
.text:00404555                 mov     edx, [ebp+arg_C]
.text:00404558                 mov     eax, [ebp+arg_8]
.text:0040455B                 mov     ecx, [ebp+arg_4]
.text:0040455E                 push    edx             ; int
.text:0040455F                 push    eax             ; int
.text:00404560                 push    ecx             ; void *
.text:00404561                 mov     ecx, esi
.text:00404563                 call    sub_404630
.text:00404568                 mov     edi, [esi+4]
.text:0040456B                 cmp     edi, [esi+8]
.text:0040456E                 jbe     short loc_404576
.text:00404570                 call    ds:_invalid_parameter_noinfo
.text:00404576
.text:00404576 loc_404576:                             ; CODE XREF: sub_404510+5E↑j
.text:00404576                 mov     [ebp+arg_C], edi
.text:00404579                 lea     edi, [edi+ebx*8]
.text:0040457C                 cmp     edi, [esi+8]
.text:0040457F                 ja      short loc_404586
.text:00404581                 cmp     edi, [esi+4]
.text:00404584                 jnb     short loc_40458C
.text:00404586
.text:00404586 loc_404586:                             ; CODE XREF: sub_404510+6F↑j
.text:00404586                 call    ds:_invalid_parameter_noinfo
.text:0040458C
.text:0040458C loc_40458C:                             ; CODE XREF: sub_404510+74↑j
.text:0040458C                 mov     eax, [ebp+arg_0]
.text:0040458F                 mov     [eax+4], edi
.text:00404592                 pop     edi
.text:00404593                 mov     [eax], esi
.text:00404595                 pop     esi
.text:00404596                 pop     ebx
.text:00404597                 mov     esp, ebp
.text:00404599                 pop     ebp
.text:0040459A                 retn    10h
.text:0040459A sub_404510      endp
.text:0040459A
.text:0040459A ; ---------------------------------------------------------------------------
.text:0040459D                 db 13h dup(0CCh)
.text:004045B0
.text:004045B0 ; =============== S U B R O U T I N E =======================================
.text:004045B0
.text:004045B0 ; Attributes: bp-based frame
.text:004045B0
.text:004045B0 sub_4045B0      proc near               ; CODE XREF: sub_403E40+D4↑p
.text:004045B0
.text:004045B0 arg_0           = dword ptr  8
.text:004045B0 arg_4           = dword ptr  0Ch
.text:004045B0 arg_8           = dword ptr  10h
.text:004045B0 arg_C           = dword ptr  14h
.text:004045B0 arg_10          = dword ptr  18h
.text:004045B0 arg_14          = dword ptr  1Ch
.text:004045B0
.text:004045B0                 mov     edi, edi
.text:004045B2                 push    ebp
.text:004045B3                 mov     ebp, esp
.text:004045B5                 push    ebx
.text:004045B6                 mov     ebx, [ebp+arg_4]
.text:004045B9                 push    esi
.text:004045BA                 push    edi
.text:004045BB                 mov     edi, [ebp+arg_8]
.text:004045BE                 test    edi, edi
.text:004045C0                 jz      short loc_4045C7
.text:004045C2                 cmp     edi, [ebp+arg_10]
.text:004045C5                 jz      short loc_4045CD
.text:004045C7
.text:004045C7 loc_4045C7:                             ; CODE XREF: sub_4045B0+10↑j
.text:004045C7                 call    ds:_invalid_parameter_noinfo
.text:004045CD
.text:004045CD loc_4045CD:                             ; CODE XREF: sub_4045B0+15↑j
.text:004045CD                 mov     esi, [ebp+arg_C]
.text:004045D0                 mov     eax, [ebp+arg_14]
.text:004045D3                 cmp     esi, eax
.text:004045D5                 jz      short loc_40460F
.text:004045D7                 mov     ecx, [ebp+arg_0]
.text:004045DA                 mov     ecx, [ecx+8]
.text:004045DD                 mov     edx, ecx
.text:004045DF                 sub     edx, eax
.text:004045E1                 sar     edx, 3
.text:004045E4                 cmp     eax, ecx
.text:004045E6                 lea     edi, [esi+edx*8]
.text:004045E9                 jz      short loc_404606
.text:004045EB                 mov     edx, esi
.text:004045ED                 sub     edx, eax
.text:004045EF                 nop
.text:004045F0
.text:004045F0 loc_4045F0:                             ; CODE XREF: sub_4045B0+51↓j
.text:004045F0                 mov     ebx, [eax]
.text:004045F2                 mov     [edx+eax], ebx
.text:004045F5                 mov     ebx, [eax+4]
.text:004045F8                 mov     [edx+eax+4], ebx
.text:004045FC                 add     eax, 8
.text:004045FF                 cmp     eax, ecx
.text:00404601                 jnz     short loc_4045F0
.text:00404603                 mov     ebx, [ebp+arg_4]
.text:00404606
.text:00404606 loc_404606:                             ; CODE XREF: sub_4045B0+39↑j
.text:00404606                 mov     eax, [ebp+arg_0]
.text:00404609                 mov     [eax+8], edi
.text:0040460C                 mov     edi, [ebp+arg_8]
.text:0040460F
.text:0040460F loc_40460F:                             ; CODE XREF: sub_4045B0+25↑j
.text:0040460F                 mov     [ebx], edi
.text:00404611                 pop     edi
.text:00404612                 mov     [ebx+4], esi
.text:00404615                 pop     esi
.text:00404616                 mov     eax, ebx
.text:00404618                 pop     ebx
.text:00404619                 pop     ebp
.text:0040461A                 retn    18h
.text:0040461A sub_4045B0      endp
.text:0040461A
.text:0040461A ; ---------------------------------------------------------------------------
.text:0040461D                 db 13h dup(0CCh)
.text:00404630
.text:00404630 ; =============== S U B R O U T I N E =======================================
.text:00404630
.text:00404630 ; Attributes: bp-based frame
.text:00404630
.text:00404630 ; int __stdcall sub_404630(void *, int, int)
.text:00404630 sub_404630      proc near               ; CODE XREF: sub_404510+53↑p
.text:00404630
.text:00404630 var_20          = dword ptr -20h
.text:00404630 var_1C          = dword ptr -1Ch
.text:00404630 var_18          = dword ptr -18h
.text:00404630 var_10          = dword ptr -10h
.text:00404630 var_C           = dword ptr -0Ch
.text:00404630 var_4           = dword ptr -4
.text:00404630 arg_0           = dword ptr  8
.text:00404630 arg_4           = dword ptr  0Ch
.text:00404630 arg_8           = dword ptr  10h
.text:00404630
.text:00404630 ; FUNCTION CHUNK AT .text:00408E00 SIZE 0000001B BYTES
.text:00404630
.text:00404630 ; __unwind { // SEH_404630
.text:00404630                 mov     edi, edi
.text:00404632                 push    ebp
.text:00404633                 mov     ebp, esp
.text:00404635                 push    0FFFFFFFFh
.text:00404637                 push    offset SEH_404630
.text:0040463C                 mov     eax, large fs:0
.text:00404642                 push    eax
.text:00404643                 sub     esp, 18h
.text:00404646                 push    ebx
.text:00404647                 push    esi
.text:00404648                 push    edi
.text:00404649                 mov     eax, ___security_cookie
.text:0040464E                 xor     eax, ebp
.text:00404650                 push    eax
.text:00404651                 lea     eax, [ebp+var_C]
.text:00404654                 mov     large fs:0, eax
.text:0040465A                 mov     [ebp+var_10], esp
.text:0040465D                 mov     eax, [ebp+arg_0]
.text:00404660                 mov     edi, ecx
.text:00404662                 mov     ecx, [eax]
.text:00404664                 mov     edx, [eax+4]
.text:00404667                 mov     eax, [edi+4]
.text:0040466A                 test    eax, eax
.text:0040466C                 mov     [ebp+var_20], ecx
.text:0040466F                 mov     [ebp+var_1C], edx
.text:00404672                 jnz     short loc_404678
.text:00404674                 xor     ebx, ebx
.text:00404676                 jmp     short loc_404680
.text:00404678 ; ---------------------------------------------------------------------------
.text:00404678
.text:00404678 loc_404678:                             ; CODE XREF: sub_404630+42↑j
.text:00404678                 mov     ebx, [edi+0Ch]
.text:0040467B                 sub     ebx, eax
.text:0040467D                 sar     ebx, 3
.text:00404680
.text:00404680 loc_404680:                             ; CODE XREF: sub_404630+46↑j
.text:00404680                 test    eax, eax
.text:00404682                 jnz     short loc_404688
.text:00404684                 xor     ecx, ecx
.text:00404686                 jmp     short loc_404690
.text:00404688 ; ---------------------------------------------------------------------------
.text:00404688
.text:00404688 loc_404688:                             ; CODE XREF: sub_404630+52↑j
.text:00404688                 mov     ecx, [edi+8]
.text:0040468B                 sub     ecx, eax
.text:0040468D                 sar     ecx, 3
.text:00404690
.text:00404690 loc_404690:                             ; CODE XREF: sub_404630+56↑j
.text:00404690                 mov     edx, 1FFFFFFFh
.text:00404695                 sub     edx, ecx
.text:00404697                 cmp     edx, 1
.text:0040469A                 jnb     short loc_4046A1
.text:0040469C                 call    sub_4048A0
.text:004046A1
.text:004046A1 loc_4046A1:                             ; CODE XREF: sub_404630+6A↑j
.text:004046A1                 test    eax, eax
.text:004046A3                 jnz     short loc_4046A9
.text:004046A5                 xor     ecx, ecx
.text:004046A7                 jmp     short loc_4046B1
.text:004046A9 ; ---------------------------------------------------------------------------
.text:004046A9
.text:004046A9 loc_4046A9:                             ; CODE XREF: sub_404630+73↑j
.text:004046A9                 mov     ecx, [edi+8]
.text:004046AC                 sub     ecx, eax
.text:004046AE                 sar     ecx, 3
.text:004046B1
.text:004046B1 loc_4046B1:                             ; CODE XREF: sub_404630+77↑j
.text:004046B1                 add     ecx, 1
.text:004046B4                 cmp     ebx, ecx
.text:004046B6                 jnb     loc_4047BF
.text:004046BC                 mov     ecx, ebx
.text:004046BE                 shr     ecx, 1
.text:004046C0                 mov     edx, 1FFFFFFFh
.text:004046C5                 sub     edx, ecx
.text:004046C7                 cmp     edx, ebx
.text:004046C9                 jnb     short loc_4046CF
.text:004046CB                 xor     ebx, ebx
.text:004046CD                 jmp     short loc_4046D1
.text:004046CF ; ---------------------------------------------------------------------------
.text:004046CF
.text:004046CF loc_4046CF:                             ; CODE XREF: sub_404630+99↑j
.text:004046CF                 add     ebx, ecx
.text:004046D1
.text:004046D1 loc_4046D1:                             ; CODE XREF: sub_404630+9D↑j
.text:004046D1                 test    eax, eax
.text:004046D3                 jnz     short loc_4046D9
.text:004046D5                 xor     ecx, ecx
.text:004046D7                 jmp     short loc_4046E1
.text:004046D9 ; ---------------------------------------------------------------------------
.text:004046D9
.text:004046D9 loc_4046D9:                             ; CODE XREF: sub_404630+A3↑j
.text:004046D9                 mov     ecx, [edi+8]
.text:004046DC                 sub     ecx, eax
.text:004046DE                 sar     ecx, 3
.text:004046E1
.text:004046E1 loc_4046E1:                             ; CODE XREF: sub_404630+A7↑j
.text:004046E1                 add     ecx, 1
.text:004046E4                 cmp     ebx, ecx
.text:004046E6                 jnb     short loc_4046FB
.text:004046E8                 test    eax, eax
.text:004046EA                 jnz     short loc_4046F0
.text:004046EC                 xor     ecx, ecx
.text:004046EE                 jmp     short loc_4046F8
.text:004046F0 ; ---------------------------------------------------------------------------
.text:004046F0
.text:004046F0 loc_4046F0:                             ; CODE XREF: sub_404630+BA↑j
.text:004046F0                 mov     ecx, [edi+8]
.text:004046F3                 sub     ecx, eax
.text:004046F5                 sar     ecx, 3
.text:004046F8
.text:004046F8 loc_4046F8:                             ; CODE XREF: sub_404630+BE↑j
.text:004046F8                 lea     ebx, [ecx+1]
.text:004046FB
.text:004046FB loc_4046FB:                             ; CODE XREF: sub_404630+B6↑j
.text:004046FB                 mov     ecx, ebx
.text:004046FD                 call    sub_404920
.text:00404702 ;   try {
.text:00404702                 mov     [ebp+var_4], 0
.text:00404709                 mov     ecx, [edi+4]
.text:0040470C                 mov     byte ptr [ebp+var_18], 0
.text:00404710                 mov     edx, [ebp+var_18]
.text:00404713                 push    edx
.text:00404714                 mov     [ebp+arg_0], eax
.text:00404717                 mov     edx, [ebp+arg_0]
.text:0040471A                 push    edx
.text:0040471B                 mov     edx, [ebp+arg_8]
.text:0040471E                 call    sub_404A50
.text:00404723                 mov     ecx, [ebp+arg_0]
.text:00404726                 mov     esi, eax
.text:00404728                 mov     byte ptr [ebp+var_18], 0
.text:0040472C                 mov     eax, [ebp+var_18]
.text:0040472F                 push    eax
.text:00404730                 push    ecx
.text:00404731                 lea     edx, [ebp+var_20]
.text:00404734                 mov     ecx, 1
.text:00404739                 mov     eax, esi
.text:0040473B                 call    sub_404A20
.text:00404740                 mov     ecx, [ebp+arg_0]
.text:00404743                 mov     edx, [edi+8]
.text:00404746                 mov     byte ptr [ebp+var_18], 0
.text:0040474A                 mov     eax, [ebp+var_18]
.text:0040474D                 push    eax
.text:0040474E                 add     esi, 8
.text:00404751                 push    ecx
.text:00404752                 mov     ecx, [ebp+arg_8]
.text:00404755                 mov     eax, esi
.text:00404757                 call    sub_404A50
.text:00404757 ;   } // starts at 404702
.text:0040475C                 mov     [ebp+var_4], 0FFFFFFFFh
.text:00404763                 mov     eax, [edi+4]
.text:00404766                 test    eax, eax
.text:00404768                 jnz     short loc_40476E
.text:0040476A                 xor     esi, esi
.text:0040476C                 jmp     short loc_404776
.text:0040476E ; ---------------------------------------------------------------------------
.text:0040476E
.text:0040476E loc_40476E:                             ; CODE XREF: sub_404630+138↑j
.text:0040476E                 mov     esi, [edi+8]
.text:00404771                 sub     esi, eax
.text:00404773                 sar     esi, 3
.text:00404776
.text:00404776 loc_404776:                             ; CODE XREF: sub_404630+13C↑j
.text:00404776                 test    eax, eax
.text:00404778                 jz      short loc_404783
.text:0040477A                 push    eax             ; void *
.text:0040477B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00404780                 add     esp, 4
.text:00404783
.text:00404783 loc_404783:                             ; CODE XREF: sub_404630+148↑j
.text:00404783                 mov     eax, [ebp+arg_0]
.text:00404786                 lea     edx, [eax+ebx*8]
.text:00404789                 lea     ecx, [eax+esi*8+8]
.text:0040478D                 mov     [edi+0Ch], edx
.text:00404790                 mov     [edi+8], ecx
.text:00404793                 mov     [edi+4], eax
.text:00404796                 mov     ecx, [ebp+var_C]
.text:00404799                 mov     large fs:0, ecx
.text:004047A0                 pop     ecx
.text:004047A1                 pop     edi
.text:004047A2                 pop     esi
.text:004047A3                 pop     ebx
.text:004047A4                 mov     esp, ebp
.text:004047A6                 pop     ebp
.text:004047A7                 retn    0Ch
.text:004047AA ; ---------------------------------------------------------------------------
.text:004047AA
.text:004047AA loc_4047AA:                             ; DATA XREF: .text:stru_409178↓o
.text:004047AA ;   catch(...) // owned by 404702
.text:004047AA                 mov     edx, [ebp+arg_0]
.text:004047AD                 push    edx             ; void *
.text:004047AE                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:004047B3                 add     esp, 4
.text:004047B6
.text:004047B6 loc_4047B6:                             ; DATA XREF: .text:stru_409188↓o
.text:004047B6 ;   catch(...) // owned by 4047E9       ; pThrowInfo
.text:004047B6                 push    0
.text:004047B8                 push    0               ; pExceptionObject
.text:004047BA                 call    _CxxThrowException
.text:004047BF ; ---------------------------------------------------------------------------
.text:004047BF
.text:004047BF loc_4047BF:                             ; CODE XREF: sub_404630+86↑j
.text:004047BF                 mov     ebx, [edi+8]
.text:004047C2                 mov     esi, [ebp+arg_8]
.text:004047C5                 mov     eax, ebx
.text:004047C7                 sub     eax, esi
.text:004047C9                 sar     eax, 3
.text:004047CC                 cmp     eax, 1
.text:004047CF                 mov     byte ptr [ebp+arg_0], 0
.text:004047D3                 mov     edx, [ebp+arg_0]
.text:004047D6                 jnb     short loc_40484B
.text:004047D8                 mov     ecx, [ebp+arg_0]
.text:004047DB                 push    ecx
.text:004047DC                 push    edx
.text:004047DD                 lea     eax, [esi+8]
.text:004047E0                 mov     edx, ebx
.text:004047E2                 mov     ecx, esi
.text:004047E4                 call    sub_404A50
.text:004047E9 ;   try {
.text:004047E9                 mov     [ebp+var_4], 2
.text:004047F0                 mov     eax, [edi+8]
.text:004047F3                 mov     edx, eax
.text:004047F5                 sub     edx, esi
.text:004047F7                 sar     edx, 3
.text:004047FA                 mov     ecx, 1
.text:004047FF                 sub     ecx, edx
.text:00404801                 mov     byte ptr [ebp+arg_0], 0
.text:00404805                 mov     edx, [ebp+arg_0]
.text:00404808                 push    edx
.text:00404809                 mov     edx, [ebp+arg_0]
.text:0040480C                 push    edx
.text:0040480D                 lea     edx, [ebp+var_20]
.text:00404810                 call    sub_404A20
.text:00404815                 add     dword ptr [edi+8], 8
.text:00404819                 mov     edi, [edi+8]
.text:0040481C                 lea     ecx, [edi-8]
.text:0040481F                 cmp     esi, ecx
.text:00404821                 mov     eax, esi
.text:00404823                 jz      short loc_404887
.text:00404825
.text:00404825 loc_404825:                             ; CODE XREF: sub_404630+205↓j
.text:00404825                 mov     edx, [ebp+var_20]
.text:00404828                 mov     [eax], edx
.text:0040482A                 mov     edx, [ebp+var_1C]
.text:0040482D                 mov     [eax+4], edx
.text:00404830                 add     eax, 8
.text:00404833                 cmp     eax, ecx
.text:00404835                 jnz     short loc_404825
.text:00404837                 mov     ecx, [ebp+var_C]
.text:0040483A                 mov     large fs:0, ecx
.text:00404841                 pop     ecx
.text:00404842                 pop     edi
.text:00404843                 pop     esi
.text:00404844                 pop     ebx
.text:00404845                 mov     esp, ebp
.text:00404847                 pop     ebp
.text:00404848                 retn    0Ch
.text:0040484B ; ---------------------------------------------------------------------------
.text:0040484B
.text:0040484B loc_40484B:                             ; CODE XREF: sub_404630+1A6↑j
.text:0040484B                 mov     eax, [ebp+arg_0]
.text:0040484E                 push    eax
.text:0040484F                 lea     ecx, [ebx-8]
.text:00404852                 push    edx
.text:00404853                 mov     eax, ebx
.text:00404855                 mov     edx, ebx
.text:00404857                 mov     [ebp+arg_8], ecx
.text:0040485A                 call    sub_404A50
.text:0040485F                 mov     ecx, [ebp+arg_8]
.text:00404862                 mov     edx, ebx
.text:00404864                 mov     [edi+8], eax
.text:00404867                 call    sub_4049B0
.text:0040486C                 lea     ecx, [esi+8]
.text:0040486F                 cmp     esi, ecx
.text:00404871                 mov     eax, esi
.text:00404873                 jz      short loc_404887
.text:00404875
.text:00404875 loc_404875:                             ; CODE XREF: sub_404630+255↓j
.text:00404875                 mov     edx, [ebp+var_20]
.text:00404878                 mov     [eax], edx
.text:0040487A                 mov     edx, [ebp+var_1C]
.text:0040487D                 mov     [eax+4], edx
.text:00404880                 add     eax, 8
.text:00404883                 cmp     eax, ecx
.text:00404885                 jnz     short loc_404875
.text:00404887
.text:00404887 loc_404887:                             ; CODE XREF: sub_404630+1F3↑j
.text:00404887                                         ; sub_404630+243↑j
.text:00404887                 mov     ecx, [ebp+var_C]
.text:0040488A                 mov     large fs:0, ecx
.text:00404891                 pop     ecx
.text:00404892                 pop     edi
.text:00404893                 pop     esi
.text:00404894                 pop     ebx
.text:00404895                 mov     esp, ebp
.text:00404897                 pop     ebp
.text:00404898                 retn    0Ch
.text:00404898 ;   } // starts at 4047E9
.text:00404898 ; } // starts at 404630
.text:00404898 sub_404630      endp
.text:00404898
.text:00404898 ; ---------------------------------------------------------------------------
.text:0040489B                 align 10h
.text:004048A0
.text:004048A0 ; =============== S U B R O U T I N E =======================================
.text:004048A0
.text:004048A0 ; Attributes: bp-based frame
.text:004048A0
.text:004048A0 sub_4048A0      proc near               ; CODE XREF: sub_404630+6C↑p
.text:004048A0
.text:004048A0 pExceptionObject= dword ptr -50h
.text:004048A0 var_44          = byte ptr -44h
.text:004048A0 var_28          = byte ptr -28h
.text:004048A0 var_C           = byte ptr -0Ch
.text:004048A0 var_4           = dword ptr -4
.text:004048A0 arg_4           = dword ptr  0Ch
.text:004048A0
.text:004048A0 ; FUNCTION CHUNK AT .text:00408DC0 SIZE 0000002D BYTES
.text:004048A0
.text:004048A0 ; __unwind { // SEH_4048A0
.text:004048A0                 mov     edi, edi
.text:004048A2                 push    ebp
.text:004048A3                 mov     ebp, esp
.text:004048A5                 push    0FFFFFFFFh
.text:004048A7                 push    offset SEH_4048A0
.text:004048AC                 mov     eax, large fs:0
.text:004048B2                 push    eax
.text:004048B3                 sub     esp, 48h
.text:004048B6                 mov     eax, ___security_cookie
.text:004048BB                 xor     eax, ebp
.text:004048BD                 push    eax
.text:004048BE                 lea     eax, [ebp+var_C]
.text:004048C1                 mov     large fs:0, eax
.text:004048C7                 push    offset dword_4013B0
.text:004048CC                 lea     ecx, [ebp+var_28]
.text:004048CF                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text:004048D5                 lea     ecx, [ebp+pExceptionObject]
.text:004048D8 ;   try {
.text:004048D8                 mov     [ebp+var_4], 0
.text:004048DF                 call    ds:??0exception@std@@QAE@XZ ; std::exception::exception(void)
.text:004048E5                 lea     eax, [ebp+var_28]
.text:004048E5 ;   } // starts at 4048D8
.text:004048E8 ;   try {
.text:004048E8                 mov     byte ptr [ebp+var_4], 1
.text:004048EC                 push    eax
.text:004048ED                 lea     ecx, [ebp+var_44]
.text:004048F0                 mov     [ebp+pExceptionObject], (offset GetTheLastVersionNumberAvailable+5)
.text:004048F7                 call    ds:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &)
.text:004048FD                 push    offset pThrowInfo ; pThrowInfo
.text:00404902                 lea     ecx, [ebp+pExceptionObject]
.text:00404902 ;   } // starts at 4048E8
.text:00404905 ;   try {
.text:00404905                 mov     byte ptr [ebp+var_4], 0
.text:00404909                 push    ecx             ; pExceptionObject
.text:0040490A                 mov     [ebp+pExceptionObject], (offset GetTheLastVersionNumberAvailable+5)
.text:00404911                 call    _CxxThrowException
.text:00404911 ;   } // starts at 404905
.text:00404911 ; } // starts at 4048A0
.text:00404911 sub_4048A0      endp
.text:00404911
.text:00404911 ; ---------------------------------------------------------------------------
.text:00404916                 align 10h
.text:00404920
.text:00404920 ; =============== S U B R O U T I N E =======================================
.text:00404920
.text:00404920 ; Attributes: bp-based frame
.text:00404920
.text:00404920 sub_404920      proc near               ; CODE XREF: sub_404630+CD↑p
.text:00404920
.text:00404920 pExceptionObject= dword ptr -10h
.text:00404920 var_4           = dword ptr -4
.text:00404920
.text:00404920                 mov     edi, edi
.text:00404922                 push    ebp
.text:00404923                 mov     ebp, esp
.text:00404925                 sub     esp, 10h
.text:00404928                 test    ecx, ecx
.text:0040492A                 ja      short loc_404942
.text:0040492C                 xor     ecx, ecx
.text:0040492E
.text:0040492E loc_40492E:                             ; CODE XREF: sub_404920+2C↓j
.text:0040492E                 lea     edx, ds:0[ecx*8]
.text:00404935                 push    edx             ; unsigned int
.text:00404936                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text:0040493B                 add     esp, 4
.text:0040493E                 mov     esp, ebp
.text:00404940                 pop     ebp
.text:00404941                 retn
.text:00404942 ; ---------------------------------------------------------------------------
.text:00404942
.text:00404942 loc_404942:                             ; CODE XREF: sub_404920+A↑j
.text:00404942                 or      eax, 0FFFFFFFFh
.text:00404945                 xor     edx, edx
.text:00404947                 div     ecx
.text:00404949                 cmp     eax, 8
.text:0040494C                 jnb     short loc_40492E
.text:0040494E                 lea     eax, [ebp+var_4]
.text:00404951                 push    eax
.text:00404952                 lea     ecx, [ebp+pExceptionObject]
.text:00404955                 mov     [ebp+var_4], 0
.text:0040495C                 call    ds:??0exception@std@@QAE@ABQBD@Z ; std::exception::exception(char const * const &)
.text:00404962                 push    offset stru_409088 ; pThrowInfo
.text:00404967                 lea     ecx, [ebp+pExceptionObject]
.text:0040496A                 push    ecx             ; pExceptionObject
.text:0040496B                 mov     [ebp+pExceptionObject], offset loc_4013C4
.text:00404972                 call    _CxxThrowException
.text:00404972 sub_404920      endp
.text:00404972
.text:00404972 ; ---------------------------------------------------------------------------
.text:00404977                 align 10h
.text:00404980
.text:00404980 ; =============== S U B R O U T I N E =======================================
.text:00404980
.text:00404980 ; Attributes: bp-based frame
.text:00404980
.text:00404980 sub_404980      proc near               ; DATA XREF: .text:0040903C↓o
.text:00404980
.text:00404980 arg_0           = dword ptr  8
.text:00404980
.text:00404980                 mov     edi, edi
.text:00404982                 push    ebp
.text:00404983                 mov     ebp, esp
.text:00404985                 mov     eax, [ebp+arg_0]
.text:00404988                 push    esi
.text:00404989                 push    eax
.text:0040498A                 mov     esi, ecx
.text:0040498C                 call    sub_4024A0
.text:00404991                 mov     dword ptr [esi], (offset GetTheLastVersionNumberAvailable+5)
.text:00404997                 mov     eax, esi
.text:00404999                 pop     esi
.text:0040499A                 pop     ebp
.text:0040499B                 retn    4
.text:0040499B sub_404980      endp
.text:0040499B
.text:0040499B ; ---------------------------------------------------------------------------
.text:0040499E                 db 12h dup(0CCh)
.text:004049B0
.text:004049B0 ; =============== S U B R O U T I N E =======================================
.text:004049B0
.text:004049B0
.text:004049B0 sub_4049B0      proc near               ; CODE XREF: sub_404630+237↑p
.text:004049B0                 mov     eax, ecx
.text:004049B2                 sub     eax, esi
.text:004049B4                 sar     eax, 3
.text:004049B7                 add     eax, eax
.text:004049B9                 add     eax, eax
.text:004049BB                 add     eax, eax
.text:004049BD                 push    edi
.text:004049BE                 mov     edi, eax
.text:004049C0                 mov     eax, edx
.text:004049C2                 sub     eax, edi
.text:004049C4                 cmp     esi, ecx
.text:004049C6                 jz      short loc_4049E4
.text:004049C8                 sub     edx, ecx
.text:004049CA                 lea     ebx, [ebx+0]
.text:004049D0
.text:004049D0 loc_4049D0:                             ; CODE XREF: sub_4049B0+32↓j
.text:004049D0                 mov     edi, [ecx-8]
.text:004049D3                 sub     ecx, 8
.text:004049D6                 cmp     ecx, esi
.text:004049D8                 mov     [edx+ecx], edi
.text:004049DB                 mov     edi, [ecx+4]
.text:004049DE                 mov     [edx+ecx+4], edi
.text:004049E2                 jnz     short loc_4049D0
.text:004049E4
.text:004049E4 loc_4049E4:                             ; CODE XREF: sub_4049B0+16↑j
.text:004049E4                 pop     edi
.text:004049E5                 retn
.text:004049E5 sub_4049B0      endp
.text:004049E5
.text:004049E5 ; ---------------------------------------------------------------------------
.text:004049E6                 align 10h
.text:004049F0
.text:004049F0 ; =============== S U B R O U T I N E =======================================
.text:004049F0
.text:004049F0 ; Attributes: bp-based frame
.text:004049F0
.text:004049F0 sub_4049F0      proc near               ; DATA XREF: .text:00409078↓o
.text:004049F0
.text:004049F0 arg_0           = dword ptr  8
.text:004049F0
.text:004049F0                 mov     edi, edi
.text:004049F2                 push    ebp
.text:004049F3                 mov     ebp, esp
.text:004049F5                 mov     eax, [ebp+arg_0]
.text:004049F8                 push    esi
.text:004049F9                 push    eax
.text:004049FA                 mov     esi, ecx
.text:004049FC                 call    ds:__imp_??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:00404A02                 mov     dword ptr [esi], offset loc_4013C4
.text:00404A08                 mov     eax, esi
.text:00404A0A                 pop     esi
.text:00404A0B                 pop     ebp
.text:00404A0C                 retn    4
.text:00404A0C sub_4049F0      endp
.text:00404A0C
.text:00404A0C ; ---------------------------------------------------------------------------
.text:00404A0F                 align 20h
.text:00404A20
.text:00404A20 ; =============== S U B R O U T I N E =======================================
.text:00404A20
.text:00404A20
.text:00404A20 sub_404A20      proc near               ; CODE XREF: sub_404440+44↑p
.text:00404A20                                         ; sub_404630+10B↑p ...
.text:00404A20                 test    ecx, ecx
.text:00404A22                 jbe     short locret_404A3E
.text:00404A24                 push    esi
.text:00404A25
.text:00404A25 loc_404A25:                             ; CODE XREF: sub_404A20+1B↓j
.text:00404A25                 test    eax, eax
.text:00404A27                 jz      short loc_404A33
.text:00404A29                 mov     esi, [edx]
.text:00404A2B                 mov     [eax], esi
.text:00404A2D                 mov     esi, [edx+4]
.text:00404A30                 mov     [eax+4], esi
.text:00404A33
.text:00404A33 loc_404A33:                             ; CODE XREF: sub_404A20+7↑j
.text:00404A33                 sub     ecx, 1
.text:00404A36                 add     eax, 8
.text:00404A39                 test    ecx, ecx
.text:00404A3B                 ja      short loc_404A25
.text:00404A3D                 pop     esi
.text:00404A3E
.text:00404A3E locret_404A3E:                          ; CODE XREF: sub_404A20+2↑j
.text:00404A3E                 retn    8
.text:00404A3E sub_404A20      endp
.text:00404A3E
.text:00404A3E ; ---------------------------------------------------------------------------
.text:00404A41                 align 10h
.text:00404A50
.text:00404A50 ; =============== S U B R O U T I N E =======================================
.text:00404A50
.text:00404A50
.text:00404A50 sub_404A50      proc near               ; CODE XREF: sub_404630+EE↑p
.text:00404A50                                         ; sub_404630+127↑p ...
.text:00404A50                 cmp     ecx, edx
.text:00404A52                 jz      short locret_404A6E
.text:00404A54                 push    esi
.text:00404A55
.text:00404A55 loc_404A55:                             ; CODE XREF: sub_404A50+1B↓j
.text:00404A55                 test    eax, eax
.text:00404A57                 jz      short loc_404A63
.text:00404A59                 mov     esi, [ecx]
.text:00404A5B                 mov     [eax], esi
.text:00404A5D                 mov     esi, [ecx+4]
.text:00404A60                 mov     [eax+4], esi
.text:00404A63
.text:00404A63 loc_404A63:                             ; CODE XREF: sub_404A50+7↑j
.text:00404A63                 add     ecx, 8
.text:00404A66                 add     eax, 8
.text:00404A69                 cmp     ecx, edx
.text:00404A6B                 jnz     short loc_404A55
.text:00404A6D                 pop     esi
.text:00404A6E
.text:00404A6E locret_404A6E:                          ; CODE XREF: sub_404A50+2↑j
.text:00404A6E                 retn    8
.text:00404A6E sub_404A50      endp
.text:00404A6E
.text:00404A6E ; ---------------------------------------------------------------------------
.text:00404A71                 align 10h
.text:00404A80
.text:00404A80 ; =============== S U B R O U T I N E =======================================
.text:00404A80
.text:00404A80
.text:00404A80 sub_404A80      proc near               ; CODE XREF: SimConnect_InsertString+32↓p
.text:00404A80                                         ; SimConnect_RetrieveString+4C↓p
.text:00404A80                 mov     edi, edi
.text:00404A82                 push    edi
.text:00404A83                 xor     edi, edi
.text:00404A85                 test    ecx, ecx
.text:00404A87                 jz      short loc_404ACF
.text:00404A89                 cmp     edx, 7FFFFFFFh
.text:00404A8F                 ja      short loc_404ACF
.text:00404A91                 xor     eax, eax
.text:00404A93                 test    edx, edx
.text:00404A95                 push    esi
.text:00404A96                 mov     esi, edx
.text:00404A98                 jz      short loc_404AB7
.text:00404A9A                 lea     ebx, [ebx+0]
.text:00404AA0
.text:00404AA0 loc_404AA0:                             ; CODE XREF: sub_404A80+2A↓j
.text:00404AA0                 cmp     [ecx], al
.text:00404AA2                 jz      short loc_404AB3
.text:00404AA4                 add     ecx, 1
.text:00404AA7                 sub     esi, 1
.text:00404AAA                 jnz     short loc_404AA0
.text:00404AAC                 mov     eax, 80070057h
.text:00404AB1                 jmp     short loc_404AC2
.text:00404AB3 ; ---------------------------------------------------------------------------
.text:00404AB3
.text:00404AB3 loc_404AB3:                             ; CODE XREF: sub_404A80+22↑j
.text:00404AB3                 test    esi, esi
.text:00404AB5                 jnz     short loc_404ABE
.text:00404AB7
.text:00404AB7 loc_404AB7:                             ; CODE XREF: sub_404A80+18↑j
.text:00404AB7                 mov     eax, 80070057h
.text:00404ABC                 jmp     short loc_404AC2
.text:00404ABE ; ---------------------------------------------------------------------------
.text:00404ABE
.text:00404ABE loc_404ABE:                             ; CODE XREF: sub_404A80+35↑j
.text:00404ABE                 sub     edx, esi
.text:00404AC0                 mov     edi, edx
.text:00404AC2
.text:00404AC2 loc_404AC2:                             ; CODE XREF: sub_404A80+31↑j
.text:00404AC2                                         ; sub_404A80+3C↑j
.text:00404AC2                 test    eax, eax
.text:00404AC4                 pop     esi
.text:00404AC5                 jl      short loc_404ACD
.text:00404AC7                 test    ebx, ebx
.text:00404AC9                 jz      short loc_404ACD
.text:00404ACB                 mov     [ebx], edi
.text:00404ACD
.text:00404ACD loc_404ACD:                             ; CODE XREF: sub_404A80+45↑j
.text:00404ACD                                         ; sub_404A80+49↑j
.text:00404ACD                 pop     edi
.text:00404ACE                 retn
.text:00404ACF ; ---------------------------------------------------------------------------
.text:00404ACF
.text:00404ACF loc_404ACF:                             ; CODE XREF: sub_404A80+7↑j
.text:00404ACF                                         ; sub_404A80+F↑j
.text:00404ACF                 mov     eax, 80070057h
.text:00404AD4                 pop     edi
.text:00404AD5                 retn
.text:00404AD5 sub_404A80      endp
.text:00404AD5
.text:00404AD5 ; ---------------------------------------------------------------------------
.text:00404AD6                 align 10h
.text:00404AE0 ; Exported entry  28. SimConnect_MapClientEventToSimEvent
.text:00404AE0
.text:00404AE0 ; =============== S U B R O U T I N E =======================================
.text:00404AE0
.text:00404AE0 ; Attributes: bp-based frame
.text:00404AE0
.text:00404AE0                 public SimConnect_MapClientEventToSimEvent
.text:00404AE0 SimConnect_MapClientEventToSimEvent proc near
.text:00404AE0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00404AE0
.text:00404AE0 var_4           = dword ptr -4
.text:00404AE0 arg_0           = dword ptr  8
.text:00404AE0 arg_4           = dword ptr  0Ch
.text:00404AE0 arg_8           = dword ptr  10h
.text:00404AE0
.text:00404AE0                 mov     edi, edi
.text:00404AE2                 push    ebp
.text:00404AE3                 mov     ebp, esp
.text:00404AE5                 push    ecx
.text:00404AE6                 push    ebx
.text:00404AE7                 mov     ebx, [ebp+arg_0]
.text:00404AEA                 push    esi
.text:00404AEB                 push    edi
.text:00404AEC                 lea     eax, [ebp+var_4]
.text:00404AEF                 push    eax
.text:00404AF0                 mov     eax, 114h
.text:00404AF5                 mov     ecx, ebx
.text:00404AF7                 mov     [ebp+var_4], 0
.text:00404AFE                 mov     esi, 80004005h
.text:00404B03                 call    sub_403C30
.text:00404B08                 test    eax, eax
.text:00404B0A                 mov     edi, [ebp+var_4]
.text:00404B0D                 jnz     short loc_404B27
.text:00404B0F                 mov     dword ptr [edi], 114h
.text:00404B15                 mov     dword ptr [edi+8], 0F0000004h
.text:00404B1C                 mov     dword ptr [edi+4], 4
.text:00404B23                 xor     esi, esi
.text:00404B25                 jmp     short loc_404B38
.text:00404B27 ; ---------------------------------------------------------------------------
.text:00404B27
.text:00404B27 loc_404B27:                             ; CODE XREF: SimConnect_MapClientEventToSimEvent+2D↑j
.text:00404B27                 cmp     eax, 2
.text:00404B2A                 jnz     short loc_404B38
.text:00404B2C                 test    ebx, ebx
.text:00404B2E                 jz      short loc_404B35
.text:00404B30                 mov     esi, [ebx+14h]
.text:00404B33                 jmp     short loc_404B38
.text:00404B35 ; ---------------------------------------------------------------------------
.text:00404B35
.text:00404B35 loc_404B35:                             ; CODE XREF: SimConnect_MapClientEventToSimEvent+4E↑j
.text:00404B35                 mov     esi, [ebp+arg_0]
.text:00404B38
.text:00404B38 loc_404B38:                             ; CODE XREF: SimConnect_MapClientEventToSimEvent+45↑j
.text:00404B38                                         ; SimConnect_MapClientEventToSimEvent+4A↑j ...
.text:00404B38                 test    esi, esi
.text:00404B3A                 mov     ebx, esi
.text:00404B3C                 jl      short loc_404B5E
.text:00404B3E                 mov     eax, [ebp+arg_8]
.text:00404B41                 test    eax, eax
.text:00404B43                 mov     ecx, [ebp+arg_4]
.text:00404B46                 mov     [edi+10h], ecx
.text:00404B49                 jz      short loc_404B7C
.text:00404B4B                 lea     edx, [edi+14h]
.text:00404B4E                 mov     ecx, 100h
.text:00404B53                 call    sub_402580
.text:00404B58                 mov     ebx, eax
.text:00404B5A                 test    ebx, ebx
.text:00404B5C                 jge     short loc_404B80
.text:00404B5E
.text:00404B5E loc_404B5E:                             ; CODE XREF: SimConnect_MapClientEventToSimEvent+5C↑j
.text:00404B5E                 test    edi, edi
.text:00404B60                 jz      short loc_404B71
.text:00404B62                 mov     edx, [ebp+arg_0]
.text:00404B65                 push    114h            ; Size
.text:00404B6A                 push    edi             ; void *
.text:00404B6B                 push    edx             ; int
.text:00404B6C                 call    sub_403D30
.text:00404B71
.text:00404B71 loc_404B71:                             ; CODE XREF: SimConnect_MapClientEventToSimEvent+80↑j
.text:00404B71                                         ; SimConnect_MapClientEventToSimEvent+A5↓j ...
.text:00404B71                 pop     edi
.text:00404B72                 pop     esi
.text:00404B73                 mov     eax, ebx
.text:00404B75                 pop     ebx
.text:00404B76                 mov     esp, ebp
.text:00404B78                 pop     ebp
.text:00404B79                 retn    0Ch
.text:00404B7C ; ---------------------------------------------------------------------------
.text:00404B7C
.text:00404B7C loc_404B7C:                             ; CODE XREF: SimConnect_MapClientEventToSimEvent+69↑j
.text:00404B7C                 mov     byte ptr [edi+14h], 0
.text:00404B80
.text:00404B80 loc_404B80:                             ; CODE XREF: SimConnect_MapClientEventToSimEvent+7C↑j
.text:00404B80                 mov     esi, [ebp+arg_0]
.text:00404B83                 test    esi, esi
.text:00404B85                 jz      short loc_404B71
.text:00404B87                 cmp     byte ptr [esi+1E0h], 0
.text:00404B8E                 jz      short loc_404B71
.text:00404B90                 call    sub_403E40
.text:00404B95                 pop     edi
.text:00404B96                 pop     esi
.text:00404B97                 mov     eax, ebx
.text:00404B99                 pop     ebx
.text:00404B9A                 mov     esp, ebp
.text:00404B9C                 pop     ebp
.text:00404B9D                 retn    0Ch
.text:00404B9D SimConnect_MapClientEventToSimEvent endp
.text:00404B9D
.text:00404B9D ; ---------------------------------------------------------------------------
.text:00404BA0                 db 10h dup(0CCh)
.text:00404BB0 ; Exported entry  56. SimConnect_TransmitClientEvent
.text:00404BB0
.text:00404BB0 ; =============== S U B R O U T I N E =======================================
.text:00404BB0
.text:00404BB0 ; Attributes: bp-based frame
.text:00404BB0
.text:00404BB0                 public SimConnect_TransmitClientEvent
.text:00404BB0 SimConnect_TransmitClientEvent proc near
.text:00404BB0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00404BB0
.text:00404BB0 var_4           = dword ptr -4
.text:00404BB0 arg_0           = dword ptr  8
.text:00404BB0 arg_4           = dword ptr  0Ch
.text:00404BB0 arg_8           = dword ptr  10h
.text:00404BB0 arg_C           = dword ptr  14h
.text:00404BB0 arg_10          = dword ptr  18h
.text:00404BB0 arg_14          = dword ptr  1Ch
.text:00404BB0
.text:00404BB0                 mov     edi, edi
.text:00404BB2                 push    ebp
.text:00404BB3                 mov     ebp, esp
.text:00404BB5                 push    ecx
.text:00404BB6                 push    esi
.text:00404BB7                 mov     esi, [ebp+arg_0]
.text:00404BBA                 push    edi
.text:00404BBB                 lea     eax, [ebp+var_4]
.text:00404BBE                 push    eax
.text:00404BBF                 mov     eax, 24h ; '$'
.text:00404BC4                 mov     ecx, esi
.text:00404BC6                 mov     [ebp+var_4], 0
.text:00404BCD                 mov     edi, 80004005h
.text:00404BD2                 call    sub_403C30
.text:00404BD7                 test    eax, eax
.text:00404BD9                 mov     ecx, [ebp+var_4]
.text:00404BDC                 jnz     short loc_404BF6
.text:00404BDE                 mov     dword ptr [ecx], 24h ; '$'
.text:00404BE4                 mov     dword ptr [ecx+8], 0F0000005h
.text:00404BEB                 mov     dword ptr [ecx+4], 4
.text:00404BF2                 xor     edi, edi
.text:00404BF4                 jmp     short loc_404C0B
.text:00404BF6 ; ---------------------------------------------------------------------------
.text:00404BF6
.text:00404BF6 loc_404BF6:                             ; CODE XREF: SimConnect_TransmitClientEvent+2C↑j
.text:00404BF6                 cmp     eax, 2
.text:00404BF9                 jnz     short loc_404C45
.text:00404BFB                 test    esi, esi
.text:00404BFD                 jz      short loc_404C04
.text:00404BFF                 mov     edi, [esi+14h]
.text:00404C02                 jmp     short loc_404C07
.text:00404C04 ; ---------------------------------------------------------------------------
.text:00404C04
.text:00404C04 loc_404C04:                             ; CODE XREF: SimConnect_TransmitClientEvent+4D↑j
.text:00404C04                 mov     edi, [ebp+arg_0]
.text:00404C07
.text:00404C07 loc_404C07:                             ; CODE XREF: SimConnect_TransmitClientEvent+52↑j
.text:00404C07                 test    edi, edi
.text:00404C09                 jl      short loc_404C45
.text:00404C0B
.text:00404C0B loc_404C0B:                             ; CODE XREF: SimConnect_TransmitClientEvent+44↑j
.text:00404C0B                 test    esi, esi
.text:00404C0D                 mov     edx, [ebp+arg_4]
.text:00404C10                 mov     eax, [ebp+arg_8]
.text:00404C13                 mov     [ecx+10h], edx
.text:00404C16                 mov     edx, [ebp+arg_C]
.text:00404C19                 mov     [ecx+14h], eax
.text:00404C1C                 mov     eax, [ebp+arg_10]
.text:00404C1F                 mov     [ecx+18h], edx
.text:00404C22                 mov     edx, [ebp+arg_14]
.text:00404C25                 mov     [ecx+1Ch], eax
.text:00404C28                 mov     [ecx+20h], edx
.text:00404C2B                 jz      short loc_404C55
.text:00404C2D                 cmp     byte ptr [esi+1E0h], 0
.text:00404C34                 jz      short loc_404C55
.text:00404C36                 call    sub_403E40
.text:00404C3B                 mov     eax, edi
.text:00404C3D                 pop     edi
.text:00404C3E                 pop     esi
.text:00404C3F                 mov     esp, ebp
.text:00404C41                 pop     ebp
.text:00404C42                 retn    18h
.text:00404C45 ; ---------------------------------------------------------------------------
.text:00404C45
.text:00404C45 loc_404C45:                             ; CODE XREF: SimConnect_TransmitClientEvent+49↑j
.text:00404C45                                         ; SimConnect_TransmitClientEvent+59↑j
.text:00404C45                 mov     eax, [ebp+var_4]
.text:00404C48                 test    eax, eax
.text:00404C4A                 jz      short loc_404C55
.text:00404C4C                 push    24h ; '$'       ; Size
.text:00404C4E                 push    eax             ; void *
.text:00404C4F                 push    esi             ; int
.text:00404C50                 call    sub_403D30
.text:00404C55
.text:00404C55 loc_404C55:                             ; CODE XREF: SimConnect_TransmitClientEvent+7B↑j
.text:00404C55                                         ; SimConnect_TransmitClientEvent+84↑j ...
.text:00404C55                 mov     eax, edi
.text:00404C57                 pop     edi
.text:00404C58                 pop     esi
.text:00404C59                 mov     esp, ebp
.text:00404C5B                 pop     ebp
.text:00404C5C                 retn    18h
.text:00404C5C SimConnect_TransmitClientEvent endp
.text:00404C5C
.text:00404C5C ; ---------------------------------------------------------------------------
.text:00404C5F                 db 11h dup(0CCh)
.text:00404C70 ; Exported entry  51. SimConnect_SetSystemEventState
.text:00404C70
.text:00404C70 ; =============== S U B R O U T I N E =======================================
.text:00404C70
.text:00404C70 ; Attributes: bp-based frame
.text:00404C70
.text:00404C70                 public SimConnect_SetSystemEventState
.text:00404C70 SimConnect_SetSystemEventState proc near
.text:00404C70                                         ; DATA XREF: .text:off_409FB8↓o
.text:00404C70
.text:00404C70 var_4           = dword ptr -4
.text:00404C70 arg_0           = dword ptr  8
.text:00404C70 arg_4           = dword ptr  0Ch
.text:00404C70 arg_8           = dword ptr  10h
.text:00404C70
.text:00404C70                 mov     edi, edi
.text:00404C72                 push    ebp
.text:00404C73                 mov     ebp, esp
.text:00404C75                 push    ecx
.text:00404C76                 push    esi
.text:00404C77                 mov     esi, [ebp+arg_0]
.text:00404C7A                 push    edi
.text:00404C7B                 lea     eax, [ebp+var_4]
.text:00404C7E                 push    eax
.text:00404C7F                 mov     eax, 18h
.text:00404C84                 mov     ecx, esi
.text:00404C86                 mov     [ebp+var_4], 0
.text:00404C8D                 mov     edi, 80004005h
.text:00404C92                 call    sub_403C30
.text:00404C97                 test    eax, eax
.text:00404C99                 mov     ecx, [ebp+var_4]
.text:00404C9C                 jnz     short loc_404CB6
.text:00404C9E                 mov     dword ptr [ecx], 18h
.text:00404CA4                 mov     dword ptr [ecx+8], 0F0000006h
.text:00404CAB                 mov     dword ptr [ecx+4], 4
.text:00404CB2                 xor     edi, edi
.text:00404CB4                 jmp     short loc_404CCB
.text:00404CB6 ; ---------------------------------------------------------------------------
.text:00404CB6
.text:00404CB6 loc_404CB6:                             ; CODE XREF: SimConnect_SetSystemEventState+2C↑j
.text:00404CB6                 cmp     eax, 2
.text:00404CB9                 jnz     short loc_404CF3
.text:00404CBB                 test    esi, esi
.text:00404CBD                 jz      short loc_404CC4
.text:00404CBF                 mov     edi, [esi+14h]
.text:00404CC2                 jmp     short loc_404CC7
.text:00404CC4 ; ---------------------------------------------------------------------------
.text:00404CC4
.text:00404CC4 loc_404CC4:                             ; CODE XREF: SimConnect_SetSystemEventState+4D↑j
.text:00404CC4                 mov     edi, [ebp+arg_0]
.text:00404CC7
.text:00404CC7 loc_404CC7:                             ; CODE XREF: SimConnect_SetSystemEventState+52↑j
.text:00404CC7                 test    edi, edi
.text:00404CC9                 jl      short loc_404CF3
.text:00404CCB
.text:00404CCB loc_404CCB:                             ; CODE XREF: SimConnect_SetSystemEventState+44↑j
.text:00404CCB                 test    esi, esi
.text:00404CCD                 mov     edx, [ebp+arg_4]
.text:00404CD0                 mov     eax, [ebp+arg_8]
.text:00404CD3                 mov     [ecx+10h], edx
.text:00404CD6                 mov     [ecx+14h], eax
.text:00404CD9                 jz      short loc_404D03
.text:00404CDB                 cmp     byte ptr [esi+1E0h], 0
.text:00404CE2                 jz      short loc_404D03
.text:00404CE4                 call    sub_403E40
.text:00404CE9                 mov     eax, edi
.text:00404CEB                 pop     edi
.text:00404CEC                 pop     esi
.text:00404CED                 mov     esp, ebp
.text:00404CEF                 pop     ebp
.text:00404CF0                 retn    0Ch
.text:00404CF3 ; ---------------------------------------------------------------------------
.text:00404CF3
.text:00404CF3 loc_404CF3:                             ; CODE XREF: SimConnect_SetSystemEventState+49↑j
.text:00404CF3                                         ; SimConnect_SetSystemEventState+59↑j
.text:00404CF3                 mov     eax, [ebp+var_4]
.text:00404CF6                 test    eax, eax
.text:00404CF8                 jz      short loc_404D03
.text:00404CFA                 push    18h             ; Size
.text:00404CFC                 push    eax             ; void *
.text:00404CFD                 push    esi             ; int
.text:00404CFE                 call    sub_403D30
.text:00404D03
.text:00404D03 loc_404D03:                             ; CODE XREF: SimConnect_SetSystemEventState+69↑j
.text:00404D03                                         ; SimConnect_SetSystemEventState+72↑j ...
.text:00404D03                 mov     eax, edi
.text:00404D05                 pop     edi
.text:00404D06                 pop     esi
.text:00404D07                 mov     esp, ebp
.text:00404D09                 pop     ebp
.text:00404D0A                 retn    0Ch
.text:00404D0A SimConnect_SetSystemEventState endp
.text:00404D0A
.text:00404D0A ; ---------------------------------------------------------------------------
.text:00404D0D                 align 20h
.text:00404D20 ; Exported entry   8. SimConnect_AddClientEventToNotificationGroup
.text:00404D20
.text:00404D20 ; =============== S U B R O U T I N E =======================================
.text:00404D20
.text:00404D20 ; Attributes: bp-based frame
.text:00404D20
.text:00404D20                 public SimConnect_AddClientEventToNotificationGroup
.text:00404D20 SimConnect_AddClientEventToNotificationGroup proc near
.text:00404D20                                         ; DATA XREF: .text:off_409FB8↓o
.text:00404D20
.text:00404D20 var_4           = dword ptr -4
.text:00404D20 arg_0           = dword ptr  8
.text:00404D20 arg_4           = dword ptr  0Ch
.text:00404D20 arg_8           = dword ptr  10h
.text:00404D20 arg_C           = dword ptr  14h
.text:00404D20
.text:00404D20                 mov     edi, edi
.text:00404D22                 push    ebp
.text:00404D23                 mov     ebp, esp
.text:00404D25                 push    ecx
.text:00404D26                 push    esi
.text:00404D27                 mov     esi, [ebp+arg_0]
.text:00404D2A                 push    edi
.text:00404D2B                 lea     eax, [ebp+var_4]
.text:00404D2E                 push    eax
.text:00404D2F                 mov     eax, 1Ch
.text:00404D34                 mov     ecx, esi
.text:00404D36                 mov     [ebp+var_4], 0
.text:00404D3D                 mov     edi, 80004005h
.text:00404D42                 call    sub_403C30
.text:00404D47                 test    eax, eax
.text:00404D49                 mov     ecx, [ebp+var_4]
.text:00404D4C                 jnz     short loc_404D66
.text:00404D4E                 mov     dword ptr [ecx], 1Ch
.text:00404D54                 mov     dword ptr [ecx+8], 0F0000007h
.text:00404D5B                 mov     dword ptr [ecx+4], 4
.text:00404D62                 xor     edi, edi
.text:00404D64                 jmp     short loc_404D7B
.text:00404D66 ; ---------------------------------------------------------------------------
.text:00404D66
.text:00404D66 loc_404D66:                             ; CODE XREF: SimConnect_AddClientEventToNotificationGroup+2C↑j
.text:00404D66                 cmp     eax, 2
.text:00404D69                 jnz     short loc_404DA9
.text:00404D6B                 test    esi, esi
.text:00404D6D                 jz      short loc_404D74
.text:00404D6F                 mov     edi, [esi+14h]
.text:00404D72                 jmp     short loc_404D77
.text:00404D74 ; ---------------------------------------------------------------------------
.text:00404D74
.text:00404D74 loc_404D74:                             ; CODE XREF: SimConnect_AddClientEventToNotificationGroup+4D↑j
.text:00404D74                 mov     edi, [ebp+arg_0]
.text:00404D77
.text:00404D77 loc_404D77:                             ; CODE XREF: SimConnect_AddClientEventToNotificationGroup+52↑j
.text:00404D77                 test    edi, edi
.text:00404D79                 jl      short loc_404DA9
.text:00404D7B
.text:00404D7B loc_404D7B:                             ; CODE XREF: SimConnect_AddClientEventToNotificationGroup+44↑j
.text:00404D7B                 test    esi, esi
.text:00404D7D                 mov     edx, [ebp+arg_4]
.text:00404D80                 mov     eax, [ebp+arg_8]
.text:00404D83                 mov     [ecx+10h], edx
.text:00404D86                 mov     edx, [ebp+arg_C]
.text:00404D89                 mov     [ecx+14h], eax
.text:00404D8C                 mov     [ecx+18h], edx
.text:00404D8F                 jz      short loc_404DB9
.text:00404D91                 cmp     byte ptr [esi+1E0h], 0
.text:00404D98                 jz      short loc_404DB9
.text:00404D9A                 call    sub_403E40
.text:00404D9F                 mov     eax, edi
.text:00404DA1                 pop     edi
.text:00404DA2                 pop     esi
.text:00404DA3                 mov     esp, ebp
.text:00404DA5                 pop     ebp
.text:00404DA6                 retn    10h
.text:00404DA9 ; ---------------------------------------------------------------------------
.text:00404DA9
.text:00404DA9 loc_404DA9:                             ; CODE XREF: SimConnect_AddClientEventToNotificationGroup+49↑j
.text:00404DA9                                         ; SimConnect_AddClientEventToNotificationGroup+59↑j
.text:00404DA9                 mov     eax, [ebp+var_4]
.text:00404DAC                 test    eax, eax
.text:00404DAE                 jz      short loc_404DB9
.text:00404DB0                 push    1Ch             ; Size
.text:00404DB2                 push    eax             ; void *
.text:00404DB3                 push    esi             ; int
.text:00404DB4                 call    sub_403D30
.text:00404DB9
.text:00404DB9 loc_404DB9:                             ; CODE XREF: SimConnect_AddClientEventToNotificationGroup+6F↑j
.text:00404DB9                                         ; SimConnect_AddClientEventToNotificationGroup+78↑j ...
.text:00404DB9                 mov     eax, edi
.text:00404DBB                 pop     edi
.text:00404DBC                 pop     esi
.text:00404DBD                 mov     esp, ebp
.text:00404DBF                 pop     ebp
.text:00404DC0                 retn    10h
.text:00404DC0 SimConnect_AddClientEventToNotificationGroup endp
.text:00404DC0
.text:00404DC0 ; ---------------------------------------------------------------------------
.text:00404DC3                 align 10h
.text:00404DD0 ; Exported entry  35. SimConnect_RemoveClientEvent
.text:00404DD0
.text:00404DD0 ; =============== S U B R O U T I N E =======================================
.text:00404DD0
.text:00404DD0 ; Attributes: bp-based frame
.text:00404DD0
.text:00404DD0                 public SimConnect_RemoveClientEvent
.text:00404DD0 SimConnect_RemoveClientEvent proc near  ; DATA XREF: .text:off_409FB8↓o
.text:00404DD0
.text:00404DD0 var_4           = dword ptr -4
.text:00404DD0 arg_0           = dword ptr  8
.text:00404DD0 arg_4           = dword ptr  0Ch
.text:00404DD0 arg_8           = dword ptr  10h
.text:00404DD0
.text:00404DD0                 mov     edi, edi
.text:00404DD2                 push    ebp
.text:00404DD3                 mov     ebp, esp
.text:00404DD5                 push    ecx
.text:00404DD6                 push    esi
.text:00404DD7                 mov     esi, [ebp+arg_0]
.text:00404DDA                 push    edi
.text:00404DDB                 lea     eax, [ebp+var_4]
.text:00404DDE                 push    eax
.text:00404DDF                 mov     eax, 18h
.text:00404DE4                 mov     ecx, esi
.text:00404DE6                 mov     [ebp+var_4], 0
.text:00404DED                 mov     edi, 80004005h
.text:00404DF2                 call    sub_403C30
.text:00404DF7                 test    eax, eax
.text:00404DF9                 mov     ecx, [ebp+var_4]
.text:00404DFC                 jnz     short loc_404E16
.text:00404DFE                 mov     dword ptr [ecx], 18h
.text:00404E04                 mov     dword ptr [ecx+8], 0F0000008h
.text:00404E0B                 mov     dword ptr [ecx+4], 4
.text:00404E12                 xor     edi, edi
.text:00404E14                 jmp     short loc_404E2B
.text:00404E16 ; ---------------------------------------------------------------------------
.text:00404E16
.text:00404E16 loc_404E16:                             ; CODE XREF: SimConnect_RemoveClientEvent+2C↑j
.text:00404E16                 cmp     eax, 2
.text:00404E19                 jnz     short loc_404E53
.text:00404E1B                 test    esi, esi
.text:00404E1D                 jz      short loc_404E24
.text:00404E1F                 mov     edi, [esi+14h]
.text:00404E22                 jmp     short loc_404E27
.text:00404E24 ; ---------------------------------------------------------------------------
.text:00404E24
.text:00404E24 loc_404E24:                             ; CODE XREF: SimConnect_RemoveClientEvent+4D↑j
.text:00404E24                 mov     edi, [ebp+arg_0]
.text:00404E27
.text:00404E27 loc_404E27:                             ; CODE XREF: SimConnect_RemoveClientEvent+52↑j
.text:00404E27                 test    edi, edi
.text:00404E29                 jl      short loc_404E53
.text:00404E2B
.text:00404E2B loc_404E2B:                             ; CODE XREF: SimConnect_RemoveClientEvent+44↑j
.text:00404E2B                 test    esi, esi
.text:00404E2D                 mov     edx, [ebp+arg_4]
.text:00404E30                 mov     eax, [ebp+arg_8]
.text:00404E33                 mov     [ecx+10h], edx
.text:00404E36                 mov     [ecx+14h], eax
.text:00404E39                 jz      short loc_404E63
.text:00404E3B                 cmp     byte ptr [esi+1E0h], 0
.text:00404E42                 jz      short loc_404E63
.text:00404E44                 call    sub_403E40
.text:00404E49                 mov     eax, edi
.text:00404E4B                 pop     edi
.text:00404E4C                 pop     esi
.text:00404E4D                 mov     esp, ebp
.text:00404E4F                 pop     ebp
.text:00404E50                 retn    0Ch
.text:00404E53 ; ---------------------------------------------------------------------------
.text:00404E53
.text:00404E53 loc_404E53:                             ; CODE XREF: SimConnect_RemoveClientEvent+49↑j
.text:00404E53                                         ; SimConnect_RemoveClientEvent+59↑j
.text:00404E53                 mov     eax, [ebp+var_4]
.text:00404E56                 test    eax, eax
.text:00404E58                 jz      short loc_404E63
.text:00404E5A                 push    18h             ; Size
.text:00404E5C                 push    eax             ; void *
.text:00404E5D                 push    esi             ; int
.text:00404E5E                 call    sub_403D30
.text:00404E63
.text:00404E63 loc_404E63:                             ; CODE XREF: SimConnect_RemoveClientEvent+69↑j
.text:00404E63                                         ; SimConnect_RemoveClientEvent+72↑j ...
.text:00404E63                 mov     eax, edi
.text:00404E65                 pop     edi
.text:00404E66                 pop     esi
.text:00404E67                 mov     esp, ebp
.text:00404E69                 pop     ebp
.text:00404E6A                 retn    0Ch
.text:00404E6A SimConnect_RemoveClientEvent endp
.text:00404E6A
.text:00404E6A ; ---------------------------------------------------------------------------
.text:00404E6D                 align 20h
.text:00404E80 ; Exported entry  50. SimConnect_SetNotificationGroupPriority
.text:00404E80
.text:00404E80 ; =============== S U B R O U T I N E =======================================
.text:00404E80
.text:00404E80 ; Attributes: bp-based frame
.text:00404E80
.text:00404E80                 public SimConnect_SetNotificationGroupPriority
.text:00404E80 SimConnect_SetNotificationGroupPriority proc near
.text:00404E80                                         ; DATA XREF: .text:off_409FB8↓o
.text:00404E80
.text:00404E80 var_4           = dword ptr -4
.text:00404E80 arg_0           = dword ptr  8
.text:00404E80 arg_4           = dword ptr  0Ch
.text:00404E80 arg_8           = dword ptr  10h
.text:00404E80
.text:00404E80                 mov     edi, edi
.text:00404E82                 push    ebp
.text:00404E83                 mov     ebp, esp
.text:00404E85                 push    ecx
.text:00404E86                 push    esi
.text:00404E87                 mov     esi, [ebp+arg_0]
.text:00404E8A                 push    edi
.text:00404E8B                 lea     eax, [ebp+var_4]
.text:00404E8E                 push    eax
.text:00404E8F                 mov     eax, 18h
.text:00404E94                 mov     ecx, esi
.text:00404E96                 mov     [ebp+var_4], 0
.text:00404E9D                 mov     edi, 80004005h
.text:00404EA2                 call    sub_403C30
.text:00404EA7                 test    eax, eax
.text:00404EA9                 mov     ecx, [ebp+var_4]
.text:00404EAC                 jnz     short loc_404EC6
.text:00404EAE                 mov     dword ptr [ecx], 18h
.text:00404EB4                 mov     dword ptr [ecx+8], 0F0000009h
.text:00404EBB                 mov     dword ptr [ecx+4], 4
.text:00404EC2                 xor     edi, edi
.text:00404EC4                 jmp     short loc_404EDB
.text:00404EC6 ; ---------------------------------------------------------------------------
.text:00404EC6
.text:00404EC6 loc_404EC6:                             ; CODE XREF: SimConnect_SetNotificationGroupPriority+2C↑j
.text:00404EC6                 cmp     eax, 2
.text:00404EC9                 jnz     short loc_404F03
.text:00404ECB                 test    esi, esi
.text:00404ECD                 jz      short loc_404ED4
.text:00404ECF                 mov     edi, [esi+14h]
.text:00404ED2                 jmp     short loc_404ED7
.text:00404ED4 ; ---------------------------------------------------------------------------
.text:00404ED4
.text:00404ED4 loc_404ED4:                             ; CODE XREF: SimConnect_SetNotificationGroupPriority+4D↑j
.text:00404ED4                 mov     edi, [ebp+arg_0]
.text:00404ED7
.text:00404ED7 loc_404ED7:                             ; CODE XREF: SimConnect_SetNotificationGroupPriority+52↑j
.text:00404ED7                 test    edi, edi
.text:00404ED9                 jl      short loc_404F03
.text:00404EDB
.text:00404EDB loc_404EDB:                             ; CODE XREF: SimConnect_SetNotificationGroupPriority+44↑j
.text:00404EDB                 test    esi, esi
.text:00404EDD                 mov     edx, [ebp+arg_4]
.text:00404EE0                 mov     eax, [ebp+arg_8]
.text:00404EE3                 mov     [ecx+10h], edx
.text:00404EE6                 mov     [ecx+14h], eax
.text:00404EE9                 jz      short loc_404F13
.text:00404EEB                 cmp     byte ptr [esi+1E0h], 0
.text:00404EF2                 jz      short loc_404F13
.text:00404EF4                 call    sub_403E40
.text:00404EF9                 mov     eax, edi
.text:00404EFB                 pop     edi
.text:00404EFC                 pop     esi
.text:00404EFD                 mov     esp, ebp
.text:00404EFF                 pop     ebp
.text:00404F00                 retn    0Ch
.text:00404F03 ; ---------------------------------------------------------------------------
.text:00404F03
.text:00404F03 loc_404F03:                             ; CODE XREF: SimConnect_SetNotificationGroupPriority+49↑j
.text:00404F03                                         ; SimConnect_SetNotificationGroupPriority+59↑j
.text:00404F03                 mov     eax, [ebp+var_4]
.text:00404F06                 test    eax, eax
.text:00404F08                 jz      short loc_404F13
.text:00404F0A                 push    18h             ; Size
.text:00404F0C                 push    eax             ; void *
.text:00404F0D                 push    esi             ; int
.text:00404F0E                 call    sub_403D30
.text:00404F13
.text:00404F13 loc_404F13:                             ; CODE XREF: SimConnect_SetNotificationGroupPriority+69↑j
.text:00404F13                                         ; SimConnect_SetNotificationGroupPriority+72↑j ...
.text:00404F13                 mov     eax, edi
.text:00404F15                 pop     edi
.text:00404F16                 pop     esi
.text:00404F17                 mov     esp, ebp
.text:00404F19                 pop     ebp
.text:00404F1A                 retn    0Ch
.text:00404F1A SimConnect_SetNotificationGroupPriority endp
.text:00404F1A
.text:00404F1A ; ---------------------------------------------------------------------------
.text:00404F1D                 db 13h dup(0CCh)
.text:00404F30 ; Exported entry  16. SimConnect_ClearNotificationGroup
.text:00404F30
.text:00404F30 ; =============== S U B R O U T I N E =======================================
.text:00404F30
.text:00404F30 ; Attributes: bp-based frame
.text:00404F30
.text:00404F30                 public SimConnect_ClearNotificationGroup
.text:00404F30 SimConnect_ClearNotificationGroup proc near
.text:00404F30                                         ; DATA XREF: .text:off_409FB8↓o
.text:00404F30
.text:00404F30 var_4           = dword ptr -4
.text:00404F30 arg_0           = dword ptr  8
.text:00404F30 arg_4           = dword ptr  0Ch
.text:00404F30
.text:00404F30                 mov     edi, edi
.text:00404F32                 push    ebp
.text:00404F33                 mov     ebp, esp
.text:00404F35                 push    ecx
.text:00404F36                 push    esi
.text:00404F37                 mov     esi, [ebp+arg_0]
.text:00404F3A                 push    edi
.text:00404F3B                 lea     eax, [ebp+var_4]
.text:00404F3E                 push    eax
.text:00404F3F                 mov     eax, 14h
.text:00404F44                 mov     ecx, esi
.text:00404F46                 mov     [ebp+var_4], 0
.text:00404F4D                 mov     edi, 80004005h
.text:00404F52                 call    sub_403C30
.text:00404F57                 test    eax, eax
.text:00404F59                 mov     ecx, [ebp+var_4]
.text:00404F5C                 jnz     short loc_404F76
.text:00404F5E                 mov     dword ptr [ecx], 14h
.text:00404F64                 mov     dword ptr [ecx+8], 0F000000Ah
.text:00404F6B                 mov     dword ptr [ecx+4], 4
.text:00404F72                 xor     edi, edi
.text:00404F74                 jmp     short loc_404F8B
.text:00404F76 ; ---------------------------------------------------------------------------
.text:00404F76
.text:00404F76 loc_404F76:                             ; CODE XREF: SimConnect_ClearNotificationGroup+2C↑j
.text:00404F76                 cmp     eax, 2
.text:00404F79                 jnz     short loc_404FAD
.text:00404F7B                 test    esi, esi
.text:00404F7D                 jz      short loc_404F84
.text:00404F7F                 mov     edi, [esi+14h]
.text:00404F82                 jmp     short loc_404F87
.text:00404F84 ; ---------------------------------------------------------------------------
.text:00404F84
.text:00404F84 loc_404F84:                             ; CODE XREF: SimConnect_ClearNotificationGroup+4D↑j
.text:00404F84                 mov     edi, [ebp+arg_0]
.text:00404F87
.text:00404F87 loc_404F87:                             ; CODE XREF: SimConnect_ClearNotificationGroup+52↑j
.text:00404F87                 test    edi, edi
.text:00404F89                 jl      short loc_404FAD
.text:00404F8B
.text:00404F8B loc_404F8B:                             ; CODE XREF: SimConnect_ClearNotificationGroup+44↑j
.text:00404F8B                 test    esi, esi
.text:00404F8D                 mov     edx, [ebp+arg_4]
.text:00404F90                 mov     [ecx+10h], edx
.text:00404F93                 jz      short loc_404FBD
.text:00404F95                 cmp     byte ptr [esi+1E0h], 0
.text:00404F9C                 jz      short loc_404FBD
.text:00404F9E                 call    sub_403E40
.text:00404FA3                 mov     eax, edi
.text:00404FA5                 pop     edi
.text:00404FA6                 pop     esi
.text:00404FA7                 mov     esp, ebp
.text:00404FA9                 pop     ebp
.text:00404FAA                 retn    8
.text:00404FAD ; ---------------------------------------------------------------------------
.text:00404FAD
.text:00404FAD loc_404FAD:                             ; CODE XREF: SimConnect_ClearNotificationGroup+49↑j
.text:00404FAD                                         ; SimConnect_ClearNotificationGroup+59↑j
.text:00404FAD                 mov     eax, [ebp+var_4]
.text:00404FB0                 test    eax, eax
.text:00404FB2                 jz      short loc_404FBD
.text:00404FB4                 push    14h             ; Size
.text:00404FB6                 push    eax             ; void *
.text:00404FB7                 push    esi             ; int
.text:00404FB8                 call    sub_403D30
.text:00404FBD
.text:00404FBD loc_404FBD:                             ; CODE XREF: SimConnect_ClearNotificationGroup+63↑j
.text:00404FBD                                         ; SimConnect_ClearNotificationGroup+6C↑j ...
.text:00404FBD                 mov     eax, edi
.text:00404FBF                 pop     edi
.text:00404FC0                 pop     esi
.text:00404FC1                 mov     esp, ebp
.text:00404FC3                 pop     ebp
.text:00404FC4                 retn    8
.text:00404FC4 SimConnect_ClearNotificationGroup endp
.text:00404FC4
.text:00404FC4 ; ---------------------------------------------------------------------------
.text:00404FC7                 align 10h
.text:00404FD0 ; Exported entry  41. SimConnect_RequestNotificationGroup
.text:00404FD0
.text:00404FD0 ; =============== S U B R O U T I N E =======================================
.text:00404FD0
.text:00404FD0 ; Attributes: bp-based frame
.text:00404FD0
.text:00404FD0                 public SimConnect_RequestNotificationGroup
.text:00404FD0 SimConnect_RequestNotificationGroup proc near
.text:00404FD0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00404FD0
.text:00404FD0 var_4           = dword ptr -4
.text:00404FD0 arg_0           = dword ptr  8
.text:00404FD0 arg_4           = dword ptr  0Ch
.text:00404FD0 arg_8           = dword ptr  10h
.text:00404FD0 arg_C           = dword ptr  14h
.text:00404FD0
.text:00404FD0                 mov     edi, edi
.text:00404FD2                 push    ebp
.text:00404FD3                 mov     ebp, esp
.text:00404FD5                 push    ecx
.text:00404FD6                 push    esi
.text:00404FD7                 mov     esi, [ebp+arg_0]
.text:00404FDA                 push    edi
.text:00404FDB                 lea     eax, [ebp+var_4]
.text:00404FDE                 push    eax
.text:00404FDF                 mov     eax, 1Ch
.text:00404FE4                 mov     ecx, esi
.text:00404FE6                 mov     [ebp+var_4], 0
.text:00404FED                 mov     edi, 80004005h
.text:00404FF2                 call    sub_403C30
.text:00404FF7                 test    eax, eax
.text:00404FF9                 mov     ecx, [ebp+var_4]
.text:00404FFC                 jnz     short loc_405016
.text:00404FFE                 mov     dword ptr [ecx], 1Ch
.text:00405004                 mov     dword ptr [ecx+8], 0F000000Bh
.text:0040500B                 mov     dword ptr [ecx+4], 4
.text:00405012                 xor     edi, edi
.text:00405014                 jmp     short loc_40502B
.text:00405016 ; ---------------------------------------------------------------------------
.text:00405016
.text:00405016 loc_405016:                             ; CODE XREF: SimConnect_RequestNotificationGroup+2C↑j
.text:00405016                 cmp     eax, 2
.text:00405019                 jnz     short loc_405059
.text:0040501B                 test    esi, esi
.text:0040501D                 jz      short loc_405024
.text:0040501F                 mov     edi, [esi+14h]
.text:00405022                 jmp     short loc_405027
.text:00405024 ; ---------------------------------------------------------------------------
.text:00405024
.text:00405024 loc_405024:                             ; CODE XREF: SimConnect_RequestNotificationGroup+4D↑j
.text:00405024                 mov     edi, [ebp+arg_0]
.text:00405027
.text:00405027 loc_405027:                             ; CODE XREF: SimConnect_RequestNotificationGroup+52↑j
.text:00405027                 test    edi, edi
.text:00405029                 jl      short loc_405059
.text:0040502B
.text:0040502B loc_40502B:                             ; CODE XREF: SimConnect_RequestNotificationGroup+44↑j
.text:0040502B                 test    esi, esi
.text:0040502D                 mov     edx, [ebp+arg_4]
.text:00405030                 mov     eax, [ebp+arg_8]
.text:00405033                 mov     [ecx+10h], edx
.text:00405036                 mov     edx, [ebp+arg_C]
.text:00405039                 mov     [ecx+14h], eax
.text:0040503C                 mov     [ecx+18h], edx
.text:0040503F                 jz      short loc_405069
.text:00405041                 cmp     byte ptr [esi+1E0h], 0
.text:00405048                 jz      short loc_405069
.text:0040504A                 call    sub_403E40
.text:0040504F                 mov     eax, edi
.text:00405051                 pop     edi
.text:00405052                 pop     esi
.text:00405053                 mov     esp, ebp
.text:00405055                 pop     ebp
.text:00405056                 retn    10h
.text:00405059 ; ---------------------------------------------------------------------------
.text:00405059
.text:00405059 loc_405059:                             ; CODE XREF: SimConnect_RequestNotificationGroup+49↑j
.text:00405059                                         ; SimConnect_RequestNotificationGroup+59↑j
.text:00405059                 mov     eax, [ebp+var_4]
.text:0040505C                 test    eax, eax
.text:0040505E                 jz      short loc_405069
.text:00405060                 push    1Ch             ; Size
.text:00405062                 push    eax             ; void *
.text:00405063                 push    esi             ; int
.text:00405064                 call    sub_403D30
.text:00405069
.text:00405069 loc_405069:                             ; CODE XREF: SimConnect_RequestNotificationGroup+6F↑j
.text:00405069                                         ; SimConnect_RequestNotificationGroup+78↑j ...
.text:00405069                 mov     eax, edi
.text:0040506B                 pop     edi
.text:0040506C                 pop     esi
.text:0040506D                 mov     esp, ebp
.text:0040506F                 pop     ebp
.text:00405070                 retn    10h
.text:00405070 SimConnect_RequestNotificationGroup endp
.text:00405070
.text:00405070 ; ---------------------------------------------------------------------------
.text:00405073                 align 10h
.text:00405080 ; Exported entry  10. SimConnect_AddToDataDefinition
.text:00405080
.text:00405080 ; =============== S U B R O U T I N E =======================================
.text:00405080
.text:00405080 ; Attributes: bp-based frame
.text:00405080
.text:00405080 ; int __stdcall SimConnect_AddToDataDefinition(int, int, int, int, int, float, int)
.text:00405080                 public SimConnect_AddToDataDefinition
.text:00405080 SimConnect_AddToDataDefinition proc near
.text:00405080                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405080
.text:00405080 var_4           = dword ptr -4
.text:00405080 arg_0           = dword ptr  8
.text:00405080 arg_4           = dword ptr  0Ch
.text:00405080 arg_8           = dword ptr  10h
.text:00405080 arg_C           = dword ptr  14h
.text:00405080 arg_10          = dword ptr  18h
.text:00405080 arg_14          = dword ptr  1Ch
.text:00405080 arg_18          = dword ptr  20h
.text:00405080
.text:00405080                 mov     edi, edi
.text:00405082                 push    ebp
.text:00405083                 mov     ebp, esp
.text:00405085                 push    ecx
.text:00405086                 push    ebx
.text:00405087                 push    esi
.text:00405088                 mov     esi, [ebp+arg_0]
.text:0040508B                 push    edi
.text:0040508C                 lea     eax, [ebp+var_4]
.text:0040508F                 push    eax
.text:00405090                 mov     eax, 220h
.text:00405095                 mov     ecx, esi
.text:00405097                 mov     [ebp+var_4], 0
.text:0040509E                 mov     ebx, 80004005h
.text:004050A3                 call    sub_403C30
.text:004050A8                 test    eax, eax
.text:004050AA                 mov     edi, [ebp+var_4]
.text:004050AD                 jnz     short loc_4050C7
.text:004050AF                 mov     dword ptr [edi], 220h
.text:004050B5                 mov     dword ptr [edi+8], 0F000000Ch
.text:004050BC                 mov     dword ptr [edi+4], 4
.text:004050C3                 xor     ebx, ebx
.text:004050C5                 jmp     short loc_4050D8
.text:004050C7 ; ---------------------------------------------------------------------------
.text:004050C7
.text:004050C7 loc_4050C7:                             ; CODE XREF: SimConnect_AddToDataDefinition+2D↑j
.text:004050C7                 cmp     eax, 2
.text:004050CA                 jnz     short loc_4050D8
.text:004050CC                 test    esi, esi
.text:004050CE                 jz      short loc_4050D5
.text:004050D0                 mov     ebx, [esi+14h]
.text:004050D3                 jmp     short loc_4050D8
.text:004050D5 ; ---------------------------------------------------------------------------
.text:004050D5
.text:004050D5 loc_4050D5:                             ; CODE XREF: SimConnect_AddToDataDefinition+4E↑j
.text:004050D5                 mov     ebx, [ebp+arg_0]
.text:004050D8
.text:004050D8 loc_4050D8:                             ; CODE XREF: SimConnect_AddToDataDefinition+45↑j
.text:004050D8                                         ; SimConnect_AddToDataDefinition+4A↑j ...
.text:004050D8                 test    ebx, ebx
.text:004050DA                 jl      short loc_4050FC
.text:004050DC                 mov     eax, [ebp+arg_8]
.text:004050DF                 test    eax, eax
.text:004050E1                 mov     ecx, [ebp+arg_4]
.text:004050E4                 mov     [edi+10h], ecx
.text:004050E7                 jz      short loc_405117
.text:004050E9                 lea     edx, [edi+14h]
.text:004050EC                 mov     ecx, 100h
.text:004050F1                 call    sub_402580
.text:004050F6                 mov     ebx, eax
.text:004050F8                 test    ebx, ebx
.text:004050FA                 jge     short loc_40511B
.text:004050FC
.text:004050FC loc_4050FC:                             ; CODE XREF: SimConnect_AddToDataDefinition+5A↑j
.text:004050FC                                         ; SimConnect_AddToDataDefinition+B6↓j
.text:004050FC                 test    edi, edi
.text:004050FE                 jz      short loc_40510C
.text:00405100                 push    220h            ; Size
.text:00405105                 push    edi             ; void *
.text:00405106                 push    esi             ; int
.text:00405107                 call    sub_403D30
.text:0040510C
.text:0040510C loc_40510C:                             ; CODE XREF: SimConnect_AddToDataDefinition+7E↑j
.text:0040510C                                         ; SimConnect_AddToDataDefinition+DE↓j ...
.text:0040510C                 pop     edi
.text:0040510D                 pop     esi
.text:0040510E                 mov     eax, ebx
.text:00405110                 pop     ebx
.text:00405111                 mov     esp, ebp
.text:00405113                 pop     ebp
.text:00405114                 retn    1Ch
.text:00405117 ; ---------------------------------------------------------------------------
.text:00405117
.text:00405117 loc_405117:                             ; CODE XREF: SimConnect_AddToDataDefinition+67↑j
.text:00405117                 mov     byte ptr [edi+14h], 0
.text:0040511B
.text:0040511B loc_40511B:                             ; CODE XREF: SimConnect_AddToDataDefinition+7A↑j
.text:0040511B                 mov     eax, [ebp+arg_C]
.text:0040511E                 test    eax, eax
.text:00405120                 jz      short loc_40513A
.text:00405122                 lea     edx, [edi+114h]
.text:00405128                 mov     ecx, 100h
.text:0040512D                 call    sub_402580
.text:00405132                 mov     ebx, eax
.text:00405134                 test    ebx, ebx
.text:00405136                 jl      short loc_4050FC
.text:00405138                 jmp     short loc_405141
.text:0040513A ; ---------------------------------------------------------------------------
.text:0040513A
.text:0040513A loc_40513A:                             ; CODE XREF: SimConnect_AddToDataDefinition+A0↑j
.text:0040513A                 mov     byte ptr [edi+114h], 0
.text:00405141
.text:00405141 loc_405141:                             ; CODE XREF: SimConnect_AddToDataDefinition+B8↑j
.text:00405141                 test    esi, esi
.text:00405143                 fld     [ebp+arg_14]
.text:00405146                 mov     edx, [ebp+arg_10]
.text:00405149                 mov     eax, [ebp+arg_18]
.text:0040514C                 mov     [edi+214h], edx
.text:00405152                 fstp    dword ptr [edi+218h]
.text:00405158                 mov     [edi+21Ch], eax
.text:0040515E                 jz      short loc_40510C
.text:00405160                 cmp     byte ptr [esi+1E0h], 0
.text:00405167                 jz      short loc_40510C
.text:00405169                 call    sub_403E40
.text:0040516E                 pop     edi
.text:0040516F                 pop     esi
.text:00405170                 mov     eax, ebx
.text:00405172                 pop     ebx
.text:00405173                 mov     esp, ebp
.text:00405175                 pop     ebp
.text:00405176                 retn    1Ch
.text:00405176 SimConnect_AddToDataDefinition endp
.text:00405176
.text:00405176 ; ---------------------------------------------------------------------------
.text:00405179                 align 10h
.text:00405180 ; Exported entry  14. SimConnect_ClearDataDefinition
.text:00405180
.text:00405180 ; =============== S U B R O U T I N E =======================================
.text:00405180
.text:00405180 ; Attributes: bp-based frame
.text:00405180
.text:00405180                 public SimConnect_ClearDataDefinition
.text:00405180 SimConnect_ClearDataDefinition proc near
.text:00405180                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405180
.text:00405180 var_4           = dword ptr -4
.text:00405180 arg_0           = dword ptr  8
.text:00405180 arg_4           = dword ptr  0Ch
.text:00405180
.text:00405180                 mov     edi, edi
.text:00405182                 push    ebp
.text:00405183                 mov     ebp, esp
.text:00405185                 push    ecx
.text:00405186                 push    esi
.text:00405187                 mov     esi, [ebp+arg_0]
.text:0040518A                 push    edi
.text:0040518B                 lea     eax, [ebp+var_4]
.text:0040518E                 push    eax
.text:0040518F                 mov     eax, 14h
.text:00405194                 mov     ecx, esi
.text:00405196                 mov     [ebp+var_4], 0
.text:0040519D                 mov     edi, 80004005h
.text:004051A2                 call    sub_403C30
.text:004051A7                 test    eax, eax
.text:004051A9                 mov     ecx, [ebp+var_4]
.text:004051AC                 jnz     short loc_4051C6
.text:004051AE                 mov     dword ptr [ecx], 14h
.text:004051B4                 mov     dword ptr [ecx+8], 0F000000Dh
.text:004051BB                 mov     dword ptr [ecx+4], 4
.text:004051C2                 xor     edi, edi
.text:004051C4                 jmp     short loc_4051DB
.text:004051C6 ; ---------------------------------------------------------------------------
.text:004051C6
.text:004051C6 loc_4051C6:                             ; CODE XREF: SimConnect_ClearDataDefinition+2C↑j
.text:004051C6                 cmp     eax, 2
.text:004051C9                 jnz     short loc_4051FD
.text:004051CB                 test    esi, esi
.text:004051CD                 jz      short loc_4051D4
.text:004051CF                 mov     edi, [esi+14h]
.text:004051D2                 jmp     short loc_4051D7
.text:004051D4 ; ---------------------------------------------------------------------------
.text:004051D4
.text:004051D4 loc_4051D4:                             ; CODE XREF: SimConnect_ClearDataDefinition+4D↑j
.text:004051D4                 mov     edi, [ebp+arg_0]
.text:004051D7
.text:004051D7 loc_4051D7:                             ; CODE XREF: SimConnect_ClearDataDefinition+52↑j
.text:004051D7                 test    edi, edi
.text:004051D9                 jl      short loc_4051FD
.text:004051DB
.text:004051DB loc_4051DB:                             ; CODE XREF: SimConnect_ClearDataDefinition+44↑j
.text:004051DB                 test    esi, esi
.text:004051DD                 mov     edx, [ebp+arg_4]
.text:004051E0                 mov     [ecx+10h], edx
.text:004051E3                 jz      short loc_40520D
.text:004051E5                 cmp     byte ptr [esi+1E0h], 0
.text:004051EC                 jz      short loc_40520D
.text:004051EE                 call    sub_403E40
.text:004051F3                 mov     eax, edi
.text:004051F5                 pop     edi
.text:004051F6                 pop     esi
.text:004051F7                 mov     esp, ebp
.text:004051F9                 pop     ebp
.text:004051FA                 retn    8
.text:004051FD ; ---------------------------------------------------------------------------
.text:004051FD
.text:004051FD loc_4051FD:                             ; CODE XREF: SimConnect_ClearDataDefinition+49↑j
.text:004051FD                                         ; SimConnect_ClearDataDefinition+59↑j
.text:004051FD                 mov     eax, [ebp+var_4]
.text:00405200                 test    eax, eax
.text:00405202                 jz      short loc_40520D
.text:00405204                 push    14h             ; Size
.text:00405206                 push    eax             ; void *
.text:00405207                 push    esi             ; int
.text:00405208                 call    sub_403D30
.text:0040520D
.text:0040520D loc_40520D:                             ; CODE XREF: SimConnect_ClearDataDefinition+63↑j
.text:0040520D                                         ; SimConnect_ClearDataDefinition+6C↑j ...
.text:0040520D                 mov     eax, edi
.text:0040520F                 pop     edi
.text:00405210                 pop     esi
.text:00405211                 mov     esp, ebp
.text:00405213                 pop     ebp
.text:00405214                 retn    8
.text:00405214 SimConnect_ClearDataDefinition endp
.text:00405214
.text:00405214 ; ---------------------------------------------------------------------------
.text:00405217                 align 10h
.text:00405220 ; Exported entry  38. SimConnect_RequestDataOnSimObject
.text:00405220
.text:00405220 ; =============== S U B R O U T I N E =======================================
.text:00405220
.text:00405220 ; Attributes: bp-based frame
.text:00405220
.text:00405220                 public SimConnect_RequestDataOnSimObject
.text:00405220 SimConnect_RequestDataOnSimObject proc near
.text:00405220                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405220
.text:00405220 var_4           = dword ptr -4
.text:00405220 arg_0           = dword ptr  8
.text:00405220 arg_4           = dword ptr  0Ch
.text:00405220 arg_8           = dword ptr  10h
.text:00405220 arg_C           = dword ptr  14h
.text:00405220 arg_10          = dword ptr  18h
.text:00405220 arg_14          = dword ptr  1Ch
.text:00405220 arg_18          = dword ptr  20h
.text:00405220 arg_1C          = dword ptr  24h
.text:00405220 arg_20          = dword ptr  28h
.text:00405220
.text:00405220                 mov     edi, edi
.text:00405222                 push    ebp
.text:00405223                 mov     ebp, esp
.text:00405225                 push    ecx
.text:00405226                 push    esi
.text:00405227                 mov     esi, [ebp+arg_0]
.text:0040522A                 push    edi
.text:0040522B                 lea     eax, [ebp+var_4]
.text:0040522E                 push    eax
.text:0040522F                 mov     eax, 30h ; '0'
.text:00405234                 mov     ecx, esi
.text:00405236                 mov     [ebp+var_4], 0
.text:0040523D                 mov     edi, 80004005h
.text:00405242                 call    sub_403C30
.text:00405247                 test    eax, eax
.text:00405249                 mov     ecx, [ebp+var_4]
.text:0040524C                 jnz     short loc_405266
.text:0040524E                 mov     dword ptr [ecx], 30h ; '0'
.text:00405254                 mov     dword ptr [ecx+8], 0F000000Eh
.text:0040525B                 mov     dword ptr [ecx+4], 4
.text:00405262                 xor     edi, edi
.text:00405264                 jmp     short loc_40527B
.text:00405266 ; ---------------------------------------------------------------------------
.text:00405266
.text:00405266 loc_405266:                             ; CODE XREF: SimConnect_RequestDataOnSimObject+2C↑j
.text:00405266                 cmp     eax, 2
.text:00405269                 jnz     short loc_4052C7
.text:0040526B                 test    esi, esi
.text:0040526D                 jz      short loc_405274
.text:0040526F                 mov     edi, [esi+14h]
.text:00405272                 jmp     short loc_405277
.text:00405274 ; ---------------------------------------------------------------------------
.text:00405274
.text:00405274 loc_405274:                             ; CODE XREF: SimConnect_RequestDataOnSimObject+4D↑j
.text:00405274                 mov     edi, [ebp+arg_0]
.text:00405277
.text:00405277 loc_405277:                             ; CODE XREF: SimConnect_RequestDataOnSimObject+52↑j
.text:00405277                 test    edi, edi
.text:00405279                 jl      short loc_4052C7
.text:0040527B
.text:0040527B loc_40527B:                             ; CODE XREF: SimConnect_RequestDataOnSimObject+44↑j
.text:0040527B                 test    esi, esi
.text:0040527D                 mov     edx, [ebp+arg_4]
.text:00405280                 mov     eax, [ebp+arg_8]
.text:00405283                 mov     [ecx+10h], edx
.text:00405286                 mov     edx, [ebp+arg_C]
.text:00405289                 mov     [ecx+14h], eax
.text:0040528C                 mov     eax, [ebp+arg_10]
.text:0040528F                 mov     [ecx+18h], edx
.text:00405292                 mov     edx, [ebp+arg_14]
.text:00405295                 mov     [ecx+1Ch], eax
.text:00405298                 mov     eax, [ebp+arg_18]
.text:0040529B                 mov     [ecx+20h], edx
.text:0040529E                 mov     edx, [ebp+arg_1C]
.text:004052A1                 mov     [ecx+24h], eax
.text:004052A4                 mov     eax, [ebp+arg_20]
.text:004052A7                 mov     [ecx+28h], edx
.text:004052AA                 mov     [ecx+2Ch], eax
.text:004052AD                 jz      short loc_4052D7
.text:004052AF                 cmp     byte ptr [esi+1E0h], 0
.text:004052B6                 jz      short loc_4052D7
.text:004052B8                 call    sub_403E40
.text:004052BD                 mov     eax, edi
.text:004052BF                 pop     edi
.text:004052C0                 pop     esi
.text:004052C1                 mov     esp, ebp
.text:004052C3                 pop     ebp
.text:004052C4                 retn    24h ; '$'
.text:004052C7 ; ---------------------------------------------------------------------------
.text:004052C7
.text:004052C7 loc_4052C7:                             ; CODE XREF: SimConnect_RequestDataOnSimObject+49↑j
.text:004052C7                                         ; SimConnect_RequestDataOnSimObject+59↑j
.text:004052C7                 mov     eax, [ebp+var_4]
.text:004052CA                 test    eax, eax
.text:004052CC                 jz      short loc_4052D7
.text:004052CE                 push    30h ; '0'       ; Size
.text:004052D0                 push    eax             ; void *
.text:004052D1                 push    esi             ; int
.text:004052D2                 call    sub_403D30
.text:004052D7
.text:004052D7 loc_4052D7:                             ; CODE XREF: SimConnect_RequestDataOnSimObject+8D↑j
.text:004052D7                                         ; SimConnect_RequestDataOnSimObject+96↑j ...
.text:004052D7                 mov     eax, edi
.text:004052D9                 pop     edi
.text:004052DA                 pop     esi
.text:004052DB                 mov     esp, ebp
.text:004052DD                 pop     ebp
.text:004052DE                 retn    24h ; '$'
.text:004052DE SimConnect_RequestDataOnSimObject endp
.text:004052DE
.text:004052DE ; ---------------------------------------------------------------------------
.text:004052E1                 align 10h
.text:004052F0 ; Exported entry  39. SimConnect_RequestDataOnSimObjectType
.text:004052F0
.text:004052F0 ; =============== S U B R O U T I N E =======================================
.text:004052F0
.text:004052F0 ; Attributes: bp-based frame
.text:004052F0
.text:004052F0                 public SimConnect_RequestDataOnSimObjectType
.text:004052F0 SimConnect_RequestDataOnSimObjectType proc near
.text:004052F0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004052F0
.text:004052F0 var_4           = dword ptr -4
.text:004052F0 arg_0           = dword ptr  8
.text:004052F0 arg_4           = dword ptr  0Ch
.text:004052F0 arg_8           = dword ptr  10h
.text:004052F0 arg_C           = dword ptr  14h
.text:004052F0 arg_10          = dword ptr  18h
.text:004052F0
.text:004052F0                 mov     edi, edi
.text:004052F2                 push    ebp
.text:004052F3                 mov     ebp, esp
.text:004052F5                 push    ecx
.text:004052F6                 push    esi
.text:004052F7                 mov     esi, [ebp+arg_0]
.text:004052FA                 push    edi
.text:004052FB                 lea     eax, [ebp+var_4]
.text:004052FE                 push    eax
.text:004052FF                 mov     eax, 20h ; ' '
.text:00405304                 mov     ecx, esi
.text:00405306                 mov     [ebp+var_4], 0
.text:0040530D                 mov     edi, 80004005h
.text:00405312                 call    sub_403C30
.text:00405317                 test    eax, eax
.text:00405319                 mov     ecx, [ebp+var_4]
.text:0040531C                 jnz     short loc_405336
.text:0040531E                 mov     dword ptr [ecx], 20h ; ' '
.text:00405324                 mov     dword ptr [ecx+8], 0F000000Fh
.text:0040532B                 mov     dword ptr [ecx+4], 4
.text:00405332                 xor     edi, edi
.text:00405334                 jmp     short loc_40534B
.text:00405336 ; ---------------------------------------------------------------------------
.text:00405336
.text:00405336 loc_405336:                             ; CODE XREF: SimConnect_RequestDataOnSimObjectType+2C↑j
.text:00405336                 cmp     eax, 2
.text:00405339                 jnz     short loc_40537F
.text:0040533B                 test    esi, esi
.text:0040533D                 jz      short loc_405344
.text:0040533F                 mov     edi, [esi+14h]
.text:00405342                 jmp     short loc_405347
.text:00405344 ; ---------------------------------------------------------------------------
.text:00405344
.text:00405344 loc_405344:                             ; CODE XREF: SimConnect_RequestDataOnSimObjectType+4D↑j
.text:00405344                 mov     edi, [ebp+arg_0]
.text:00405347
.text:00405347 loc_405347:                             ; CODE XREF: SimConnect_RequestDataOnSimObjectType+52↑j
.text:00405347                 test    edi, edi
.text:00405349                 jl      short loc_40537F
.text:0040534B
.text:0040534B loc_40534B:                             ; CODE XREF: SimConnect_RequestDataOnSimObjectType+44↑j
.text:0040534B                 test    esi, esi
.text:0040534D                 mov     edx, [ebp+arg_4]
.text:00405350                 mov     eax, [ebp+arg_8]
.text:00405353                 mov     [ecx+10h], edx
.text:00405356                 mov     edx, [ebp+arg_C]
.text:00405359                 mov     [ecx+14h], eax
.text:0040535C                 mov     eax, [ebp+arg_10]
.text:0040535F                 mov     [ecx+18h], edx
.text:00405362                 mov     [ecx+1Ch], eax
.text:00405365                 jz      short loc_40538F
.text:00405367                 cmp     byte ptr [esi+1E0h], 0
.text:0040536E                 jz      short loc_40538F
.text:00405370                 call    sub_403E40
.text:00405375                 mov     eax, edi
.text:00405377                 pop     edi
.text:00405378                 pop     esi
.text:00405379                 mov     esp, ebp
.text:0040537B                 pop     ebp
.text:0040537C                 retn    14h
.text:0040537F ; ---------------------------------------------------------------------------
.text:0040537F
.text:0040537F loc_40537F:                             ; CODE XREF: SimConnect_RequestDataOnSimObjectType+49↑j
.text:0040537F                                         ; SimConnect_RequestDataOnSimObjectType+59↑j
.text:0040537F                 mov     eax, [ebp+var_4]
.text:00405382                 test    eax, eax
.text:00405384                 jz      short loc_40538F
.text:00405386                 push    20h ; ' '       ; Size
.text:00405388                 push    eax             ; void *
.text:00405389                 push    esi             ; int
.text:0040538A                 call    sub_403D30
.text:0040538F
.text:0040538F loc_40538F:                             ; CODE XREF: SimConnect_RequestDataOnSimObjectType+75↑j
.text:0040538F                                         ; SimConnect_RequestDataOnSimObjectType+7E↑j ...
.text:0040538F                 mov     eax, edi
.text:00405391                 pop     edi
.text:00405392                 pop     esi
.text:00405393                 mov     esp, ebp
.text:00405395                 pop     ebp
.text:00405396                 retn    14h
.text:00405396 SimConnect_RequestDataOnSimObjectType endp
.text:00405396
.text:00405396 ; ---------------------------------------------------------------------------
.text:00405399                 align 10h
.text:004053A0 ; Exported entry  47. SimConnect_SetDataOnSimObject
.text:004053A0
.text:004053A0 ; =============== S U B R O U T I N E =======================================
.text:004053A0
.text:004053A0 ; Attributes: bp-based frame
.text:004053A0
.text:004053A0 ; int __stdcall SimConnect_SetDataOnSimObject(int, int, int, int, int, int, void *Src)
.text:004053A0                 public SimConnect_SetDataOnSimObject
.text:004053A0 SimConnect_SetDataOnSimObject proc near ; DATA XREF: .text:off_409FB8↓o
.text:004053A0
.text:004053A0 Size            = dword ptr -0Ch
.text:004053A0 var_8           = dword ptr -8
.text:004053A0 var_4           = dword ptr -4
.text:004053A0 arg_0           = dword ptr  8
.text:004053A0 arg_4           = dword ptr  0Ch
.text:004053A0 arg_8           = dword ptr  10h
.text:004053A0 arg_C           = dword ptr  14h
.text:004053A0 arg_10          = dword ptr  18h
.text:004053A0 arg_14          = dword ptr  1Ch
.text:004053A0 Src             = dword ptr  20h
.text:004053A0
.text:004053A0                 mov     edi, edi
.text:004053A2                 push    ebp
.text:004053A3                 mov     ebp, esp
.text:004053A5                 sub     esp, 0Ch
.text:004053A8                 cmp     [ebp+arg_10], 0
.text:004053AC                 mov     [ebp+var_8], 0
.text:004053B3                 jnz     short loc_4053BC
.text:004053B5                 mov     [ebp+arg_10], 1
.text:004053BC
.text:004053BC loc_4053BC:                             ; CODE XREF: SimConnect_SetDataOnSimObject+13↑j
.text:004053BC                 push    ebx
.text:004053BD                 mov     ebx, [ebp+arg_0]
.text:004053C0                 push    esi
.text:004053C1                 mov     esi, [ebp+arg_10]
.text:004053C4                 imul    esi, [ebp+arg_14]
.text:004053C8                 push    edi
.text:004053C9                 lea     ecx, [ebp+var_8]
.text:004053CC                 lea     eax, [esi+24h]
.text:004053CF                 push    ecx
.text:004053D0                 mov     ecx, ebx
.text:004053D2                 mov     [ebp+Size], eax
.text:004053D5                 mov     [ebp+var_4], 80004005h
.text:004053DC                 call    sub_403C30
.text:004053E1                 test    eax, eax
.text:004053E3                 mov     edi, [ebp+var_8]
.text:004053E6                 jnz     short loc_405404
.text:004053E8                 mov     edx, [ebp+Size]
.text:004053EB                 mov     [edi], edx
.text:004053ED                 mov     dword ptr [edi+8], 0F0000010h
.text:004053F4                 mov     dword ptr [edi+4], 4
.text:004053FB                 mov     [ebp+var_4], 0
.text:00405402                 jmp     short loc_40541C
.text:00405404 ; ---------------------------------------------------------------------------
.text:00405404
.text:00405404 loc_405404:                             ; CODE XREF: SimConnect_SetDataOnSimObject+46↑j
.text:00405404                 cmp     eax, 2
.text:00405407                 jnz     short loc_40546B
.text:00405409                 test    ebx, ebx
.text:0040540B                 jz      short loc_405412
.text:0040540D                 mov     eax, [ebx+14h]
.text:00405410                 jmp     short loc_405415
.text:00405412 ; ---------------------------------------------------------------------------
.text:00405412
.text:00405412 loc_405412:                             ; CODE XREF: SimConnect_SetDataOnSimObject+6B↑j
.text:00405412                 mov     eax, [ebp+arg_10]
.text:00405415
.text:00405415 loc_405415:                             ; CODE XREF: SimConnect_SetDataOnSimObject+70↑j
.text:00405415                 test    eax, eax
.text:00405417                 mov     [ebp+var_4], eax
.text:0040541A                 jl      short loc_40546B
.text:0040541C
.text:0040541C loc_40541C:                             ; CODE XREF: SimConnect_SetDataOnSimObject+62↑j
.text:0040541C                 mov     eax, [ebp+Src]
.text:0040541F                 push    esi             ; Size
.text:00405420                 push    eax             ; Src
.text:00405421                 lea     ecx, [edi+24h]
.text:00405424                 push    ecx             ; void *
.text:00405425                 call    memcpy
.text:0040542A                 mov     edx, [ebp+arg_4]
.text:0040542D                 mov     eax, [ebp+arg_8]
.text:00405430                 mov     ecx, [ebp+arg_C]
.text:00405433                 mov     [edi+10h], edx
.text:00405436                 mov     edx, [ebp+arg_10]
.text:00405439                 mov     [edi+14h], eax
.text:0040543C                 mov     eax, [ebp+arg_14]
.text:0040543F                 mov     [edi+18h], ecx
.text:00405442                 add     esp, 0Ch
.text:00405445                 test    ebx, ebx
.text:00405447                 mov     [edi+1Ch], edx
.text:0040544A                 mov     [edi+20h], eax
.text:0040544D                 jz      short loc_40547D
.text:0040544F                 cmp     byte ptr [ebx+1E0h], 0
.text:00405456                 jz      short loc_40547D
.text:00405458                 mov     esi, ebx
.text:0040545A                 call    sub_403E40
.text:0040545F                 mov     eax, [ebp+var_4]
.text:00405462                 pop     edi
.text:00405463                 pop     esi
.text:00405464                 pop     ebx
.text:00405465                 mov     esp, ebp
.text:00405467                 pop     ebp
.text:00405468                 retn    1Ch
.text:0040546B ; ---------------------------------------------------------------------------
.text:0040546B
.text:0040546B loc_40546B:                             ; CODE XREF: SimConnect_SetDataOnSimObject+67↑j
.text:0040546B                                         ; SimConnect_SetDataOnSimObject+7A↑j
.text:0040546B                 mov     eax, [ebp+var_8]
.text:0040546E                 test    eax, eax
.text:00405470                 jz      short loc_40547D
.text:00405472                 mov     ecx, [ebp+Size]
.text:00405475                 push    ecx             ; Size
.text:00405476                 push    eax             ; void *
.text:00405477                 push    ebx             ; int
.text:00405478                 call    sub_403D30
.text:0040547D
.text:0040547D loc_40547D:                             ; CODE XREF: SimConnect_SetDataOnSimObject+AD↑j
.text:0040547D                                         ; SimConnect_SetDataOnSimObject+B6↑j ...
.text:0040547D                 mov     eax, [ebp+var_4]
.text:00405480                 pop     edi
.text:00405481                 pop     esi
.text:00405482                 pop     ebx
.text:00405483                 mov     esp, ebp
.text:00405485                 pop     ebp
.text:00405486                 retn    1Ch
.text:00405486 SimConnect_SetDataOnSimObject endp
.text:00405486
.text:00405486 ; ---------------------------------------------------------------------------
.text:00405489                 align 10h
.text:00405490 ; Exported entry  29. SimConnect_MapInputEventToClientEvent
.text:00405490
.text:00405490 ; =============== S U B R O U T I N E =======================================
.text:00405490
.text:00405490 ; Attributes: bp-based frame
.text:00405490
.text:00405490                 public SimConnect_MapInputEventToClientEvent
.text:00405490 SimConnect_MapInputEventToClientEvent proc near
.text:00405490                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405490
.text:00405490 var_4           = dword ptr -4
.text:00405490 arg_0           = dword ptr  8
.text:00405490 arg_4           = dword ptr  0Ch
.text:00405490 arg_8           = dword ptr  10h
.text:00405490 arg_C           = dword ptr  14h
.text:00405490 arg_10          = dword ptr  18h
.text:00405490 arg_14          = dword ptr  1Ch
.text:00405490 arg_18          = dword ptr  20h
.text:00405490 arg_1C          = dword ptr  24h
.text:00405490
.text:00405490                 mov     edi, edi
.text:00405492                 push    ebp
.text:00405493                 mov     ebp, esp
.text:00405495                 push    ecx
.text:00405496                 push    ebx
.text:00405497                 mov     ebx, [ebp+arg_0]
.text:0040549A                 push    esi
.text:0040549B                 push    edi
.text:0040549C                 lea     eax, [ebp+var_4]
.text:0040549F                 push    eax
.text:004054A0                 mov     eax, 128h
.text:004054A5                 mov     ecx, ebx
.text:004054A7                 mov     [ebp+var_4], 0
.text:004054AE                 mov     esi, 80004005h
.text:004054B3                 call    sub_403C30
.text:004054B8                 test    eax, eax
.text:004054BA                 mov     edi, [ebp+var_4]
.text:004054BD                 jnz     short loc_4054D7
.text:004054BF                 mov     dword ptr [edi], 128h
.text:004054C5                 mov     dword ptr [edi+8], 0F0000011h
.text:004054CC                 mov     dword ptr [edi+4], 4
.text:004054D3                 xor     esi, esi
.text:004054D5                 jmp     short loc_4054E8
.text:004054D7 ; ---------------------------------------------------------------------------
.text:004054D7
.text:004054D7 loc_4054D7:                             ; CODE XREF: SimConnect_MapInputEventToClientEvent+2D↑j
.text:004054D7                 cmp     eax, 2
.text:004054DA                 jnz     short loc_4054E8
.text:004054DC                 test    ebx, ebx
.text:004054DE                 jz      short loc_4054E5
.text:004054E0                 mov     esi, [ebx+14h]
.text:004054E3                 jmp     short loc_4054E8
.text:004054E5 ; ---------------------------------------------------------------------------
.text:004054E5
.text:004054E5 loc_4054E5:                             ; CODE XREF: SimConnect_MapInputEventToClientEvent+4E↑j
.text:004054E5                 mov     esi, [ebp+arg_0]
.text:004054E8
.text:004054E8 loc_4054E8:                             ; CODE XREF: SimConnect_MapInputEventToClientEvent+45↑j
.text:004054E8                                         ; SimConnect_MapInputEventToClientEvent+4A↑j ...
.text:004054E8                 test    esi, esi
.text:004054EA                 mov     ebx, esi
.text:004054EC                 jl      short loc_40550E
.text:004054EE                 mov     eax, [ebp+arg_8]
.text:004054F1                 test    eax, eax
.text:004054F3                 mov     ecx, [ebp+arg_4]
.text:004054F6                 mov     [edi+10h], ecx
.text:004054F9                 jz      short loc_40552C
.text:004054FB                 lea     edx, [edi+14h]
.text:004054FE                 mov     ecx, 100h
.text:00405503                 call    sub_402580
.text:00405508                 mov     ebx, eax
.text:0040550A                 test    ebx, ebx
.text:0040550C                 jge     short loc_405530
.text:0040550E
.text:0040550E loc_40550E:                             ; CODE XREF: SimConnect_MapInputEventToClientEvent+5C↑j
.text:0040550E                 test    edi, edi
.text:00405510                 jz      short loc_405521
.text:00405512                 mov     ecx, [ebp+arg_0]
.text:00405515                 push    128h            ; Size
.text:0040551A                 push    edi             ; void *
.text:0040551B                 push    ecx             ; int
.text:0040551C                 call    sub_403D30
.text:00405521
.text:00405521 loc_405521:                             ; CODE XREF: SimConnect_MapInputEventToClientEvent+80↑j
.text:00405521                                         ; SimConnect_MapInputEventToClientEvent+D2↓j ...
.text:00405521                 pop     edi
.text:00405522                 pop     esi
.text:00405523                 mov     eax, ebx
.text:00405525                 pop     ebx
.text:00405526                 mov     esp, ebp
.text:00405528                 pop     ebp
.text:00405529                 retn    20h ; ' '
.text:0040552C ; ---------------------------------------------------------------------------
.text:0040552C
.text:0040552C loc_40552C:                             ; CODE XREF: SimConnect_MapInputEventToClientEvent+69↑j
.text:0040552C                 mov     byte ptr [edi+14h], 0
.text:00405530
.text:00405530 loc_405530:                             ; CODE XREF: SimConnect_MapInputEventToClientEvent+7C↑j
.text:00405530                 mov     edx, [ebp+arg_C]
.text:00405533                 mov     eax, [ebp+arg_10]
.text:00405536                 mov     ecx, [ebp+arg_14]
.text:00405539                 mov     esi, [ebp+arg_0]
.text:0040553C                 test    esi, esi
.text:0040553E                 mov     [edi+114h], edx
.text:00405544                 mov     edx, [ebp+arg_18]
.text:00405547                 mov     [edi+118h], eax
.text:0040554D                 mov     eax, [ebp+arg_1C]
.text:00405550                 mov     [edi+11Ch], ecx
.text:00405556                 mov     [edi+120h], edx
.text:0040555C                 mov     [edi+124h], eax
.text:00405562                 jz      short loc_405521
.text:00405564                 cmp     byte ptr [esi+1E0h], 0
.text:0040556B                 jz      short loc_405521
.text:0040556D                 call    sub_403E40
.text:00405572                 pop     edi
.text:00405573                 pop     esi
.text:00405574                 mov     eax, ebx
.text:00405576                 pop     ebx
.text:00405577                 mov     esp, ebp
.text:00405579                 pop     ebp
.text:0040557A                 retn    20h ; ' '
.text:0040557A SimConnect_MapInputEventToClientEvent endp
.text:0040557A
.text:0040557A ; ---------------------------------------------------------------------------
.text:0040557D                 db 13h dup(0CCh)
.text:00405590 ; Exported entry  48. SimConnect_SetInputGroupPriority
.text:00405590
.text:00405590 ; =============== S U B R O U T I N E =======================================
.text:00405590
.text:00405590 ; Attributes: bp-based frame
.text:00405590
.text:00405590                 public SimConnect_SetInputGroupPriority
.text:00405590 SimConnect_SetInputGroupPriority proc near
.text:00405590                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405590
.text:00405590 var_4           = dword ptr -4
.text:00405590 arg_0           = dword ptr  8
.text:00405590 arg_4           = dword ptr  0Ch
.text:00405590 arg_8           = dword ptr  10h
.text:00405590
.text:00405590                 mov     edi, edi
.text:00405592                 push    ebp
.text:00405593                 mov     ebp, esp
.text:00405595                 push    ecx
.text:00405596                 push    esi
.text:00405597                 mov     esi, [ebp+arg_0]
.text:0040559A                 push    edi
.text:0040559B                 lea     eax, [ebp+var_4]
.text:0040559E                 push    eax
.text:0040559F                 mov     eax, 18h
.text:004055A4                 mov     ecx, esi
.text:004055A6                 mov     [ebp+var_4], 0
.text:004055AD                 mov     edi, 80004005h
.text:004055B2                 call    sub_403C30
.text:004055B7                 test    eax, eax
.text:004055B9                 mov     ecx, [ebp+var_4]
.text:004055BC                 jnz     short loc_4055D6
.text:004055BE                 mov     dword ptr [ecx], 18h
.text:004055C4                 mov     dword ptr [ecx+8], 0F0000012h
.text:004055CB                 mov     dword ptr [ecx+4], 4
.text:004055D2                 xor     edi, edi
.text:004055D4                 jmp     short loc_4055EB
.text:004055D6 ; ---------------------------------------------------------------------------
.text:004055D6
.text:004055D6 loc_4055D6:                             ; CODE XREF: SimConnect_SetInputGroupPriority+2C↑j
.text:004055D6                 cmp     eax, 2
.text:004055D9                 jnz     short loc_405613
.text:004055DB                 test    esi, esi
.text:004055DD                 jz      short loc_4055E4
.text:004055DF                 mov     edi, [esi+14h]
.text:004055E2                 jmp     short loc_4055E7
.text:004055E4 ; ---------------------------------------------------------------------------
.text:004055E4
.text:004055E4 loc_4055E4:                             ; CODE XREF: SimConnect_SetInputGroupPriority+4D↑j
.text:004055E4                 mov     edi, [ebp+arg_0]
.text:004055E7
.text:004055E7 loc_4055E7:                             ; CODE XREF: SimConnect_SetInputGroupPriority+52↑j
.text:004055E7                 test    edi, edi
.text:004055E9                 jl      short loc_405613
.text:004055EB
.text:004055EB loc_4055EB:                             ; CODE XREF: SimConnect_SetInputGroupPriority+44↑j
.text:004055EB                 test    esi, esi
.text:004055ED                 mov     edx, [ebp+arg_4]
.text:004055F0                 mov     eax, [ebp+arg_8]
.text:004055F3                 mov     [ecx+10h], edx
.text:004055F6                 mov     [ecx+14h], eax
.text:004055F9                 jz      short loc_405623
.text:004055FB                 cmp     byte ptr [esi+1E0h], 0
.text:00405602                 jz      short loc_405623
.text:00405604                 call    sub_403E40
.text:00405609                 mov     eax, edi
.text:0040560B                 pop     edi
.text:0040560C                 pop     esi
.text:0040560D                 mov     esp, ebp
.text:0040560F                 pop     ebp
.text:00405610                 retn    0Ch
.text:00405613 ; ---------------------------------------------------------------------------
.text:00405613
.text:00405613 loc_405613:                             ; CODE XREF: SimConnect_SetInputGroupPriority+49↑j
.text:00405613                                         ; SimConnect_SetInputGroupPriority+59↑j
.text:00405613                 mov     eax, [ebp+var_4]
.text:00405616                 test    eax, eax
.text:00405618                 jz      short loc_405623
.text:0040561A                 push    18h             ; Size
.text:0040561C                 push    eax             ; void *
.text:0040561D                 push    esi             ; int
.text:0040561E                 call    sub_403D30
.text:00405623
.text:00405623 loc_405623:                             ; CODE XREF: SimConnect_SetInputGroupPriority+69↑j
.text:00405623                                         ; SimConnect_SetInputGroupPriority+72↑j ...
.text:00405623                 mov     eax, edi
.text:00405625                 pop     edi
.text:00405626                 pop     esi
.text:00405627                 mov     esp, ebp
.text:00405629                 pop     ebp
.text:0040562A                 retn    0Ch
.text:0040562A SimConnect_SetInputGroupPriority endp
.text:0040562A
.text:0040562A ; ---------------------------------------------------------------------------
.text:0040562D                 align 20h
.text:00405640 ; Exported entry  36. SimConnect_RemoveInputEvent
.text:00405640
.text:00405640 ; =============== S U B R O U T I N E =======================================
.text:00405640
.text:00405640 ; Attributes: bp-based frame
.text:00405640
.text:00405640                 public SimConnect_RemoveInputEvent
.text:00405640 SimConnect_RemoveInputEvent proc near   ; DATA XREF: .text:off_409FB8↓o
.text:00405640
.text:00405640 var_4           = dword ptr -4
.text:00405640 arg_0           = dword ptr  8
.text:00405640 arg_4           = dword ptr  0Ch
.text:00405640 arg_8           = dword ptr  10h
.text:00405640
.text:00405640                 mov     edi, edi
.text:00405642                 push    ebp
.text:00405643                 mov     ebp, esp
.text:00405645                 push    ecx
.text:00405646                 push    ebx
.text:00405647                 mov     ebx, [ebp+arg_0]
.text:0040564A                 push    esi
.text:0040564B                 push    edi
.text:0040564C                 lea     eax, [ebp+var_4]
.text:0040564F                 push    eax
.text:00405650                 mov     eax, 114h
.text:00405655                 mov     ecx, ebx
.text:00405657                 mov     [ebp+var_4], 0
.text:0040565E                 mov     esi, 80004005h
.text:00405663                 call    sub_403C30
.text:00405668                 test    eax, eax
.text:0040566A                 mov     edi, [ebp+var_4]
.text:0040566D                 jnz     short loc_405687
.text:0040566F                 mov     dword ptr [edi], 114h
.text:00405675                 mov     dword ptr [edi+8], 0F0000013h
.text:0040567C                 mov     dword ptr [edi+4], 4
.text:00405683                 xor     esi, esi
.text:00405685                 jmp     short loc_405698
.text:00405687 ; ---------------------------------------------------------------------------
.text:00405687
.text:00405687 loc_405687:                             ; CODE XREF: SimConnect_RemoveInputEvent+2D↑j
.text:00405687                 cmp     eax, 2
.text:0040568A                 jnz     short loc_405698
.text:0040568C                 test    ebx, ebx
.text:0040568E                 jz      short loc_405695
.text:00405690                 mov     esi, [ebx+14h]
.text:00405693                 jmp     short loc_405698
.text:00405695 ; ---------------------------------------------------------------------------
.text:00405695
.text:00405695 loc_405695:                             ; CODE XREF: SimConnect_RemoveInputEvent+4E↑j
.text:00405695                 mov     esi, [ebp+arg_0]
.text:00405698
.text:00405698 loc_405698:                             ; CODE XREF: SimConnect_RemoveInputEvent+45↑j
.text:00405698                                         ; SimConnect_RemoveInputEvent+4A↑j ...
.text:00405698                 test    esi, esi
.text:0040569A                 mov     ebx, esi
.text:0040569C                 jl      short loc_4056BE
.text:0040569E                 mov     eax, [ebp+arg_8]
.text:004056A1                 test    eax, eax
.text:004056A3                 mov     ecx, [ebp+arg_4]
.text:004056A6                 mov     [edi+10h], ecx
.text:004056A9                 jz      short loc_4056DC
.text:004056AB                 lea     edx, [edi+14h]
.text:004056AE                 mov     ecx, 100h
.text:004056B3                 call    sub_402580
.text:004056B8                 mov     ebx, eax
.text:004056BA                 test    ebx, ebx
.text:004056BC                 jge     short loc_4056E0
.text:004056BE
.text:004056BE loc_4056BE:                             ; CODE XREF: SimConnect_RemoveInputEvent+5C↑j
.text:004056BE                 test    edi, edi
.text:004056C0                 jz      short loc_4056D1
.text:004056C2                 mov     edx, [ebp+arg_0]
.text:004056C5                 push    114h            ; Size
.text:004056CA                 push    edi             ; void *
.text:004056CB                 push    edx             ; int
.text:004056CC                 call    sub_403D30
.text:004056D1
.text:004056D1 loc_4056D1:                             ; CODE XREF: SimConnect_RemoveInputEvent+80↑j
.text:004056D1                                         ; SimConnect_RemoveInputEvent+A5↓j ...
.text:004056D1                 pop     edi
.text:004056D2                 pop     esi
.text:004056D3                 mov     eax, ebx
.text:004056D5                 pop     ebx
.text:004056D6                 mov     esp, ebp
.text:004056D8                 pop     ebp
.text:004056D9                 retn    0Ch
.text:004056DC ; ---------------------------------------------------------------------------
.text:004056DC
.text:004056DC loc_4056DC:                             ; CODE XREF: SimConnect_RemoveInputEvent+69↑j
.text:004056DC                 mov     byte ptr [edi+14h], 0
.text:004056E0
.text:004056E0 loc_4056E0:                             ; CODE XREF: SimConnect_RemoveInputEvent+7C↑j
.text:004056E0                 mov     esi, [ebp+arg_0]
.text:004056E3                 test    esi, esi
.text:004056E5                 jz      short loc_4056D1
.text:004056E7                 cmp     byte ptr [esi+1E0h], 0
.text:004056EE                 jz      short loc_4056D1
.text:004056F0                 call    sub_403E40
.text:004056F5                 pop     edi
.text:004056F6                 pop     esi
.text:004056F7                 mov     eax, ebx
.text:004056F9                 pop     ebx
.text:004056FA                 mov     esp, ebp
.text:004056FC                 pop     ebp
.text:004056FD                 retn    0Ch
.text:004056FD SimConnect_RemoveInputEvent endp
.text:004056FD
.text:004056FD ; ---------------------------------------------------------------------------
.text:00405700                 db 10h dup(0CCh)
.text:00405710 ; Exported entry  15. SimConnect_ClearInputGroup
.text:00405710
.text:00405710 ; =============== S U B R O U T I N E =======================================
.text:00405710
.text:00405710 ; Attributes: bp-based frame
.text:00405710
.text:00405710                 public SimConnect_ClearInputGroup
.text:00405710 SimConnect_ClearInputGroup proc near    ; DATA XREF: .text:off_409FB8↓o
.text:00405710
.text:00405710 var_4           = dword ptr -4
.text:00405710 arg_0           = dword ptr  8
.text:00405710 arg_4           = dword ptr  0Ch
.text:00405710
.text:00405710                 mov     edi, edi
.text:00405712                 push    ebp
.text:00405713                 mov     ebp, esp
.text:00405715                 push    ecx
.text:00405716                 push    esi
.text:00405717                 mov     esi, [ebp+arg_0]
.text:0040571A                 push    edi
.text:0040571B                 lea     eax, [ebp+var_4]
.text:0040571E                 push    eax
.text:0040571F                 mov     eax, 14h
.text:00405724                 mov     ecx, esi
.text:00405726                 mov     [ebp+var_4], 0
.text:0040572D                 mov     edi, 80004005h
.text:00405732                 call    sub_403C30
.text:00405737                 test    eax, eax
.text:00405739                 mov     ecx, [ebp+var_4]
.text:0040573C                 jnz     short loc_405756
.text:0040573E                 mov     dword ptr [ecx], 14h
.text:00405744                 mov     dword ptr [ecx+8], 0F0000014h
.text:0040574B                 mov     dword ptr [ecx+4], 4
.text:00405752                 xor     edi, edi
.text:00405754                 jmp     short loc_40576B
.text:00405756 ; ---------------------------------------------------------------------------
.text:00405756
.text:00405756 loc_405756:                             ; CODE XREF: SimConnect_ClearInputGroup+2C↑j
.text:00405756                 cmp     eax, 2
.text:00405759                 jnz     short loc_40578D
.text:0040575B                 test    esi, esi
.text:0040575D                 jz      short loc_405764
.text:0040575F                 mov     edi, [esi+14h]
.text:00405762                 jmp     short loc_405767
.text:00405764 ; ---------------------------------------------------------------------------
.text:00405764
.text:00405764 loc_405764:                             ; CODE XREF: SimConnect_ClearInputGroup+4D↑j
.text:00405764                 mov     edi, [ebp+arg_0]
.text:00405767
.text:00405767 loc_405767:                             ; CODE XREF: SimConnect_ClearInputGroup+52↑j
.text:00405767                 test    edi, edi
.text:00405769                 jl      short loc_40578D
.text:0040576B
.text:0040576B loc_40576B:                             ; CODE XREF: SimConnect_ClearInputGroup+44↑j
.text:0040576B                 test    esi, esi
.text:0040576D                 mov     edx, [ebp+arg_4]
.text:00405770                 mov     [ecx+10h], edx
.text:00405773                 jz      short loc_40579D
.text:00405775                 cmp     byte ptr [esi+1E0h], 0
.text:0040577C                 jz      short loc_40579D
.text:0040577E                 call    sub_403E40
.text:00405783                 mov     eax, edi
.text:00405785                 pop     edi
.text:00405786                 pop     esi
.text:00405787                 mov     esp, ebp
.text:00405789                 pop     ebp
.text:0040578A                 retn    8
.text:0040578D ; ---------------------------------------------------------------------------
.text:0040578D
.text:0040578D loc_40578D:                             ; CODE XREF: SimConnect_ClearInputGroup+49↑j
.text:0040578D                                         ; SimConnect_ClearInputGroup+59↑j
.text:0040578D                 mov     eax, [ebp+var_4]
.text:00405790                 test    eax, eax
.text:00405792                 jz      short loc_40579D
.text:00405794                 push    14h             ; Size
.text:00405796                 push    eax             ; void *
.text:00405797                 push    esi             ; int
.text:00405798                 call    sub_403D30
.text:0040579D
.text:0040579D loc_40579D:                             ; CODE XREF: SimConnect_ClearInputGroup+63↑j
.text:0040579D                                         ; SimConnect_ClearInputGroup+6C↑j ...
.text:0040579D                 mov     eax, edi
.text:0040579F                 pop     edi
.text:004057A0                 pop     esi
.text:004057A1                 mov     esp, ebp
.text:004057A3                 pop     ebp
.text:004057A4                 retn    8
.text:004057A4 SimConnect_ClearInputGroup endp
.text:004057A4
.text:004057A4 ; ---------------------------------------------------------------------------
.text:004057A7                 align 10h
.text:004057B0 ; Exported entry  49. SimConnect_SetInputGroupState
.text:004057B0
.text:004057B0 ; =============== S U B R O U T I N E =======================================
.text:004057B0
.text:004057B0 ; Attributes: bp-based frame
.text:004057B0
.text:004057B0                 public SimConnect_SetInputGroupState
.text:004057B0 SimConnect_SetInputGroupState proc near ; DATA XREF: .text:off_409FB8↓o
.text:004057B0
.text:004057B0 var_4           = dword ptr -4
.text:004057B0 arg_0           = dword ptr  8
.text:004057B0 arg_4           = dword ptr  0Ch
.text:004057B0 arg_8           = dword ptr  10h
.text:004057B0
.text:004057B0                 mov     edi, edi
.text:004057B2                 push    ebp
.text:004057B3                 mov     ebp, esp
.text:004057B5                 push    ecx
.text:004057B6                 push    esi
.text:004057B7                 mov     esi, [ebp+arg_0]
.text:004057BA                 push    edi
.text:004057BB                 lea     eax, [ebp+var_4]
.text:004057BE                 push    eax
.text:004057BF                 mov     eax, 18h
.text:004057C4                 mov     ecx, esi
.text:004057C6                 mov     [ebp+var_4], 0
.text:004057CD                 mov     edi, 80004005h
.text:004057D2                 call    sub_403C30
.text:004057D7                 test    eax, eax
.text:004057D9                 mov     ecx, [ebp+var_4]
.text:004057DC                 jnz     short loc_4057F6
.text:004057DE                 mov     dword ptr [ecx], 18h
.text:004057E4                 mov     dword ptr [ecx+8], 0F0000015h
.text:004057EB                 mov     dword ptr [ecx+4], 4
.text:004057F2                 xor     edi, edi
.text:004057F4                 jmp     short loc_40580B
.text:004057F6 ; ---------------------------------------------------------------------------
.text:004057F6
.text:004057F6 loc_4057F6:                             ; CODE XREF: SimConnect_SetInputGroupState+2C↑j
.text:004057F6                 cmp     eax, 2
.text:004057F9                 jnz     short loc_405833
.text:004057FB                 test    esi, esi
.text:004057FD                 jz      short loc_405804
.text:004057FF                 mov     edi, [esi+14h]
.text:00405802                 jmp     short loc_405807
.text:00405804 ; ---------------------------------------------------------------------------
.text:00405804
.text:00405804 loc_405804:                             ; CODE XREF: SimConnect_SetInputGroupState+4D↑j
.text:00405804                 mov     edi, [ebp+arg_0]
.text:00405807
.text:00405807 loc_405807:                             ; CODE XREF: SimConnect_SetInputGroupState+52↑j
.text:00405807                 test    edi, edi
.text:00405809                 jl      short loc_405833
.text:0040580B
.text:0040580B loc_40580B:                             ; CODE XREF: SimConnect_SetInputGroupState+44↑j
.text:0040580B                 test    esi, esi
.text:0040580D                 mov     edx, [ebp+arg_4]
.text:00405810                 mov     eax, [ebp+arg_8]
.text:00405813                 mov     [ecx+10h], edx
.text:00405816                 mov     [ecx+14h], eax
.text:00405819                 jz      short loc_405843
.text:0040581B                 cmp     byte ptr [esi+1E0h], 0
.text:00405822                 jz      short loc_405843
.text:00405824                 call    sub_403E40
.text:00405829                 mov     eax, edi
.text:0040582B                 pop     edi
.text:0040582C                 pop     esi
.text:0040582D                 mov     esp, ebp
.text:0040582F                 pop     ebp
.text:00405830                 retn    0Ch
.text:00405833 ; ---------------------------------------------------------------------------
.text:00405833
.text:00405833 loc_405833:                             ; CODE XREF: SimConnect_SetInputGroupState+49↑j
.text:00405833                                         ; SimConnect_SetInputGroupState+59↑j
.text:00405833                 mov     eax, [ebp+var_4]
.text:00405836                 test    eax, eax
.text:00405838                 jz      short loc_405843
.text:0040583A                 push    18h             ; Size
.text:0040583C                 push    eax             ; void *
.text:0040583D                 push    esi             ; int
.text:0040583E                 call    sub_403D30
.text:00405843
.text:00405843 loc_405843:                             ; CODE XREF: SimConnect_SetInputGroupState+69↑j
.text:00405843                                         ; SimConnect_SetInputGroupState+72↑j ...
.text:00405843                 mov     eax, edi
.text:00405845                 pop     edi
.text:00405846                 pop     esi
.text:00405847                 mov     esp, ebp
.text:00405849                 pop     ebp
.text:0040584A                 retn    0Ch
.text:0040584A SimConnect_SetInputGroupState endp
.text:0040584A
.text:0040584A ; ---------------------------------------------------------------------------
.text:0040584D                 align 20h
.text:00405860 ; Exported entry  42. SimConnect_RequestReservedKey
.text:00405860
.text:00405860 ; =============== S U B R O U T I N E =======================================
.text:00405860
.text:00405860 ; Attributes: bp-based frame
.text:00405860
.text:00405860                 public SimConnect_RequestReservedKey
.text:00405860 SimConnect_RequestReservedKey proc near ; DATA XREF: .text:off_409FB8↓o
.text:00405860
.text:00405860 var_4           = dword ptr -4
.text:00405860 arg_0           = dword ptr  8
.text:00405860 arg_4           = dword ptr  0Ch
.text:00405860 arg_8           = dword ptr  10h
.text:00405860 arg_C           = dword ptr  14h
.text:00405860 arg_10          = dword ptr  18h
.text:00405860
.text:00405860                 mov     edi, edi
.text:00405862                 push    ebp
.text:00405863                 mov     ebp, esp
.text:00405865                 push    ecx
.text:00405866                 push    ebx
.text:00405867                 push    esi
.text:00405868                 mov     esi, [ebp+arg_0]
.text:0040586B                 push    edi
.text:0040586C                 lea     eax, [ebp+var_4]
.text:0040586F                 push    eax
.text:00405870                 mov     eax, 6Eh ; 'n'
.text:00405875                 mov     ecx, esi
.text:00405877                 mov     [ebp+var_4], 0
.text:0040587E                 mov     ebx, 80004005h
.text:00405883                 call    sub_403C30
.text:00405888                 test    eax, eax
.text:0040588A                 mov     edi, [ebp+var_4]
.text:0040588D                 jnz     short loc_4058A7
.text:0040588F                 mov     dword ptr [edi], 6Eh ; 'n'
.text:00405895                 mov     dword ptr [edi+8], 0F0000016h
.text:0040589C                 mov     dword ptr [edi+4], 4
.text:004058A3                 xor     ebx, ebx
.text:004058A5                 jmp     short loc_4058B8
.text:004058A7 ; ---------------------------------------------------------------------------
.text:004058A7
.text:004058A7 loc_4058A7:                             ; CODE XREF: SimConnect_RequestReservedKey+2D↑j
.text:004058A7                 cmp     eax, 2
.text:004058AA                 jnz     short loc_4058B8
.text:004058AC                 test    esi, esi
.text:004058AE                 jz      short loc_4058B5
.text:004058B0                 mov     ebx, [esi+14h]
.text:004058B3                 jmp     short loc_4058B8
.text:004058B5 ; ---------------------------------------------------------------------------
.text:004058B5
.text:004058B5 loc_4058B5:                             ; CODE XREF: SimConnect_RequestReservedKey+4E↑j
.text:004058B5                 mov     ebx, [ebp+arg_0]
.text:004058B8
.text:004058B8 loc_4058B8:                             ; CODE XREF: SimConnect_RequestReservedKey+45↑j
.text:004058B8                                         ; SimConnect_RequestReservedKey+4A↑j ...
.text:004058B8                 test    ebx, ebx
.text:004058BA                 jl      short loc_4058DC
.text:004058BC                 mov     eax, [ebp+arg_8]
.text:004058BF                 test    eax, eax
.text:004058C1                 mov     ecx, [ebp+arg_4]
.text:004058C4                 mov     [edi+10h], ecx
.text:004058C7                 jz      short loc_4058F4
.text:004058C9                 lea     edx, [edi+14h]
.text:004058CC                 mov     ecx, 1Eh
.text:004058D1                 call    sub_402580
.text:004058D6                 mov     ebx, eax
.text:004058D8                 test    ebx, ebx
.text:004058DA                 jge     short loc_4058F8
.text:004058DC
.text:004058DC loc_4058DC:                             ; CODE XREF: SimConnect_RequestReservedKey+5A↑j
.text:004058DC                                         ; SimConnect_RequestReservedKey+B0↓j ...
.text:004058DC                 test    edi, edi
.text:004058DE                 jz      short loc_4058E9
.text:004058E0                 push    6Eh ; 'n'       ; Size
.text:004058E2                 push    edi             ; void *
.text:004058E3                 push    esi             ; int
.text:004058E4                 call    sub_403D30
.text:004058E9
.text:004058E9 loc_4058E9:                             ; CODE XREF: SimConnect_RequestReservedKey+7E↑j
.text:004058E9                                         ; SimConnect_RequestReservedKey+DA↓j ...
.text:004058E9                 pop     edi
.text:004058EA                 pop     esi
.text:004058EB                 mov     eax, ebx
.text:004058ED                 pop     ebx
.text:004058EE                 mov     esp, ebp
.text:004058F0                 pop     ebp
.text:004058F1                 retn    14h
.text:004058F4 ; ---------------------------------------------------------------------------
.text:004058F4
.text:004058F4 loc_4058F4:                             ; CODE XREF: SimConnect_RequestReservedKey+67↑j
.text:004058F4                 mov     byte ptr [edi+14h], 0
.text:004058F8
.text:004058F8 loc_4058F8:                             ; CODE XREF: SimConnect_RequestReservedKey+7A↑j
.text:004058F8                 mov     eax, [ebp+arg_C]
.text:004058FB                 test    eax, eax
.text:004058FD                 jz      short loc_405914
.text:004058FF                 lea     edx, [edi+32h]
.text:00405902                 mov     ecx, 1Eh
.text:00405907                 call    sub_402580
.text:0040590C                 mov     ebx, eax
.text:0040590E                 test    ebx, ebx
.text:00405910                 jl      short loc_4058DC
.text:00405912                 jmp     short loc_405918
.text:00405914 ; ---------------------------------------------------------------------------
.text:00405914
.text:00405914 loc_405914:                             ; CODE XREF: SimConnect_RequestReservedKey+9D↑j
.text:00405914                 mov     byte ptr [edi+32h], 0
.text:00405918
.text:00405918 loc_405918:                             ; CODE XREF: SimConnect_RequestReservedKey+B2↑j
.text:00405918                 mov     eax, [ebp+arg_10]
.text:0040591B                 test    eax, eax
.text:0040591D                 jz      short loc_405934
.text:0040591F                 lea     edx, [edi+50h]
.text:00405922                 mov     ecx, 1Eh
.text:00405927                 call    sub_402580
.text:0040592C                 mov     ebx, eax
.text:0040592E                 test    ebx, ebx
.text:00405930                 jl      short loc_4058DC
.text:00405932                 jmp     short loc_405938
.text:00405934 ; ---------------------------------------------------------------------------
.text:00405934
.text:00405934 loc_405934:                             ; CODE XREF: SimConnect_RequestReservedKey+BD↑j
.text:00405934                 mov     byte ptr [edi+50h], 0
.text:00405938
.text:00405938 loc_405938:                             ; CODE XREF: SimConnect_RequestReservedKey+D2↑j
.text:00405938                 test    esi, esi
.text:0040593A                 jz      short loc_4058E9
.text:0040593C                 cmp     byte ptr [esi+1E0h], 0
.text:00405943                 jz      short loc_4058E9
.text:00405945                 call    sub_403E40
.text:0040594A                 pop     edi
.text:0040594B                 pop     esi
.text:0040594C                 mov     eax, ebx
.text:0040594E                 pop     ebx
.text:0040594F                 mov     esp, ebp
.text:00405951                 pop     ebp
.text:00405952                 retn    14h
.text:00405952 SimConnect_RequestReservedKey endp
.text:00405952
.text:00405952 ; ---------------------------------------------------------------------------
.text:00405955                 align 10h
.text:00405960 ; Exported entry  54. SimConnect_SubscribeToSystemEvent
.text:00405960
.text:00405960 ; =============== S U B R O U T I N E =======================================
.text:00405960
.text:00405960 ; Attributes: bp-based frame
.text:00405960
.text:00405960                 public SimConnect_SubscribeToSystemEvent
.text:00405960 SimConnect_SubscribeToSystemEvent proc near
.text:00405960                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405960
.text:00405960 var_4           = dword ptr -4
.text:00405960 arg_0           = dword ptr  8
.text:00405960 arg_4           = dword ptr  0Ch
.text:00405960 arg_8           = dword ptr  10h
.text:00405960
.text:00405960                 mov     edi, edi
.text:00405962                 push    ebp
.text:00405963                 mov     ebp, esp
.text:00405965                 push    ecx
.text:00405966                 push    ebx
.text:00405967                 mov     ebx, [ebp+arg_0]
.text:0040596A                 push    esi
.text:0040596B                 push    edi
.text:0040596C                 lea     eax, [ebp+var_4]
.text:0040596F                 push    eax
.text:00405970                 mov     eax, 114h
.text:00405975                 mov     ecx, ebx
.text:00405977                 mov     [ebp+var_4], 0
.text:0040597E                 mov     esi, 80004005h
.text:00405983                 call    sub_403C30
.text:00405988                 test    eax, eax
.text:0040598A                 mov     edi, [ebp+var_4]
.text:0040598D                 jnz     short loc_4059A7
.text:0040598F                 mov     dword ptr [edi], 114h
.text:00405995                 mov     dword ptr [edi+8], 0F0000017h
.text:0040599C                 mov     dword ptr [edi+4], 4
.text:004059A3                 xor     esi, esi
.text:004059A5                 jmp     short loc_4059B8
.text:004059A7 ; ---------------------------------------------------------------------------
.text:004059A7
.text:004059A7 loc_4059A7:                             ; CODE XREF: SimConnect_SubscribeToSystemEvent+2D↑j
.text:004059A7                 cmp     eax, 2
.text:004059AA                 jnz     short loc_4059B8
.text:004059AC                 test    ebx, ebx
.text:004059AE                 jz      short loc_4059B5
.text:004059B0                 mov     esi, [ebx+14h]
.text:004059B3                 jmp     short loc_4059B8
.text:004059B5 ; ---------------------------------------------------------------------------
.text:004059B5
.text:004059B5 loc_4059B5:                             ; CODE XREF: SimConnect_SubscribeToSystemEvent+4E↑j
.text:004059B5                 mov     esi, [ebp+arg_0]
.text:004059B8
.text:004059B8 loc_4059B8:                             ; CODE XREF: SimConnect_SubscribeToSystemEvent+45↑j
.text:004059B8                                         ; SimConnect_SubscribeToSystemEvent+4A↑j ...
.text:004059B8                 test    esi, esi
.text:004059BA                 mov     ebx, esi
.text:004059BC                 jl      short loc_4059DE
.text:004059BE                 mov     eax, [ebp+arg_8]
.text:004059C1                 test    eax, eax
.text:004059C3                 mov     ecx, [ebp+arg_4]
.text:004059C6                 mov     [edi+10h], ecx
.text:004059C9                 jz      short loc_4059FC
.text:004059CB                 lea     edx, [edi+14h]
.text:004059CE                 mov     ecx, 100h
.text:004059D3                 call    sub_402580
.text:004059D8                 mov     ebx, eax
.text:004059DA                 test    ebx, ebx
.text:004059DC                 jge     short loc_405A00
.text:004059DE
.text:004059DE loc_4059DE:                             ; CODE XREF: SimConnect_SubscribeToSystemEvent+5C↑j
.text:004059DE                 test    edi, edi
.text:004059E0                 jz      short loc_4059F1
.text:004059E2                 mov     edx, [ebp+arg_0]
.text:004059E5                 push    114h            ; Size
.text:004059EA                 push    edi             ; void *
.text:004059EB                 push    edx             ; int
.text:004059EC                 call    sub_403D30
.text:004059F1
.text:004059F1 loc_4059F1:                             ; CODE XREF: SimConnect_SubscribeToSystemEvent+80↑j
.text:004059F1                                         ; SimConnect_SubscribeToSystemEvent+A5↓j ...
.text:004059F1                 pop     edi
.text:004059F2                 pop     esi
.text:004059F3                 mov     eax, ebx
.text:004059F5                 pop     ebx
.text:004059F6                 mov     esp, ebp
.text:004059F8                 pop     ebp
.text:004059F9                 retn    0Ch
.text:004059FC ; ---------------------------------------------------------------------------
.text:004059FC
.text:004059FC loc_4059FC:                             ; CODE XREF: SimConnect_SubscribeToSystemEvent+69↑j
.text:004059FC                 mov     byte ptr [edi+14h], 0
.text:00405A00
.text:00405A00 loc_405A00:                             ; CODE XREF: SimConnect_SubscribeToSystemEvent+7C↑j
.text:00405A00                 mov     esi, [ebp+arg_0]
.text:00405A03                 test    esi, esi
.text:00405A05                 jz      short loc_4059F1
.text:00405A07                 cmp     byte ptr [esi+1E0h], 0
.text:00405A0E                 jz      short loc_4059F1
.text:00405A10                 call    sub_403E40
.text:00405A15                 pop     edi
.text:00405A16                 pop     esi
.text:00405A17                 mov     eax, ebx
.text:00405A19                 pop     ebx
.text:00405A1A                 mov     esp, ebp
.text:00405A1C                 pop     ebp
.text:00405A1D                 retn    0Ch
.text:00405A1D SimConnect_SubscribeToSystemEvent endp
.text:00405A1D
.text:00405A1D ; ---------------------------------------------------------------------------
.text:00405A20                 db 10h dup(0CCh)
.text:00405A30 ; Exported entry  57. SimConnect_UnsubscribeFromSystemEvent
.text:00405A30
.text:00405A30 ; =============== S U B R O U T I N E =======================================
.text:00405A30
.text:00405A30 ; Attributes: bp-based frame
.text:00405A30
.text:00405A30                 public SimConnect_UnsubscribeFromSystemEvent
.text:00405A30 SimConnect_UnsubscribeFromSystemEvent proc near
.text:00405A30                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405A30
.text:00405A30 var_4           = dword ptr -4
.text:00405A30 arg_0           = dword ptr  8
.text:00405A30 arg_4           = dword ptr  0Ch
.text:00405A30
.text:00405A30                 mov     edi, edi
.text:00405A32                 push    ebp
.text:00405A33                 mov     ebp, esp
.text:00405A35                 push    ecx
.text:00405A36                 push    esi
.text:00405A37                 mov     esi, [ebp+arg_0]
.text:00405A3A                 push    edi
.text:00405A3B                 lea     eax, [ebp+var_4]
.text:00405A3E                 push    eax
.text:00405A3F                 mov     eax, 14h
.text:00405A44                 mov     ecx, esi
.text:00405A46                 mov     [ebp+var_4], 0
.text:00405A4D                 mov     edi, 80004005h
.text:00405A52                 call    sub_403C30
.text:00405A57                 test    eax, eax
.text:00405A59                 mov     ecx, [ebp+var_4]
.text:00405A5C                 jnz     short loc_405A76
.text:00405A5E                 mov     dword ptr [ecx], 14h
.text:00405A64                 mov     dword ptr [ecx+8], 0F0000018h
.text:00405A6B                 mov     dword ptr [ecx+4], 4
.text:00405A72                 xor     edi, edi
.text:00405A74                 jmp     short loc_405A8B
.text:00405A76 ; ---------------------------------------------------------------------------
.text:00405A76
.text:00405A76 loc_405A76:                             ; CODE XREF: SimConnect_UnsubscribeFromSystemEvent+2C↑j
.text:00405A76                 cmp     eax, 2
.text:00405A79                 jnz     short loc_405AAD
.text:00405A7B                 test    esi, esi
.text:00405A7D                 jz      short loc_405A84
.text:00405A7F                 mov     edi, [esi+14h]
.text:00405A82                 jmp     short loc_405A87
.text:00405A84 ; ---------------------------------------------------------------------------
.text:00405A84
.text:00405A84 loc_405A84:                             ; CODE XREF: SimConnect_UnsubscribeFromSystemEvent+4D↑j
.text:00405A84                 mov     edi, [ebp+arg_0]
.text:00405A87
.text:00405A87 loc_405A87:                             ; CODE XREF: SimConnect_UnsubscribeFromSystemEvent+52↑j
.text:00405A87                 test    edi, edi
.text:00405A89                 jl      short loc_405AAD
.text:00405A8B
.text:00405A8B loc_405A8B:                             ; CODE XREF: SimConnect_UnsubscribeFromSystemEvent+44↑j
.text:00405A8B                 test    esi, esi
.text:00405A8D                 mov     edx, [ebp+arg_4]
.text:00405A90                 mov     [ecx+10h], edx
.text:00405A93                 jz      short loc_405ABD
.text:00405A95                 cmp     byte ptr [esi+1E0h], 0
.text:00405A9C                 jz      short loc_405ABD
.text:00405A9E                 call    sub_403E40
.text:00405AA3                 mov     eax, edi
.text:00405AA5                 pop     edi
.text:00405AA6                 pop     esi
.text:00405AA7                 mov     esp, ebp
.text:00405AA9                 pop     ebp
.text:00405AAA                 retn    8
.text:00405AAD ; ---------------------------------------------------------------------------
.text:00405AAD
.text:00405AAD loc_405AAD:                             ; CODE XREF: SimConnect_UnsubscribeFromSystemEvent+49↑j
.text:00405AAD                                         ; SimConnect_UnsubscribeFromSystemEvent+59↑j
.text:00405AAD                 mov     eax, [ebp+var_4]
.text:00405AB0                 test    eax, eax
.text:00405AB2                 jz      short loc_405ABD
.text:00405AB4                 push    14h             ; Size
.text:00405AB6                 push    eax             ; void *
.text:00405AB7                 push    esi             ; int
.text:00405AB8                 call    sub_403D30
.text:00405ABD
.text:00405ABD loc_405ABD:                             ; CODE XREF: SimConnect_UnsubscribeFromSystemEvent+63↑j
.text:00405ABD                                         ; SimConnect_UnsubscribeFromSystemEvent+6C↑j ...
.text:00405ABD                 mov     eax, edi
.text:00405ABF                 pop     edi
.text:00405AC0                 pop     esi
.text:00405AC1                 mov     esp, ebp
.text:00405AC3                 pop     ebp
.text:00405AC4                 retn    8
.text:00405AC4 SimConnect_UnsubscribeFromSystemEvent endp
.text:00405AC4
.text:00405AC4 ; ---------------------------------------------------------------------------
.text:00405AC7                 align 10h
.text:00405AD0 ; Exported entry  64. SimConnect_WeatherRequestInterpolatedObservation
.text:00405AD0
.text:00405AD0 ; =============== S U B R O U T I N E =======================================
.text:00405AD0
.text:00405AD0 ; Attributes: bp-based frame
.text:00405AD0
.text:00405AD0 ; int __stdcall SimConnect_WeatherRequestInterpolatedObservation(int, int, float, float, float)
.text:00405AD0                 public SimConnect_WeatherRequestInterpolatedObservation
.text:00405AD0 SimConnect_WeatherRequestInterpolatedObservation proc near
.text:00405AD0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405AD0
.text:00405AD0 var_4           = dword ptr -4
.text:00405AD0 arg_0           = dword ptr  8
.text:00405AD0 arg_4           = dword ptr  0Ch
.text:00405AD0 arg_8           = dword ptr  10h
.text:00405AD0 arg_C           = dword ptr  14h
.text:00405AD0 arg_10          = dword ptr  18h
.text:00405AD0
.text:00405AD0                 mov     edi, edi
.text:00405AD2                 push    ebp
.text:00405AD3                 mov     ebp, esp
.text:00405AD5                 push    ecx
.text:00405AD6                 push    esi
.text:00405AD7                 mov     esi, [ebp+arg_0]
.text:00405ADA                 push    edi
.text:00405ADB                 lea     eax, [ebp+var_4]
.text:00405ADE                 push    eax
.text:00405ADF                 mov     eax, 20h ; ' '
.text:00405AE4                 mov     ecx, esi
.text:00405AE6                 mov     [ebp+var_4], 0
.text:00405AED                 mov     edi, 80004005h
.text:00405AF2                 call    sub_403C30
.text:00405AF7                 test    eax, eax
.text:00405AF9                 mov     ecx, [ebp+var_4]
.text:00405AFC                 jnz     short loc_405B16
.text:00405AFE                 mov     dword ptr [ecx], 20h ; ' '
.text:00405B04                 mov     dword ptr [ecx+8], 0F0000019h
.text:00405B0B                 mov     dword ptr [ecx+4], 4
.text:00405B12                 xor     edi, edi
.text:00405B14                 jmp     short loc_405B2B
.text:00405B16 ; ---------------------------------------------------------------------------
.text:00405B16
.text:00405B16 loc_405B16:                             ; CODE XREF: SimConnect_WeatherRequestInterpolatedObservation+2C↑j
.text:00405B16                 cmp     eax, 2
.text:00405B19                 jnz     short loc_405B5F
.text:00405B1B                 test    esi, esi
.text:00405B1D                 jz      short loc_405B24
.text:00405B1F                 mov     edi, [esi+14h]
.text:00405B22                 jmp     short loc_405B27
.text:00405B24 ; ---------------------------------------------------------------------------
.text:00405B24
.text:00405B24 loc_405B24:                             ; CODE XREF: SimConnect_WeatherRequestInterpolatedObservation+4D↑j
.text:00405B24                 mov     edi, [ebp+arg_0]
.text:00405B27
.text:00405B27 loc_405B27:                             ; CODE XREF: SimConnect_WeatherRequestInterpolatedObservation+52↑j
.text:00405B27                 test    edi, edi
.text:00405B29                 jl      short loc_405B5F
.text:00405B2B
.text:00405B2B loc_405B2B:                             ; CODE XREF: SimConnect_WeatherRequestInterpolatedObservation+44↑j
.text:00405B2B                 test    esi, esi
.text:00405B2D                 fld     [ebp+arg_8]
.text:00405B30                 mov     edx, [ebp+arg_4]
.text:00405B33                 mov     [ecx+10h], edx
.text:00405B36                 fstp    dword ptr [ecx+14h]
.text:00405B39                 fld     [ebp+arg_C]
.text:00405B3C                 fstp    dword ptr [ecx+18h]
.text:00405B3F                 fld     [ebp+arg_10]
.text:00405B42                 fstp    dword ptr [ecx+1Ch]
.text:00405B45                 jz      short loc_405B6F
.text:00405B47                 cmp     byte ptr [esi+1E0h], 0
.text:00405B4E                 jz      short loc_405B6F
.text:00405B50                 call    sub_403E40
.text:00405B55                 mov     eax, edi
.text:00405B57                 pop     edi
.text:00405B58                 pop     esi
.text:00405B59                 mov     esp, ebp
.text:00405B5B                 pop     ebp
.text:00405B5C                 retn    14h
.text:00405B5F ; ---------------------------------------------------------------------------
.text:00405B5F
.text:00405B5F loc_405B5F:                             ; CODE XREF: SimConnect_WeatherRequestInterpolatedObservation+49↑j
.text:00405B5F                                         ; SimConnect_WeatherRequestInterpolatedObservation+59↑j
.text:00405B5F                 mov     eax, [ebp+var_4]
.text:00405B62                 test    eax, eax
.text:00405B64                 jz      short loc_405B6F
.text:00405B66                 push    20h ; ' '       ; Size
.text:00405B68                 push    eax             ; void *
.text:00405B69                 push    esi             ; int
.text:00405B6A                 call    sub_403D30
.text:00405B6F
.text:00405B6F loc_405B6F:                             ; CODE XREF: SimConnect_WeatherRequestInterpolatedObservation+75↑j
.text:00405B6F                                         ; SimConnect_WeatherRequestInterpolatedObservation+7E↑j ...
.text:00405B6F                 mov     eax, edi
.text:00405B71                 pop     edi
.text:00405B72                 pop     esi
.text:00405B73                 mov     esp, ebp
.text:00405B75                 pop     ebp
.text:00405B76                 retn    14h
.text:00405B76 SimConnect_WeatherRequestInterpolatedObservation endp
.text:00405B76
.text:00405B76 ; ---------------------------------------------------------------------------
.text:00405B79                 align 10h
.text:00405B80 ; Exported entry  66. SimConnect_WeatherRequestObservationAtStation
.text:00405B80
.text:00405B80 ; =============== S U B R O U T I N E =======================================
.text:00405B80
.text:00405B80 ; Attributes: bp-based frame
.text:00405B80
.text:00405B80                 public SimConnect_WeatherRequestObservationAtStation
.text:00405B80 SimConnect_WeatherRequestObservationAtStation proc near
.text:00405B80                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405B80
.text:00405B80 var_4           = dword ptr -4
.text:00405B80 arg_0           = dword ptr  8
.text:00405B80 arg_4           = dword ptr  0Ch
.text:00405B80 arg_8           = dword ptr  10h
.text:00405B80
.text:00405B80                 mov     edi, edi
.text:00405B82                 push    ebp
.text:00405B83                 mov     ebp, esp
.text:00405B85                 push    ecx
.text:00405B86                 push    ebx
.text:00405B87                 mov     ebx, [ebp+arg_0]
.text:00405B8A                 push    esi
.text:00405B8B                 push    edi
.text:00405B8C                 lea     eax, [ebp+var_4]
.text:00405B8F                 push    eax
.text:00405B90                 mov     eax, 19h
.text:00405B95                 mov     ecx, ebx
.text:00405B97                 mov     [ebp+var_4], 0
.text:00405B9E                 mov     esi, 80004005h
.text:00405BA3                 call    sub_403C30
.text:00405BA8                 test    eax, eax
.text:00405BAA                 mov     edi, [ebp+var_4]
.text:00405BAD                 jnz     short loc_405BC7
.text:00405BAF                 mov     dword ptr [edi], 19h
.text:00405BB5                 mov     dword ptr [edi+8], 0F000001Ah
.text:00405BBC                 mov     dword ptr [edi+4], 4
.text:00405BC3                 xor     esi, esi
.text:00405BC5                 jmp     short loc_405BD8
.text:00405BC7 ; ---------------------------------------------------------------------------
.text:00405BC7
.text:00405BC7 loc_405BC7:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtStation+2D↑j
.text:00405BC7                 cmp     eax, 2
.text:00405BCA                 jnz     short loc_405BD8
.text:00405BCC                 test    ebx, ebx
.text:00405BCE                 jz      short loc_405BD5
.text:00405BD0                 mov     esi, [ebx+14h]
.text:00405BD3                 jmp     short loc_405BD8
.text:00405BD5 ; ---------------------------------------------------------------------------
.text:00405BD5
.text:00405BD5 loc_405BD5:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtStation+4E↑j
.text:00405BD5                 mov     esi, [ebp+arg_0]
.text:00405BD8
.text:00405BD8 loc_405BD8:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtStation+45↑j
.text:00405BD8                                         ; SimConnect_WeatherRequestObservationAtStation+4A↑j ...
.text:00405BD8                 test    esi, esi
.text:00405BDA                 mov     ebx, esi
.text:00405BDC                 jl      short loc_405BFE
.text:00405BDE                 mov     eax, [ebp+arg_8]
.text:00405BE1                 test    eax, eax
.text:00405BE3                 mov     ecx, [ebp+arg_4]
.text:00405BE6                 mov     [edi+10h], ecx
.text:00405BE9                 jz      short loc_405C19
.text:00405BEB                 lea     edx, [edi+14h]
.text:00405BEE                 mov     ecx, 5
.text:00405BF3                 call    sub_402580
.text:00405BF8                 mov     ebx, eax
.text:00405BFA                 test    ebx, ebx
.text:00405BFC                 jge     short loc_405C1D
.text:00405BFE
.text:00405BFE loc_405BFE:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtStation+5C↑j
.text:00405BFE                 test    edi, edi
.text:00405C00                 jz      short loc_405C0E
.text:00405C02                 mov     edx, [ebp+arg_0]
.text:00405C05                 push    19h             ; Size
.text:00405C07                 push    edi             ; void *
.text:00405C08                 push    edx             ; int
.text:00405C09                 call    sub_403D30
.text:00405C0E
.text:00405C0E loc_405C0E:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtStation+80↑j
.text:00405C0E                                         ; SimConnect_WeatherRequestObservationAtStation+A2↓j ...
.text:00405C0E                 pop     edi
.text:00405C0F                 pop     esi
.text:00405C10                 mov     eax, ebx
.text:00405C12                 pop     ebx
.text:00405C13                 mov     esp, ebp
.text:00405C15                 pop     ebp
.text:00405C16                 retn    0Ch
.text:00405C19 ; ---------------------------------------------------------------------------
.text:00405C19
.text:00405C19 loc_405C19:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtStation+69↑j
.text:00405C19                 mov     byte ptr [edi+14h], 0
.text:00405C1D
.text:00405C1D loc_405C1D:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtStation+7C↑j
.text:00405C1D                 mov     esi, [ebp+arg_0]
.text:00405C20                 test    esi, esi
.text:00405C22                 jz      short loc_405C0E
.text:00405C24                 cmp     byte ptr [esi+1E0h], 0
.text:00405C2B                 jz      short loc_405C0E
.text:00405C2D                 call    sub_403E40
.text:00405C32                 pop     edi
.text:00405C33                 pop     esi
.text:00405C34                 mov     eax, ebx
.text:00405C36                 pop     ebx
.text:00405C37                 mov     esp, ebp
.text:00405C39                 pop     ebp
.text:00405C3A                 retn    0Ch
.text:00405C3A SimConnect_WeatherRequestObservationAtStation endp
.text:00405C3A
.text:00405C3A ; ---------------------------------------------------------------------------
.text:00405C3D                 db 13h dup(0CCh)
.text:00405C50 ; Exported entry  65. SimConnect_WeatherRequestObservationAtNearestStation
.text:00405C50
.text:00405C50 ; =============== S U B R O U T I N E =======================================
.text:00405C50
.text:00405C50 ; Attributes: bp-based frame
.text:00405C50
.text:00405C50 ; int __stdcall SimConnect_WeatherRequestObservationAtNearestStation(int, int, float, float)
.text:00405C50                 public SimConnect_WeatherRequestObservationAtNearestStation
.text:00405C50 SimConnect_WeatherRequestObservationAtNearestStation proc near
.text:00405C50                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405C50
.text:00405C50 var_4           = dword ptr -4
.text:00405C50 arg_0           = dword ptr  8
.text:00405C50 arg_4           = dword ptr  0Ch
.text:00405C50 arg_8           = dword ptr  10h
.text:00405C50 arg_C           = dword ptr  14h
.text:00405C50
.text:00405C50                 mov     edi, edi
.text:00405C52                 push    ebp
.text:00405C53                 mov     ebp, esp
.text:00405C55                 push    ecx
.text:00405C56                 push    esi
.text:00405C57                 mov     esi, [ebp+arg_0]
.text:00405C5A                 push    edi
.text:00405C5B                 lea     eax, [ebp+var_4]
.text:00405C5E                 push    eax
.text:00405C5F                 mov     eax, 1Ch
.text:00405C64                 mov     ecx, esi
.text:00405C66                 mov     [ebp+var_4], 0
.text:00405C6D                 mov     edi, 80004005h
.text:00405C72                 call    sub_403C30
.text:00405C77                 test    eax, eax
.text:00405C79                 mov     ecx, [ebp+var_4]
.text:00405C7C                 jnz     short loc_405C96
.text:00405C7E                 mov     dword ptr [ecx], 1Ch
.text:00405C84                 mov     dword ptr [ecx+8], 0F000001Bh
.text:00405C8B                 mov     dword ptr [ecx+4], 4
.text:00405C92                 xor     edi, edi
.text:00405C94                 jmp     short loc_405CAB
.text:00405C96 ; ---------------------------------------------------------------------------
.text:00405C96
.text:00405C96 loc_405C96:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtNearestStation+2C↑j
.text:00405C96                 cmp     eax, 2
.text:00405C99                 jnz     short loc_405CD9
.text:00405C9B                 test    esi, esi
.text:00405C9D                 jz      short loc_405CA4
.text:00405C9F                 mov     edi, [esi+14h]
.text:00405CA2                 jmp     short loc_405CA7
.text:00405CA4 ; ---------------------------------------------------------------------------
.text:00405CA4
.text:00405CA4 loc_405CA4:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtNearestStation+4D↑j
.text:00405CA4                 mov     edi, [ebp+arg_0]
.text:00405CA7
.text:00405CA7 loc_405CA7:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtNearestStation+52↑j
.text:00405CA7                 test    edi, edi
.text:00405CA9                 jl      short loc_405CD9
.text:00405CAB
.text:00405CAB loc_405CAB:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtNearestStation+44↑j
.text:00405CAB                 test    esi, esi
.text:00405CAD                 fld     [ebp+arg_8]
.text:00405CB0                 mov     edx, [ebp+arg_4]
.text:00405CB3                 mov     [ecx+10h], edx
.text:00405CB6                 fstp    dword ptr [ecx+14h]
.text:00405CB9                 fld     [ebp+arg_C]
.text:00405CBC                 fstp    dword ptr [ecx+18h]
.text:00405CBF                 jz      short loc_405CE9
.text:00405CC1                 cmp     byte ptr [esi+1E0h], 0
.text:00405CC8                 jz      short loc_405CE9
.text:00405CCA                 call    sub_403E40
.text:00405CCF                 mov     eax, edi
.text:00405CD1                 pop     edi
.text:00405CD2                 pop     esi
.text:00405CD3                 mov     esp, ebp
.text:00405CD5                 pop     ebp
.text:00405CD6                 retn    10h
.text:00405CD9 ; ---------------------------------------------------------------------------
.text:00405CD9
.text:00405CD9 loc_405CD9:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtNearestStation+49↑j
.text:00405CD9                                         ; SimConnect_WeatherRequestObservationAtNearestStation+59↑j
.text:00405CD9                 mov     eax, [ebp+var_4]
.text:00405CDC                 test    eax, eax
.text:00405CDE                 jz      short loc_405CE9
.text:00405CE0                 push    1Ch             ; Size
.text:00405CE2                 push    eax             ; void *
.text:00405CE3                 push    esi             ; int
.text:00405CE4                 call    sub_403D30
.text:00405CE9
.text:00405CE9 loc_405CE9:                             ; CODE XREF: SimConnect_WeatherRequestObservationAtNearestStation+6F↑j
.text:00405CE9                                         ; SimConnect_WeatherRequestObservationAtNearestStation+78↑j ...
.text:00405CE9                 mov     eax, edi
.text:00405CEB                 pop     edi
.text:00405CEC                 pop     esi
.text:00405CED                 mov     esp, ebp
.text:00405CEF                 pop     ebp
.text:00405CF0                 retn    10h
.text:00405CF0 SimConnect_WeatherRequestObservationAtNearestStation endp
.text:00405CF0
.text:00405CF0 ; ---------------------------------------------------------------------------
.text:00405CF3                 align 10h
.text:00405D00 ; Exported entry  59. SimConnect_WeatherCreateStation
.text:00405D00
.text:00405D00 ; =============== S U B R O U T I N E =======================================
.text:00405D00
.text:00405D00 ; Attributes: bp-based frame
.text:00405D00
.text:00405D00 ; int __stdcall SimConnect_WeatherCreateStation(int, int, int, int, float, float, float)
.text:00405D00                 public SimConnect_WeatherCreateStation
.text:00405D00 SimConnect_WeatherCreateStation proc near
.text:00405D00                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405D00
.text:00405D00 var_4           = dword ptr -4
.text:00405D00 arg_0           = dword ptr  8
.text:00405D00 arg_4           = dword ptr  0Ch
.text:00405D00 arg_8           = dword ptr  10h
.text:00405D00 arg_C           = dword ptr  14h
.text:00405D00 arg_10          = dword ptr  18h
.text:00405D00 arg_14          = dword ptr  1Ch
.text:00405D00 arg_18          = dword ptr  20h
.text:00405D00
.text:00405D00                 mov     edi, edi
.text:00405D02                 push    ebp
.text:00405D03                 mov     ebp, esp
.text:00405D05                 push    ecx
.text:00405D06                 push    ebx
.text:00405D07                 push    esi
.text:00405D08                 mov     esi, [ebp+arg_0]
.text:00405D0B                 push    edi
.text:00405D0C                 lea     eax, [ebp+var_4]
.text:00405D0F                 push    eax
.text:00405D10                 mov     eax, 125h
.text:00405D15                 mov     ecx, esi
.text:00405D17                 mov     [ebp+var_4], 0
.text:00405D1E                 mov     ebx, 80004005h
.text:00405D23                 call    sub_403C30
.text:00405D28                 test    eax, eax
.text:00405D2A                 mov     edi, [ebp+var_4]
.text:00405D2D                 jnz     short loc_405D47
.text:00405D2F                 mov     dword ptr [edi], 125h
.text:00405D35                 mov     dword ptr [edi+8], 0F000001Ch
.text:00405D3C                 mov     dword ptr [edi+4], 4
.text:00405D43                 xor     ebx, ebx
.text:00405D45                 jmp     short loc_405D58
.text:00405D47 ; ---------------------------------------------------------------------------
.text:00405D47
.text:00405D47 loc_405D47:                             ; CODE XREF: SimConnect_WeatherCreateStation+2D↑j
.text:00405D47                 cmp     eax, 2
.text:00405D4A                 jnz     short loc_405D58
.text:00405D4C                 test    esi, esi
.text:00405D4E                 jz      short loc_405D55
.text:00405D50                 mov     ebx, [esi+14h]
.text:00405D53                 jmp     short loc_405D58
.text:00405D55 ; ---------------------------------------------------------------------------
.text:00405D55
.text:00405D55 loc_405D55:                             ; CODE XREF: SimConnect_WeatherCreateStation+4E↑j
.text:00405D55                 mov     ebx, [ebp+arg_0]
.text:00405D58
.text:00405D58 loc_405D58:                             ; CODE XREF: SimConnect_WeatherCreateStation+45↑j
.text:00405D58                                         ; SimConnect_WeatherCreateStation+4A↑j ...
.text:00405D58                 test    ebx, ebx
.text:00405D5A                 jl      short loc_405D7C
.text:00405D5C                 mov     eax, [ebp+arg_8]
.text:00405D5F                 test    eax, eax
.text:00405D61                 mov     ecx, [ebp+arg_4]
.text:00405D64                 mov     [edi+10h], ecx
.text:00405D67                 jz      short loc_405D97
.text:00405D69                 lea     edx, [edi+14h]
.text:00405D6C                 mov     ecx, 5
.text:00405D71                 call    sub_402580
.text:00405D76                 mov     ebx, eax
.text:00405D78                 test    ebx, ebx
.text:00405D7A                 jge     short loc_405D9B
.text:00405D7C
.text:00405D7C loc_405D7C:                             ; CODE XREF: SimConnect_WeatherCreateStation+5A↑j
.text:00405D7C                                         ; SimConnect_WeatherCreateStation+B3↓j
.text:00405D7C                 test    edi, edi
.text:00405D7E                 jz      short loc_405D8C
.text:00405D80                 push    125h            ; Size
.text:00405D85                 push    edi             ; void *
.text:00405D86                 push    esi             ; int
.text:00405D87                 call    sub_403D30
.text:00405D8C
.text:00405D8C loc_405D8C:                             ; CODE XREF: SimConnect_WeatherCreateStation+7E↑j
.text:00405D8C                                         ; SimConnect_WeatherCreateStation+D8↓j ...
.text:00405D8C                 pop     edi
.text:00405D8D                 pop     esi
.text:00405D8E                 mov     eax, ebx
.text:00405D90                 pop     ebx
.text:00405D91                 mov     esp, ebp
.text:00405D93                 pop     ebp
.text:00405D94                 retn    1Ch
.text:00405D97 ; ---------------------------------------------------------------------------
.text:00405D97
.text:00405D97 loc_405D97:                             ; CODE XREF: SimConnect_WeatherCreateStation+67↑j
.text:00405D97                 mov     byte ptr [edi+14h], 0
.text:00405D9B
.text:00405D9B loc_405D9B:                             ; CODE XREF: SimConnect_WeatherCreateStation+7A↑j
.text:00405D9B                 mov     eax, [ebp+arg_C]
.text:00405D9E                 test    eax, eax
.text:00405DA0                 jz      short loc_405DB7
.text:00405DA2                 lea     edx, [edi+19h]
.text:00405DA5                 mov     ecx, 100h
.text:00405DAA                 call    sub_402580
.text:00405DAF                 mov     ebx, eax
.text:00405DB1                 test    ebx, ebx
.text:00405DB3                 jl      short loc_405D7C
.text:00405DB5                 jmp     short loc_405DBB
.text:00405DB7 ; ---------------------------------------------------------------------------
.text:00405DB7
.text:00405DB7 loc_405DB7:                             ; CODE XREF: SimConnect_WeatherCreateStation+A0↑j
.text:00405DB7                 mov     byte ptr [edi+19h], 0
.text:00405DBB
.text:00405DBB loc_405DBB:                             ; CODE XREF: SimConnect_WeatherCreateStation+B5↑j
.text:00405DBB                 test    esi, esi
.text:00405DBD                 fld     [ebp+arg_10]
.text:00405DC0                 fstp    dword ptr [edi+119h]
.text:00405DC6                 fld     [ebp+arg_14]
.text:00405DC9                 fstp    dword ptr [edi+11Dh]
.text:00405DCF                 fld     [ebp+arg_18]
.text:00405DD2                 fstp    dword ptr [edi+121h]
.text:00405DD8                 jz      short loc_405D8C
.text:00405DDA                 cmp     byte ptr [esi+1E0h], 0
.text:00405DE1                 jz      short loc_405D8C
.text:00405DE3                 call    sub_403E40
.text:00405DE8                 pop     edi
.text:00405DE9                 pop     esi
.text:00405DEA                 mov     eax, ebx
.text:00405DEC                 pop     ebx
.text:00405DED                 mov     esp, ebp
.text:00405DEF                 pop     ebp
.text:00405DF0                 retn    1Ch
.text:00405DF0 SimConnect_WeatherCreateStation endp
.text:00405DF0
.text:00405DF0 ; ---------------------------------------------------------------------------
.text:00405DF3                 align 10h
.text:00405E00 ; Exported entry  61. SimConnect_WeatherRemoveStation
.text:00405E00
.text:00405E00 ; =============== S U B R O U T I N E =======================================
.text:00405E00
.text:00405E00 ; Attributes: bp-based frame
.text:00405E00
.text:00405E00                 public SimConnect_WeatherRemoveStation
.text:00405E00 SimConnect_WeatherRemoveStation proc near
.text:00405E00                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405E00
.text:00405E00 var_4           = dword ptr -4
.text:00405E00 arg_0           = dword ptr  8
.text:00405E00 arg_4           = dword ptr  0Ch
.text:00405E00 arg_8           = dword ptr  10h
.text:00405E00
.text:00405E00                 mov     edi, edi
.text:00405E02                 push    ebp
.text:00405E03                 mov     ebp, esp
.text:00405E05                 push    ecx
.text:00405E06                 push    ebx
.text:00405E07                 mov     ebx, [ebp+arg_0]
.text:00405E0A                 push    esi
.text:00405E0B                 push    edi
.text:00405E0C                 lea     eax, [ebp+var_4]
.text:00405E0F                 push    eax
.text:00405E10                 mov     eax, 19h
.text:00405E15                 mov     ecx, ebx
.text:00405E17                 mov     [ebp+var_4], 0
.text:00405E1E                 mov     esi, 80004005h
.text:00405E23                 call    sub_403C30
.text:00405E28                 test    eax, eax
.text:00405E2A                 mov     edi, [ebp+var_4]
.text:00405E2D                 jnz     short loc_405E47
.text:00405E2F                 mov     dword ptr [edi], 19h
.text:00405E35                 mov     dword ptr [edi+8], 0F000001Dh
.text:00405E3C                 mov     dword ptr [edi+4], 4
.text:00405E43                 xor     esi, esi
.text:00405E45                 jmp     short loc_405E58
.text:00405E47 ; ---------------------------------------------------------------------------
.text:00405E47
.text:00405E47 loc_405E47:                             ; CODE XREF: SimConnect_WeatherRemoveStation+2D↑j
.text:00405E47                 cmp     eax, 2
.text:00405E4A                 jnz     short loc_405E58
.text:00405E4C                 test    ebx, ebx
.text:00405E4E                 jz      short loc_405E55
.text:00405E50                 mov     esi, [ebx+14h]
.text:00405E53                 jmp     short loc_405E58
.text:00405E55 ; ---------------------------------------------------------------------------
.text:00405E55
.text:00405E55 loc_405E55:                             ; CODE XREF: SimConnect_WeatherRemoveStation+4E↑j
.text:00405E55                 mov     esi, [ebp+arg_0]
.text:00405E58
.text:00405E58 loc_405E58:                             ; CODE XREF: SimConnect_WeatherRemoveStation+45↑j
.text:00405E58                                         ; SimConnect_WeatherRemoveStation+4A↑j ...
.text:00405E58                 test    esi, esi
.text:00405E5A                 mov     ebx, esi
.text:00405E5C                 jl      short loc_405E7E
.text:00405E5E                 mov     eax, [ebp+arg_8]
.text:00405E61                 test    eax, eax
.text:00405E63                 mov     ecx, [ebp+arg_4]
.text:00405E66                 mov     [edi+10h], ecx
.text:00405E69                 jz      short loc_405E99
.text:00405E6B                 lea     edx, [edi+14h]
.text:00405E6E                 mov     ecx, 5
.text:00405E73                 call    sub_402580
.text:00405E78                 mov     ebx, eax
.text:00405E7A                 test    ebx, ebx
.text:00405E7C                 jge     short loc_405E9D
.text:00405E7E
.text:00405E7E loc_405E7E:                             ; CODE XREF: SimConnect_WeatherRemoveStation+5C↑j
.text:00405E7E                 test    edi, edi
.text:00405E80                 jz      short loc_405E8E
.text:00405E82                 mov     edx, [ebp+arg_0]
.text:00405E85                 push    19h             ; Size
.text:00405E87                 push    edi             ; void *
.text:00405E88                 push    edx             ; int
.text:00405E89                 call    sub_403D30
.text:00405E8E
.text:00405E8E loc_405E8E:                             ; CODE XREF: SimConnect_WeatherRemoveStation+80↑j
.text:00405E8E                                         ; SimConnect_WeatherRemoveStation+A2↓j ...
.text:00405E8E                 pop     edi
.text:00405E8F                 pop     esi
.text:00405E90                 mov     eax, ebx
.text:00405E92                 pop     ebx
.text:00405E93                 mov     esp, ebp
.text:00405E95                 pop     ebp
.text:00405E96                 retn    0Ch
.text:00405E99 ; ---------------------------------------------------------------------------
.text:00405E99
.text:00405E99 loc_405E99:                             ; CODE XREF: SimConnect_WeatherRemoveStation+69↑j
.text:00405E99                 mov     byte ptr [edi+14h], 0
.text:00405E9D
.text:00405E9D loc_405E9D:                             ; CODE XREF: SimConnect_WeatherRemoveStation+7C↑j
.text:00405E9D                 mov     esi, [ebp+arg_0]
.text:00405EA0                 test    esi, esi
.text:00405EA2                 jz      short loc_405E8E
.text:00405EA4                 cmp     byte ptr [esi+1E0h], 0
.text:00405EAB                 jz      short loc_405E8E
.text:00405EAD                 call    sub_403E40
.text:00405EB2                 pop     edi
.text:00405EB3                 pop     esi
.text:00405EB4                 mov     eax, ebx
.text:00405EB6                 pop     ebx
.text:00405EB7                 mov     esp, ebp
.text:00405EB9                 pop     ebp
.text:00405EBA                 retn    0Ch
.text:00405EBA SimConnect_WeatherRemoveStation endp
.text:00405EBA
.text:00405EBA ; ---------------------------------------------------------------------------
.text:00405EBD                 db 13h dup(0CCh)
.text:00405ED0 ; Exported entry  72. SimConnect_WeatherSetObservation
.text:00405ED0
.text:00405ED0 ; =============== S U B R O U T I N E =======================================
.text:00405ED0
.text:00405ED0 ; Attributes: bp-based frame
.text:00405ED0
.text:00405ED0 ; int __stdcall SimConnect_WeatherSetObservation(int, int, void *Src)
.text:00405ED0                 public SimConnect_WeatherSetObservation
.text:00405ED0 SimConnect_WeatherSetObservation proc near
.text:00405ED0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405ED0
.text:00405ED0 var_C           = dword ptr -0Ch
.text:00405ED0 var_8           = dword ptr -8
.text:00405ED0 Size            = dword ptr -4
.text:00405ED0 arg_0           = dword ptr  8
.text:00405ED0 arg_4           = dword ptr  0Ch
.text:00405ED0 Src             = dword ptr  10h
.text:00405ED0
.text:00405ED0                 mov     edi, edi
.text:00405ED2                 push    ebp
.text:00405ED3                 mov     ebp, esp
.text:00405ED5                 sub     esp, 0Ch
.text:00405ED8                 mov     eax, [ebp+Src]
.text:00405EDB                 push    esi
.text:00405EDC                 xor     edx, edx
.text:00405EDE                 xor     esi, esi
.text:00405EE0                 test    eax, eax
.text:00405EE2                 push    edi
.text:00405EE3                 mov     [ebp+var_8], edx
.text:00405EE6                 jz      short loc_405F66
.text:00405EE8                 mov     ecx, 7D0h
.text:00405EED                 xor     edi, edi
.text:00405EEF                 nop
.text:00405EF0
.text:00405EF0 loc_405EF0:                             ; CODE XREF: SimConnect_WeatherSetObservation+2A↓j
.text:00405EF0                 cmp     [eax], dl
.text:00405EF2                 jz      short loc_405F03
.text:00405EF4                 add     eax, 1
.text:00405EF7                 sub     ecx, 1
.text:00405EFA                 jnz     short loc_405EF0
.text:00405EFC                 mov     edi, 80070057h
.text:00405F01                 jmp     short loc_405F15
.text:00405F03 ; ---------------------------------------------------------------------------
.text:00405F03
.text:00405F03 loc_405F03:                             ; CODE XREF: SimConnect_WeatherSetObservation+22↑j
.text:00405F03                 test    ecx, ecx
.text:00405F05                 jnz     short loc_405F0E
.text:00405F07                 mov     edi, 80070057h
.text:00405F0C                 jmp     short loc_405F15
.text:00405F0E ; ---------------------------------------------------------------------------
.text:00405F0E
.text:00405F0E loc_405F0E:                             ; CODE XREF: SimConnect_WeatherSetObservation+35↑j
.text:00405F0E                 mov     esi, 7D0h
.text:00405F13                 sub     esi, ecx
.text:00405F15
.text:00405F15 loc_405F15:                             ; CODE XREF: SimConnect_WeatherSetObservation+31↑j
.text:00405F15                                         ; SimConnect_WeatherSetObservation+3C↑j
.text:00405F15                 test    edi, edi
.text:00405F17                 mov     eax, edi
.text:00405F19                 jl      short loc_405F20
.text:00405F1B                 mov     [ebp+Size], esi
.text:00405F1E                 mov     edx, esi
.text:00405F20
.text:00405F20 loc_405F20:                             ; CODE XREF: SimConnect_WeatherSetObservation+49↑j
.text:00405F20                                         ; SimConnect_WeatherSetObservation+9B↓j
.text:00405F20                 test    eax, eax
.text:00405F22                 jl      loc_405FCB
.text:00405F28                 mov     esi, [ebp+arg_0]
.text:00405F2B                 push    ebx
.text:00405F2C                 add     edx, 1
.text:00405F2F                 lea     ecx, [ebp+var_8]
.text:00405F32                 lea     eax, [edx+14h]
.text:00405F35                 push    ecx
.text:00405F36                 mov     ecx, esi
.text:00405F38                 mov     [ebp+Size], edx
.text:00405F3B                 mov     [ebp+var_C], eax
.text:00405F3E                 mov     ebx, 80004005h
.text:00405F43                 call    sub_403C30
.text:00405F48                 test    eax, eax
.text:00405F4A                 mov     edi, [ebp+var_8]
.text:00405F4D                 jnz     short loc_405F6D
.text:00405F4F                 mov     edx, [ebp+var_C]
.text:00405F52                 mov     [edi], edx
.text:00405F54                 mov     dword ptr [edi+8], 0F000001Eh
.text:00405F5B                 mov     dword ptr [edi+4], 4
.text:00405F62                 xor     ebx, ebx
.text:00405F64                 jmp     short loc_405F7E
.text:00405F66 ; ---------------------------------------------------------------------------
.text:00405F66
.text:00405F66 loc_405F66:                             ; CODE XREF: SimConnect_WeatherSetObservation+16↑j
.text:00405F66                 mov     eax, 80070057h
.text:00405F6B                 jmp     short loc_405F20
.text:00405F6D ; ---------------------------------------------------------------------------
.text:00405F6D
.text:00405F6D loc_405F6D:                             ; CODE XREF: SimConnect_WeatherSetObservation+7D↑j
.text:00405F6D                 cmp     eax, 2
.text:00405F70                 jnz     short loc_405F7E
.text:00405F72                 test    esi, esi
.text:00405F74                 jz      short loc_405F7B
.text:00405F76                 mov     ebx, [esi+14h]
.text:00405F79                 jmp     short loc_405F7E
.text:00405F7B ; ---------------------------------------------------------------------------
.text:00405F7B
.text:00405F7B loc_405F7B:                             ; CODE XREF: SimConnect_WeatherSetObservation+A4↑j
.text:00405F7B                 mov     ebx, [ebp+Src]
.text:00405F7E
.text:00405F7E loc_405F7E:                             ; CODE XREF: SimConnect_WeatherSetObservation+94↑j
.text:00405F7E                                         ; SimConnect_WeatherSetObservation+A0↑j ...
.text:00405F7E                 test    ebx, ebx
.text:00405F80                 jl      short loc_405FB9
.text:00405F82                 mov     eax, [ebp+Size]
.text:00405F85                 mov     ecx, [ebp+Src]
.text:00405F88                 push    eax             ; Size
.text:00405F89                 push    ecx             ; Src
.text:00405F8A                 lea     edx, [edi+14h]
.text:00405F8D                 push    edx             ; void *
.text:00405F8E                 call    memcpy
.text:00405F93                 mov     eax, [ebp+arg_4]
.text:00405F96                 add     esp, 0Ch
.text:00405F99                 test    esi, esi
.text:00405F9B                 mov     [edi+10h], eax
.text:00405F9E                 jz      short loc_405FC8
.text:00405FA0                 cmp     byte ptr [esi+1E0h], 0
.text:00405FA7                 jz      short loc_405FC8
.text:00405FA9                 call    sub_403E40
.text:00405FAE                 mov     eax, ebx
.text:00405FB0                 pop     ebx
.text:00405FB1                 pop     edi
.text:00405FB2                 pop     esi
.text:00405FB3                 mov     esp, ebp
.text:00405FB5                 pop     ebp
.text:00405FB6                 retn    0Ch
.text:00405FB9 ; ---------------------------------------------------------------------------
.text:00405FB9
.text:00405FB9 loc_405FB9:                             ; CODE XREF: SimConnect_WeatherSetObservation+B0↑j
.text:00405FB9                 test    edi, edi
.text:00405FBB                 jz      short loc_405FC8
.text:00405FBD                 mov     ecx, [ebp+var_C]
.text:00405FC0                 push    ecx             ; Size
.text:00405FC1                 push    edi             ; void *
.text:00405FC2                 push    esi             ; int
.text:00405FC3                 call    sub_403D30
.text:00405FC8
.text:00405FC8 loc_405FC8:                             ; CODE XREF: SimConnect_WeatherSetObservation+CE↑j
.text:00405FC8                                         ; SimConnect_WeatherSetObservation+D7↑j ...
.text:00405FC8                 mov     eax, ebx
.text:00405FCA                 pop     ebx
.text:00405FCB
.text:00405FCB loc_405FCB:                             ; CODE XREF: SimConnect_WeatherSetObservation+52↑j
.text:00405FCB                 pop     edi
.text:00405FCC                 pop     esi
.text:00405FCD                 mov     esp, ebp
.text:00405FCF                 pop     ebp
.text:00405FD0                 retn    0Ch
.text:00405FD0 SimConnect_WeatherSetObservation endp
.text:00405FD0
.text:00405FD0 ; ---------------------------------------------------------------------------
.text:00405FD3                 align 10h
.text:00405FE0 ; Exported entry  70. SimConnect_WeatherSetModeServer
.text:00405FE0
.text:00405FE0 ; =============== S U B R O U T I N E =======================================
.text:00405FE0
.text:00405FE0 ; Attributes: bp-based frame
.text:00405FE0
.text:00405FE0                 public SimConnect_WeatherSetModeServer
.text:00405FE0 SimConnect_WeatherSetModeServer proc near
.text:00405FE0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00405FE0
.text:00405FE0 var_4           = dword ptr -4
.text:00405FE0 arg_0           = dword ptr  8
.text:00405FE0 arg_4           = dword ptr  0Ch
.text:00405FE0 arg_8           = dword ptr  10h
.text:00405FE0
.text:00405FE0                 mov     edi, edi
.text:00405FE2                 push    ebp
.text:00405FE3                 mov     ebp, esp
.text:00405FE5                 push    ecx
.text:00405FE6                 push    esi
.text:00405FE7                 mov     esi, [ebp+arg_0]
.text:00405FEA                 push    edi
.text:00405FEB                 lea     eax, [ebp+var_4]
.text:00405FEE                 push    eax
.text:00405FEF                 mov     eax, 18h
.text:00405FF4                 mov     ecx, esi
.text:00405FF6                 mov     [ebp+var_4], 0
.text:00405FFD                 mov     edi, 80004005h
.text:00406002                 call    sub_403C30
.text:00406007                 test    eax, eax
.text:00406009                 mov     ecx, [ebp+var_4]
.text:0040600C                 jnz     short loc_406026
.text:0040600E                 mov     dword ptr [ecx], 18h
.text:00406014                 mov     dword ptr [ecx+8], 0F000001Fh
.text:0040601B                 mov     dword ptr [ecx+4], 4
.text:00406022                 xor     edi, edi
.text:00406024                 jmp     short loc_40603B
.text:00406026 ; ---------------------------------------------------------------------------
.text:00406026
.text:00406026 loc_406026:                             ; CODE XREF: SimConnect_WeatherSetModeServer+2C↑j
.text:00406026                 cmp     eax, 2
.text:00406029                 jnz     short loc_406063
.text:0040602B                 test    esi, esi
.text:0040602D                 jz      short loc_406034
.text:0040602F                 mov     edi, [esi+14h]
.text:00406032                 jmp     short loc_406037
.text:00406034 ; ---------------------------------------------------------------------------
.text:00406034
.text:00406034 loc_406034:                             ; CODE XREF: SimConnect_WeatherSetModeServer+4D↑j
.text:00406034                 mov     edi, [ebp+arg_0]
.text:00406037
.text:00406037 loc_406037:                             ; CODE XREF: SimConnect_WeatherSetModeServer+52↑j
.text:00406037                 test    edi, edi
.text:00406039                 jl      short loc_406063
.text:0040603B
.text:0040603B loc_40603B:                             ; CODE XREF: SimConnect_WeatherSetModeServer+44↑j
.text:0040603B                 test    esi, esi
.text:0040603D                 mov     edx, [ebp+arg_4]
.text:00406040                 mov     eax, [ebp+arg_8]
.text:00406043                 mov     [ecx+10h], edx
.text:00406046                 mov     [ecx+14h], eax
.text:00406049                 jz      short loc_406073
.text:0040604B                 cmp     byte ptr [esi+1E0h], 0
.text:00406052                 jz      short loc_406073
.text:00406054                 call    sub_403E40
.text:00406059                 mov     eax, edi
.text:0040605B                 pop     edi
.text:0040605C                 pop     esi
.text:0040605D                 mov     esp, ebp
.text:0040605F                 pop     ebp
.text:00406060                 retn    0Ch
.text:00406063 ; ---------------------------------------------------------------------------
.text:00406063
.text:00406063 loc_406063:                             ; CODE XREF: SimConnect_WeatherSetModeServer+49↑j
.text:00406063                                         ; SimConnect_WeatherSetModeServer+59↑j
.text:00406063                 mov     eax, [ebp+var_4]
.text:00406066                 test    eax, eax
.text:00406068                 jz      short loc_406073
.text:0040606A                 push    18h             ; Size
.text:0040606C                 push    eax             ; void *
.text:0040606D                 push    esi             ; int
.text:0040606E                 call    sub_403D30
.text:00406073
.text:00406073 loc_406073:                             ; CODE XREF: SimConnect_WeatherSetModeServer+69↑j
.text:00406073                                         ; SimConnect_WeatherSetModeServer+72↑j ...
.text:00406073                 mov     eax, edi
.text:00406075                 pop     edi
.text:00406076                 pop     esi
.text:00406077                 mov     esp, ebp
.text:00406079                 pop     ebp
.text:0040607A                 retn    0Ch
.text:0040607A SimConnect_WeatherSetModeServer endp
.text:0040607A
.text:0040607A ; ---------------------------------------------------------------------------
.text:0040607D                 db 13h dup(0CCh)
.text:00406090 ; Exported entry  71. SimConnect_WeatherSetModeTheme
.text:00406090
.text:00406090 ; =============== S U B R O U T I N E =======================================
.text:00406090
.text:00406090 ; Attributes: bp-based frame
.text:00406090
.text:00406090                 public SimConnect_WeatherSetModeTheme
.text:00406090 SimConnect_WeatherSetModeTheme proc near
.text:00406090                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406090
.text:00406090 var_4           = dword ptr -4
.text:00406090 arg_0           = dword ptr  8
.text:00406090 arg_4           = dword ptr  0Ch
.text:00406090
.text:00406090                 mov     edi, edi
.text:00406092                 push    ebp
.text:00406093                 mov     ebp, esp
.text:00406095                 push    ecx
.text:00406096                 push    ebx
.text:00406097                 mov     ebx, [ebp+arg_0]
.text:0040609A                 push    esi
.text:0040609B                 push    edi
.text:0040609C                 lea     eax, [ebp+var_4]
.text:0040609F                 push    eax
.text:004060A0                 mov     eax, 110h
.text:004060A5                 mov     ecx, ebx
.text:004060A7                 mov     [ebp+var_4], 0
.text:004060AE                 mov     edi, 80004005h
.text:004060B3                 call    sub_403C30
.text:004060B8                 test    eax, eax
.text:004060BA                 mov     esi, [ebp+var_4]
.text:004060BD                 jnz     short loc_4060D7
.text:004060BF                 mov     dword ptr [esi], 110h
.text:004060C5                 mov     dword ptr [esi+8], 0F0000020h
.text:004060CC                 mov     dword ptr [esi+4], 4
.text:004060D3                 xor     edi, edi
.text:004060D5                 jmp     short loc_4060E8
.text:004060D7 ; ---------------------------------------------------------------------------
.text:004060D7
.text:004060D7 loc_4060D7:                             ; CODE XREF: SimConnect_WeatherSetModeTheme+2D↑j
.text:004060D7                 cmp     eax, 2
.text:004060DA                 jnz     short loc_4060E8
.text:004060DC                 test    ebx, ebx
.text:004060DE                 jz      short loc_4060E5
.text:004060E0                 mov     edi, [ebx+14h]
.text:004060E3                 jmp     short loc_4060E8
.text:004060E5 ; ---------------------------------------------------------------------------
.text:004060E5
.text:004060E5 loc_4060E5:                             ; CODE XREF: SimConnect_WeatherSetModeTheme+4E↑j
.text:004060E5                 mov     edi, [ebp+arg_0]
.text:004060E8
.text:004060E8 loc_4060E8:                             ; CODE XREF: SimConnect_WeatherSetModeTheme+45↑j
.text:004060E8                                         ; SimConnect_WeatherSetModeTheme+4A↑j ...
.text:004060E8                 test    edi, edi
.text:004060EA                 jl      short loc_406106
.text:004060EC                 mov     eax, [ebp+arg_4]
.text:004060EF                 test    eax, eax
.text:004060F1                 jz      short loc_406121
.text:004060F3                 lea     edx, [esi+10h]
.text:004060F6                 mov     ecx, 100h
.text:004060FB                 call    sub_402580
.text:00406100                 mov     edi, eax
.text:00406102                 test    edi, edi
.text:00406104                 jge     short loc_406125
.text:00406106
.text:00406106 loc_406106:                             ; CODE XREF: SimConnect_WeatherSetModeTheme+5A↑j
.text:00406106                 test    esi, esi
.text:00406108                 jz      short loc_406116
.text:0040610A                 push    110h            ; Size
.text:0040610F                 push    esi             ; void *
.text:00406110                 push    ebx             ; int
.text:00406111                 call    sub_403D30
.text:00406116
.text:00406116 loc_406116:                             ; CODE XREF: SimConnect_WeatherSetModeTheme+78↑j
.text:00406116                                         ; SimConnect_WeatherSetModeTheme+97↓j ...
.text:00406116                 mov     eax, edi
.text:00406118                 pop     edi
.text:00406119                 pop     esi
.text:0040611A                 pop     ebx
.text:0040611B                 mov     esp, ebp
.text:0040611D                 pop     ebp
.text:0040611E                 retn    8
.text:00406121 ; ---------------------------------------------------------------------------
.text:00406121
.text:00406121 loc_406121:                             ; CODE XREF: SimConnect_WeatherSetModeTheme+61↑j
.text:00406121                 mov     byte ptr [esi+10h], 0
.text:00406125
.text:00406125 loc_406125:                             ; CODE XREF: SimConnect_WeatherSetModeTheme+74↑j
.text:00406125                 test    ebx, ebx
.text:00406127                 jz      short loc_406116
.text:00406129                 cmp     byte ptr [ebx+1E0h], 0
.text:00406130                 jz      short loc_406116
.text:00406132                 mov     esi, ebx
.text:00406134                 call    sub_403E40
.text:00406139                 mov     eax, edi
.text:0040613B                 pop     edi
.text:0040613C                 pop     esi
.text:0040613D                 pop     ebx
.text:0040613E                 mov     esp, ebp
.text:00406140                 pop     ebp
.text:00406141                 retn    8
.text:00406141 SimConnect_WeatherSetModeTheme endp
.text:00406141
.text:00406141 ; ---------------------------------------------------------------------------
.text:00406144                 align 10h
.text:00406150 ; Exported entry  69. SimConnect_WeatherSetModeGlobal
.text:00406150
.text:00406150 ; =============== S U B R O U T I N E =======================================
.text:00406150
.text:00406150 ; Attributes: bp-based frame
.text:00406150
.text:00406150                 public SimConnect_WeatherSetModeGlobal
.text:00406150 SimConnect_WeatherSetModeGlobal proc near
.text:00406150                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406150
.text:00406150 var_4           = dword ptr -4
.text:00406150 arg_0           = dword ptr  8
.text:00406150
.text:00406150                 mov     edi, edi
.text:00406152                 push    ebp
.text:00406153                 mov     ebp, esp
.text:00406155                 push    ecx
.text:00406156                 push    esi
.text:00406157                 mov     esi, [ebp+arg_0]
.text:0040615A                 push    edi
.text:0040615B                 lea     eax, [ebp+var_4]
.text:0040615E                 push    eax
.text:0040615F                 mov     eax, 10h
.text:00406164                 mov     ecx, esi
.text:00406166                 mov     [ebp+var_4], 0
.text:0040616D                 mov     edi, 80004005h
.text:00406172                 call    sub_403C30
.text:00406177                 test    eax, eax
.text:00406179                 jnz     short loc_406196
.text:0040617B                 mov     eax, [ebp+var_4]
.text:0040617E                 mov     dword ptr [eax], 10h
.text:00406184                 mov     dword ptr [eax+8], 0F0000021h
.text:0040618B                 mov     dword ptr [eax+4], 4
.text:00406192                 xor     edi, edi
.text:00406194                 jmp     short loc_4061AB
.text:00406196 ; ---------------------------------------------------------------------------
.text:00406196
.text:00406196 loc_406196:                             ; CODE XREF: SimConnect_WeatherSetModeGlobal+29↑j
.text:00406196                 cmp     eax, 2
.text:00406199                 jnz     short loc_4061C7
.text:0040619B                 test    esi, esi
.text:0040619D                 jz      short loc_4061A4
.text:0040619F                 mov     edi, [esi+14h]
.text:004061A2                 jmp     short loc_4061A7
.text:004061A4 ; ---------------------------------------------------------------------------
.text:004061A4
.text:004061A4 loc_4061A4:                             ; CODE XREF: SimConnect_WeatherSetModeGlobal+4D↑j
.text:004061A4                 mov     edi, [ebp+arg_0]
.text:004061A7
.text:004061A7 loc_4061A7:                             ; CODE XREF: SimConnect_WeatherSetModeGlobal+52↑j
.text:004061A7                 test    edi, edi
.text:004061A9                 jl      short loc_4061C7
.text:004061AB
.text:004061AB loc_4061AB:                             ; CODE XREF: SimConnect_WeatherSetModeGlobal+44↑j
.text:004061AB                 test    esi, esi
.text:004061AD                 jz      short loc_4061D7
.text:004061AF                 cmp     byte ptr [esi+1E0h], 0
.text:004061B6                 jz      short loc_4061D7
.text:004061B8                 call    sub_403E40
.text:004061BD                 mov     eax, edi
.text:004061BF                 pop     edi
.text:004061C0                 pop     esi
.text:004061C1                 mov     esp, ebp
.text:004061C3                 pop     ebp
.text:004061C4                 retn    4
.text:004061C7 ; ---------------------------------------------------------------------------
.text:004061C7
.text:004061C7 loc_4061C7:                             ; CODE XREF: SimConnect_WeatherSetModeGlobal+49↑j
.text:004061C7                                         ; SimConnect_WeatherSetModeGlobal+59↑j
.text:004061C7                 mov     eax, [ebp+var_4]
.text:004061CA                 test    eax, eax
.text:004061CC                 jz      short loc_4061D7
.text:004061CE                 push    10h             ; Size
.text:004061D0                 push    eax             ; void *
.text:004061D1                 push    esi             ; int
.text:004061D2                 call    sub_403D30
.text:004061D7
.text:004061D7 loc_4061D7:                             ; CODE XREF: SimConnect_WeatherSetModeGlobal+5D↑j
.text:004061D7                                         ; SimConnect_WeatherSetModeGlobal+66↑j ...
.text:004061D7                 mov     eax, edi
.text:004061D9                 pop     edi
.text:004061DA                 pop     esi
.text:004061DB                 mov     esp, ebp
.text:004061DD                 pop     ebp
.text:004061DE                 retn    4
.text:004061DE SimConnect_WeatherSetModeGlobal endp
.text:004061DE
.text:004061DE ; ---------------------------------------------------------------------------
.text:004061E1                 align 10h
.text:004061F0 ; Exported entry  68. SimConnect_WeatherSetModeCustom
.text:004061F0
.text:004061F0 ; =============== S U B R O U T I N E =======================================
.text:004061F0
.text:004061F0 ; Attributes: bp-based frame
.text:004061F0
.text:004061F0                 public SimConnect_WeatherSetModeCustom
.text:004061F0 SimConnect_WeatherSetModeCustom proc near
.text:004061F0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004061F0
.text:004061F0 var_4           = dword ptr -4
.text:004061F0 arg_0           = dword ptr  8
.text:004061F0
.text:004061F0                 mov     edi, edi
.text:004061F2                 push    ebp
.text:004061F3                 mov     ebp, esp
.text:004061F5                 push    ecx
.text:004061F6                 push    esi
.text:004061F7                 mov     esi, [ebp+arg_0]
.text:004061FA                 push    edi
.text:004061FB                 lea     eax, [ebp+var_4]
.text:004061FE                 push    eax
.text:004061FF                 mov     eax, 10h
.text:00406204                 mov     ecx, esi
.text:00406206                 mov     [ebp+var_4], 0
.text:0040620D                 mov     edi, 80004005h
.text:00406212                 call    sub_403C30
.text:00406217                 test    eax, eax
.text:00406219                 jnz     short loc_406236
.text:0040621B                 mov     eax, [ebp+var_4]
.text:0040621E                 mov     dword ptr [eax], 10h
.text:00406224                 mov     dword ptr [eax+8], 0F0000022h
.text:0040622B                 mov     dword ptr [eax+4], 4
.text:00406232                 xor     edi, edi
.text:00406234                 jmp     short loc_40624B
.text:00406236 ; ---------------------------------------------------------------------------
.text:00406236
.text:00406236 loc_406236:                             ; CODE XREF: SimConnect_WeatherSetModeCustom+29↑j
.text:00406236                 cmp     eax, 2
.text:00406239                 jnz     short loc_406267
.text:0040623B                 test    esi, esi
.text:0040623D                 jz      short loc_406244
.text:0040623F                 mov     edi, [esi+14h]
.text:00406242                 jmp     short loc_406247
.text:00406244 ; ---------------------------------------------------------------------------
.text:00406244
.text:00406244 loc_406244:                             ; CODE XREF: SimConnect_WeatherSetModeCustom+4D↑j
.text:00406244                 mov     edi, [ebp+arg_0]
.text:00406247
.text:00406247 loc_406247:                             ; CODE XREF: SimConnect_WeatherSetModeCustom+52↑j
.text:00406247                 test    edi, edi
.text:00406249                 jl      short loc_406267
.text:0040624B
.text:0040624B loc_40624B:                             ; CODE XREF: SimConnect_WeatherSetModeCustom+44↑j
.text:0040624B                 test    esi, esi
.text:0040624D                 jz      short loc_406277
.text:0040624F                 cmp     byte ptr [esi+1E0h], 0
.text:00406256                 jz      short loc_406277
.text:00406258                 call    sub_403E40
.text:0040625D                 mov     eax, edi
.text:0040625F                 pop     edi
.text:00406260                 pop     esi
.text:00406261                 mov     esp, ebp
.text:00406263                 pop     ebp
.text:00406264                 retn    4
.text:00406267 ; ---------------------------------------------------------------------------
.text:00406267
.text:00406267 loc_406267:                             ; CODE XREF: SimConnect_WeatherSetModeCustom+49↑j
.text:00406267                                         ; SimConnect_WeatherSetModeCustom+59↑j
.text:00406267                 mov     eax, [ebp+var_4]
.text:0040626A                 test    eax, eax
.text:0040626C                 jz      short loc_406277
.text:0040626E                 push    10h             ; Size
.text:00406270                 push    eax             ; void *
.text:00406271                 push    esi             ; int
.text:00406272                 call    sub_403D30
.text:00406277
.text:00406277 loc_406277:                             ; CODE XREF: SimConnect_WeatherSetModeCustom+5D↑j
.text:00406277                                         ; SimConnect_WeatherSetModeCustom+66↑j ...
.text:00406277                 mov     eax, edi
.text:00406279                 pop     edi
.text:0040627A                 pop     esi
.text:0040627B                 mov     esp, ebp
.text:0040627D                 pop     ebp
.text:0040627E                 retn    4
.text:0040627E SimConnect_WeatherSetModeCustom endp
.text:0040627E
.text:0040627E ; ---------------------------------------------------------------------------
.text:00406281                 align 10h
.text:00406290 ; Exported entry  67. SimConnect_WeatherSetDynamicUpdateRate
.text:00406290
.text:00406290 ; =============== S U B R O U T I N E =======================================
.text:00406290
.text:00406290 ; Attributes: bp-based frame
.text:00406290
.text:00406290                 public SimConnect_WeatherSetDynamicUpdateRate
.text:00406290 SimConnect_WeatherSetDynamicUpdateRate proc near
.text:00406290                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406290
.text:00406290 var_4           = dword ptr -4
.text:00406290 arg_0           = dword ptr  8
.text:00406290 arg_4           = dword ptr  0Ch
.text:00406290
.text:00406290                 mov     edi, edi
.text:00406292                 push    ebp
.text:00406293                 mov     ebp, esp
.text:00406295                 push    ecx
.text:00406296                 push    esi
.text:00406297                 mov     esi, [ebp+arg_0]
.text:0040629A                 push    edi
.text:0040629B                 lea     eax, [ebp+var_4]
.text:0040629E                 push    eax
.text:0040629F                 mov     eax, 14h
.text:004062A4                 mov     ecx, esi
.text:004062A6                 mov     [ebp+var_4], 0
.text:004062AD                 mov     edi, 80004005h
.text:004062B2                 call    sub_403C30
.text:004062B7                 test    eax, eax
.text:004062B9                 mov     ecx, [ebp+var_4]
.text:004062BC                 jnz     short loc_4062D6
.text:004062BE                 mov     dword ptr [ecx], 14h
.text:004062C4                 mov     dword ptr [ecx+8], 0F0000023h
.text:004062CB                 mov     dword ptr [ecx+4], 4
.text:004062D2                 xor     edi, edi
.text:004062D4                 jmp     short loc_4062EB
.text:004062D6 ; ---------------------------------------------------------------------------
.text:004062D6
.text:004062D6 loc_4062D6:                             ; CODE XREF: SimConnect_WeatherSetDynamicUpdateRate+2C↑j
.text:004062D6                 cmp     eax, 2
.text:004062D9                 jnz     short loc_40630D
.text:004062DB                 test    esi, esi
.text:004062DD                 jz      short loc_4062E4
.text:004062DF                 mov     edi, [esi+14h]
.text:004062E2                 jmp     short loc_4062E7
.text:004062E4 ; ---------------------------------------------------------------------------
.text:004062E4
.text:004062E4 loc_4062E4:                             ; CODE XREF: SimConnect_WeatherSetDynamicUpdateRate+4D↑j
.text:004062E4                 mov     edi, [ebp+arg_0]
.text:004062E7
.text:004062E7 loc_4062E7:                             ; CODE XREF: SimConnect_WeatherSetDynamicUpdateRate+52↑j
.text:004062E7                 test    edi, edi
.text:004062E9                 jl      short loc_40630D
.text:004062EB
.text:004062EB loc_4062EB:                             ; CODE XREF: SimConnect_WeatherSetDynamicUpdateRate+44↑j
.text:004062EB                 test    esi, esi
.text:004062ED                 mov     edx, [ebp+arg_4]
.text:004062F0                 mov     [ecx+10h], edx
.text:004062F3                 jz      short loc_40631D
.text:004062F5                 cmp     byte ptr [esi+1E0h], 0
.text:004062FC                 jz      short loc_40631D
.text:004062FE                 call    sub_403E40
.text:00406303                 mov     eax, edi
.text:00406305                 pop     edi
.text:00406306                 pop     esi
.text:00406307                 mov     esp, ebp
.text:00406309                 pop     ebp
.text:0040630A                 retn    8
.text:0040630D ; ---------------------------------------------------------------------------
.text:0040630D
.text:0040630D loc_40630D:                             ; CODE XREF: SimConnect_WeatherSetDynamicUpdateRate+49↑j
.text:0040630D                                         ; SimConnect_WeatherSetDynamicUpdateRate+59↑j
.text:0040630D                 mov     eax, [ebp+var_4]
.text:00406310                 test    eax, eax
.text:00406312                 jz      short loc_40631D
.text:00406314                 push    14h             ; Size
.text:00406316                 push    eax             ; void *
.text:00406317                 push    esi             ; int
.text:00406318                 call    sub_403D30
.text:0040631D
.text:0040631D loc_40631D:                             ; CODE XREF: SimConnect_WeatherSetDynamicUpdateRate+63↑j
.text:0040631D                                         ; SimConnect_WeatherSetDynamicUpdateRate+6C↑j ...
.text:0040631D                 mov     eax, edi
.text:0040631F                 pop     edi
.text:00406320                 pop     esi
.text:00406321                 mov     esp, ebp
.text:00406323                 pop     ebp
.text:00406324                 retn    8
.text:00406324 SimConnect_WeatherSetDynamicUpdateRate endp
.text:00406324
.text:00406324 ; ---------------------------------------------------------------------------
.text:00406327                 align 10h
.text:00406330 ; Exported entry  63. SimConnect_WeatherRequestCloudState
.text:00406330
.text:00406330 ; =============== S U B R O U T I N E =======================================
.text:00406330
.text:00406330 ; Attributes: bp-based frame
.text:00406330
.text:00406330 ; int __stdcall SimConnect_WeatherRequestCloudState(int, int, float, float, float, float, float, float, int)
.text:00406330                 public SimConnect_WeatherRequestCloudState
.text:00406330 SimConnect_WeatherRequestCloudState proc near
.text:00406330                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406330
.text:00406330 var_4           = dword ptr -4
.text:00406330 arg_0           = dword ptr  8
.text:00406330 arg_4           = dword ptr  0Ch
.text:00406330 arg_8           = dword ptr  10h
.text:00406330 arg_C           = dword ptr  14h
.text:00406330 arg_10          = dword ptr  18h
.text:00406330 arg_14          = dword ptr  1Ch
.text:00406330 arg_18          = dword ptr  20h
.text:00406330 arg_1C          = dword ptr  24h
.text:00406330 arg_20          = dword ptr  28h
.text:00406330
.text:00406330                 mov     edi, edi
.text:00406332                 push    ebp
.text:00406333                 mov     ebp, esp
.text:00406335                 push    ecx
.text:00406336                 push    esi
.text:00406337                 mov     esi, [ebp+arg_0]
.text:0040633A                 push    edi
.text:0040633B                 lea     eax, [ebp+var_4]
.text:0040633E                 push    eax
.text:0040633F                 mov     eax, 30h ; '0'
.text:00406344                 mov     ecx, esi
.text:00406346                 mov     [ebp+var_4], 0
.text:0040634D                 mov     edi, 80004005h
.text:00406352                 call    sub_403C30
.text:00406357                 test    eax, eax
.text:00406359                 mov     ecx, [ebp+var_4]
.text:0040635C                 jnz     short loc_406376
.text:0040635E                 mov     dword ptr [ecx], 30h ; '0'
.text:00406364                 mov     dword ptr [ecx+8], 0F0000024h
.text:0040636B                 mov     dword ptr [ecx+4], 4
.text:00406372                 xor     edi, edi
.text:00406374                 jmp     short loc_40638B
.text:00406376 ; ---------------------------------------------------------------------------
.text:00406376
.text:00406376 loc_406376:                             ; CODE XREF: SimConnect_WeatherRequestCloudState+2C↑j
.text:00406376                 cmp     eax, 2
.text:00406379                 jnz     short loc_4063D7
.text:0040637B                 test    esi, esi
.text:0040637D                 jz      short loc_406384
.text:0040637F                 mov     edi, [esi+14h]
.text:00406382                 jmp     short loc_406387
.text:00406384 ; ---------------------------------------------------------------------------
.text:00406384
.text:00406384 loc_406384:                             ; CODE XREF: SimConnect_WeatherRequestCloudState+4D↑j
.text:00406384                 mov     edi, [ebp+arg_0]
.text:00406387
.text:00406387 loc_406387:                             ; CODE XREF: SimConnect_WeatherRequestCloudState+52↑j
.text:00406387                 test    edi, edi
.text:00406389                 jl      short loc_4063D7
.text:0040638B
.text:0040638B loc_40638B:                             ; CODE XREF: SimConnect_WeatherRequestCloudState+44↑j
.text:0040638B                 test    esi, esi
.text:0040638D                 fld     [ebp+arg_8]
.text:00406390                 mov     edx, [ebp+arg_4]
.text:00406393                 mov     eax, [ebp+arg_20]
.text:00406396                 mov     [ecx+10h], edx
.text:00406399                 fstp    dword ptr [ecx+14h]
.text:0040639C                 fld     [ebp+arg_C]
.text:0040639F                 fstp    dword ptr [ecx+18h]
.text:004063A2                 fld     [ebp+arg_10]
.text:004063A5                 fstp    dword ptr [ecx+1Ch]
.text:004063A8                 fld     [ebp+arg_14]
.text:004063AB                 fstp    dword ptr [ecx+20h]
.text:004063AE                 fld     [ebp+arg_18]
.text:004063B1                 fstp    dword ptr [ecx+24h]
.text:004063B4                 fld     [ebp+arg_1C]
.text:004063B7                 fstp    dword ptr [ecx+28h]
.text:004063BA                 mov     [ecx+2Ch], eax
.text:004063BD                 jz      short loc_4063E7
.text:004063BF                 cmp     byte ptr [esi+1E0h], 0
.text:004063C6                 jz      short loc_4063E7
.text:004063C8                 call    sub_403E40
.text:004063CD                 mov     eax, edi
.text:004063CF                 pop     edi
.text:004063D0                 pop     esi
.text:004063D1                 mov     esp, ebp
.text:004063D3                 pop     ebp
.text:004063D4                 retn    24h ; '$'
.text:004063D7 ; ---------------------------------------------------------------------------
.text:004063D7
.text:004063D7 loc_4063D7:                             ; CODE XREF: SimConnect_WeatherRequestCloudState+49↑j
.text:004063D7                                         ; SimConnect_WeatherRequestCloudState+59↑j
.text:004063D7                 mov     eax, [ebp+var_4]
.text:004063DA                 test    eax, eax
.text:004063DC                 jz      short loc_4063E7
.text:004063DE                 push    30h ; '0'       ; Size
.text:004063E0                 push    eax             ; void *
.text:004063E1                 push    esi             ; int
.text:004063E2                 call    sub_403D30
.text:004063E7
.text:004063E7 loc_4063E7:                             ; CODE XREF: SimConnect_WeatherRequestCloudState+8D↑j
.text:004063E7                                         ; SimConnect_WeatherRequestCloudState+96↑j ...
.text:004063E7                 mov     eax, edi
.text:004063E9                 pop     edi
.text:004063EA                 pop     esi
.text:004063EB                 mov     esp, ebp
.text:004063ED                 pop     ebp
.text:004063EE                 retn    24h ; '$'
.text:004063EE SimConnect_WeatherRequestCloudState endp
.text:004063EE
.text:004063EE ; ---------------------------------------------------------------------------
.text:004063F1                 align 10h
.text:00406400 ; Exported entry  60. SimConnect_WeatherCreateThermal
.text:00406400
.text:00406400 ; =============== S U B R O U T I N E =======================================
.text:00406400
.text:00406400 ; Attributes: bp-based frame
.text:00406400
.text:00406400 ; int __stdcall SimConnect_WeatherCreateThermal(int, int, float, float, float, float, float, float, float, float, float, float, float, float, float)
.text:00406400                 public SimConnect_WeatherCreateThermal
.text:00406400 SimConnect_WeatherCreateThermal proc near
.text:00406400                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406400
.text:00406400 var_4           = dword ptr -4
.text:00406400 arg_0           = dword ptr  8
.text:00406400 arg_4           = dword ptr  0Ch
.text:00406400 arg_8           = dword ptr  10h
.text:00406400 arg_C           = dword ptr  14h
.text:00406400 arg_10          = dword ptr  18h
.text:00406400 arg_14          = dword ptr  1Ch
.text:00406400 arg_18          = dword ptr  20h
.text:00406400 arg_1C          = dword ptr  24h
.text:00406400 arg_20          = dword ptr  28h
.text:00406400 arg_24          = dword ptr  2Ch
.text:00406400 arg_28          = dword ptr  30h
.text:00406400 arg_2C          = dword ptr  34h
.text:00406400 arg_30          = dword ptr  38h
.text:00406400 arg_34          = dword ptr  3Ch
.text:00406400 arg_38          = dword ptr  40h
.text:00406400
.text:00406400                 mov     edi, edi
.text:00406402                 push    ebp
.text:00406403                 mov     ebp, esp
.text:00406405                 push    ecx
.text:00406406                 push    esi
.text:00406407                 mov     esi, [ebp+arg_0]
.text:0040640A                 push    edi
.text:0040640B                 lea     eax, [ebp+var_4]
.text:0040640E                 push    eax
.text:0040640F                 mov     eax, 48h ; 'H'
.text:00406414                 mov     ecx, esi
.text:00406416                 mov     [ebp+var_4], 0
.text:0040641D                 mov     edi, 80004005h
.text:00406422                 call    sub_403C30
.text:00406427                 test    eax, eax
.text:00406429                 mov     ecx, [ebp+var_4]
.text:0040642C                 jnz     short loc_406446
.text:0040642E                 mov     dword ptr [ecx], 48h ; 'H'
.text:00406434                 mov     dword ptr [ecx+8], 0F0000025h
.text:0040643B                 mov     dword ptr [ecx+4], 4
.text:00406442                 xor     edi, edi
.text:00406444                 jmp     short loc_40645F
.text:00406446 ; ---------------------------------------------------------------------------
.text:00406446
.text:00406446 loc_406446:                             ; CODE XREF: SimConnect_WeatherCreateThermal+2C↑j
.text:00406446                 cmp     eax, 2
.text:00406449                 jnz     loc_4064CF
.text:0040644F                 test    esi, esi
.text:00406451                 jz      short loc_406458
.text:00406453                 mov     edi, [esi+14h]
.text:00406456                 jmp     short loc_40645B
.text:00406458 ; ---------------------------------------------------------------------------
.text:00406458
.text:00406458 loc_406458:                             ; CODE XREF: SimConnect_WeatherCreateThermal+51↑j
.text:00406458                 mov     edi, [ebp+arg_0]
.text:0040645B
.text:0040645B loc_40645B:                             ; CODE XREF: SimConnect_WeatherCreateThermal+56↑j
.text:0040645B                 test    edi, edi
.text:0040645D                 jl      short loc_4064CF
.text:0040645F
.text:0040645F loc_40645F:                             ; CODE XREF: SimConnect_WeatherCreateThermal+44↑j
.text:0040645F                 test    esi, esi
.text:00406461                 fld     [ebp+arg_8]
.text:00406464                 mov     edx, [ebp+arg_4]
.text:00406467                 mov     [ecx+10h], edx
.text:0040646A                 fstp    dword ptr [ecx+14h]
.text:0040646D                 fld     [ebp+arg_C]
.text:00406470                 fstp    dword ptr [ecx+18h]
.text:00406473                 fld     [ebp+arg_10]
.text:00406476                 fstp    dword ptr [ecx+1Ch]
.text:00406479                 fld     [ebp+arg_14]
.text:0040647C                 fstp    dword ptr [ecx+20h]
.text:0040647F                 fld     [ebp+arg_18]
.text:00406482                 fstp    dword ptr [ecx+24h]
.text:00406485                 fld     [ebp+arg_1C]
.text:00406488                 fstp    dword ptr [ecx+28h]
.text:0040648B                 fld     [ebp+arg_20]
.text:0040648E                 fstp    dword ptr [ecx+2Ch]
.text:00406491                 fld     [ebp+arg_24]
.text:00406494                 fstp    dword ptr [ecx+30h]
.text:00406497                 fld     [ebp+arg_28]
.text:0040649A                 fstp    dword ptr [ecx+34h]
.text:0040649D                 fld     [ebp+arg_2C]
.text:004064A0                 fstp    dword ptr [ecx+38h]
.text:004064A3                 fld     [ebp+arg_30]
.text:004064A6                 fstp    dword ptr [ecx+3Ch]
.text:004064A9                 fld     [ebp+arg_34]
.text:004064AC                 fstp    dword ptr [ecx+40h]
.text:004064AF                 fld     [ebp+arg_38]
.text:004064B2                 fstp    dword ptr [ecx+44h]
.text:004064B5                 jz      short loc_4064DF
.text:004064B7                 cmp     byte ptr [esi+1E0h], 0
.text:004064BE                 jz      short loc_4064DF
.text:004064C0                 call    sub_403E40
.text:004064C5                 mov     eax, edi
.text:004064C7                 pop     edi
.text:004064C8                 pop     esi
.text:004064C9                 mov     esp, ebp
.text:004064CB                 pop     ebp
.text:004064CC                 retn    3Ch ; '<'
.text:004064CF ; ---------------------------------------------------------------------------
.text:004064CF
.text:004064CF loc_4064CF:                             ; CODE XREF: SimConnect_WeatherCreateThermal+49↑j
.text:004064CF                                         ; SimConnect_WeatherCreateThermal+5D↑j
.text:004064CF                 mov     eax, [ebp+var_4]
.text:004064D2                 test    eax, eax
.text:004064D4                 jz      short loc_4064DF
.text:004064D6                 push    48h ; 'H'       ; Size
.text:004064D8                 push    eax             ; void *
.text:004064D9                 push    esi             ; int
.text:004064DA                 call    sub_403D30
.text:004064DF
.text:004064DF loc_4064DF:                             ; CODE XREF: SimConnect_WeatherCreateThermal+B5↑j
.text:004064DF                                         ; SimConnect_WeatherCreateThermal+BE↑j ...
.text:004064DF                 mov     eax, edi
.text:004064E1                 pop     edi
.text:004064E2                 pop     esi
.text:004064E3                 mov     esp, ebp
.text:004064E5                 pop     ebp
.text:004064E6                 retn    3Ch ; '<'
.text:004064E6 SimConnect_WeatherCreateThermal endp
.text:004064E6
.text:004064E6 ; ---------------------------------------------------------------------------
.text:004064E9                 align 10h
.text:004064F0 ; Exported entry  62. SimConnect_WeatherRemoveThermal
.text:004064F0
.text:004064F0 ; =============== S U B R O U T I N E =======================================
.text:004064F0
.text:004064F0 ; Attributes: bp-based frame
.text:004064F0
.text:004064F0                 public SimConnect_WeatherRemoveThermal
.text:004064F0 SimConnect_WeatherRemoveThermal proc near
.text:004064F0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004064F0
.text:004064F0 var_4           = dword ptr -4
.text:004064F0 arg_0           = dword ptr  8
.text:004064F0 arg_4           = dword ptr  0Ch
.text:004064F0
.text:004064F0                 mov     edi, edi
.text:004064F2                 push    ebp
.text:004064F3                 mov     ebp, esp
.text:004064F5                 push    ecx
.text:004064F6                 push    esi
.text:004064F7                 mov     esi, [ebp+arg_0]
.text:004064FA                 push    edi
.text:004064FB                 lea     eax, [ebp+var_4]
.text:004064FE                 push    eax
.text:004064FF                 mov     eax, 14h
.text:00406504                 mov     ecx, esi
.text:00406506                 mov     [ebp+var_4], 0
.text:0040650D                 mov     edi, 80004005h
.text:00406512                 call    sub_403C30
.text:00406517                 test    eax, eax
.text:00406519                 mov     ecx, [ebp+var_4]
.text:0040651C                 jnz     short loc_406536
.text:0040651E                 mov     dword ptr [ecx], 14h
.text:00406524                 mov     dword ptr [ecx+8], 0F0000026h
.text:0040652B                 mov     dword ptr [ecx+4], 4
.text:00406532                 xor     edi, edi
.text:00406534                 jmp     short loc_40654B
.text:00406536 ; ---------------------------------------------------------------------------
.text:00406536
.text:00406536 loc_406536:                             ; CODE XREF: SimConnect_WeatherRemoveThermal+2C↑j
.text:00406536                 cmp     eax, 2
.text:00406539                 jnz     short loc_40656D
.text:0040653B                 test    esi, esi
.text:0040653D                 jz      short loc_406544
.text:0040653F                 mov     edi, [esi+14h]
.text:00406542                 jmp     short loc_406547
.text:00406544 ; ---------------------------------------------------------------------------
.text:00406544
.text:00406544 loc_406544:                             ; CODE XREF: SimConnect_WeatherRemoveThermal+4D↑j
.text:00406544                 mov     edi, [ebp+arg_0]
.text:00406547
.text:00406547 loc_406547:                             ; CODE XREF: SimConnect_WeatherRemoveThermal+52↑j
.text:00406547                 test    edi, edi
.text:00406549                 jl      short loc_40656D
.text:0040654B
.text:0040654B loc_40654B:                             ; CODE XREF: SimConnect_WeatherRemoveThermal+44↑j
.text:0040654B                 test    esi, esi
.text:0040654D                 mov     edx, [ebp+arg_4]
.text:00406550                 mov     [ecx+10h], edx
.text:00406553                 jz      short loc_40657D
.text:00406555                 cmp     byte ptr [esi+1E0h], 0
.text:0040655C                 jz      short loc_40657D
.text:0040655E                 call    sub_403E40
.text:00406563                 mov     eax, edi
.text:00406565                 pop     edi
.text:00406566                 pop     esi
.text:00406567                 mov     esp, ebp
.text:00406569                 pop     ebp
.text:0040656A                 retn    8
.text:0040656D ; ---------------------------------------------------------------------------
.text:0040656D
.text:0040656D loc_40656D:                             ; CODE XREF: SimConnect_WeatherRemoveThermal+49↑j
.text:0040656D                                         ; SimConnect_WeatherRemoveThermal+59↑j
.text:0040656D                 mov     eax, [ebp+var_4]
.text:00406570                 test    eax, eax
.text:00406572                 jz      short loc_40657D
.text:00406574                 push    14h             ; Size
.text:00406576                 push    eax             ; void *
.text:00406577                 push    esi             ; int
.text:00406578                 call    sub_403D30
.text:0040657D
.text:0040657D loc_40657D:                             ; CODE XREF: SimConnect_WeatherRemoveThermal+63↑j
.text:0040657D                                         ; SimConnect_WeatherRemoveThermal+6C↑j ...
.text:0040657D                 mov     eax, edi
.text:0040657F                 pop     edi
.text:00406580                 pop     esi
.text:00406581                 mov     esp, ebp
.text:00406583                 pop     ebp
.text:00406584                 retn    8
.text:00406584 SimConnect_WeatherRemoveThermal endp
.text:00406584
.text:00406584 ; ---------------------------------------------------------------------------
.text:00406587                 align 10h
.text:00406590 ; Exported entry   3. SimConnect_AICreateParkedATCAircraft
.text:00406590
.text:00406590 ; =============== S U B R O U T I N E =======================================
.text:00406590
.text:00406590 ; Attributes: bp-based frame
.text:00406590
.text:00406590                 public SimConnect_AICreateParkedATCAircraft
.text:00406590 SimConnect_AICreateParkedATCAircraft proc near
.text:00406590                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406590
.text:00406590 var_4           = dword ptr -4
.text:00406590 arg_0           = dword ptr  8
.text:00406590 arg_4           = dword ptr  0Ch
.text:00406590 arg_8           = dword ptr  10h
.text:00406590 arg_C           = dword ptr  14h
.text:00406590 arg_10          = dword ptr  18h
.text:00406590
.text:00406590                 mov     edi, edi
.text:00406592                 push    ebp
.text:00406593                 mov     ebp, esp
.text:00406595                 push    ecx
.text:00406596                 push    ebx
.text:00406597                 push    esi
.text:00406598                 mov     esi, [ebp+arg_0]
.text:0040659B                 push    edi
.text:0040659C                 lea     eax, [ebp+var_4]
.text:0040659F                 push    eax
.text:004065A0                 mov     eax, 125h
.text:004065A5                 mov     ecx, esi
.text:004065A7                 mov     [ebp+var_4], 0
.text:004065AE                 mov     ebx, 80004005h
.text:004065B3                 call    sub_403C30
.text:004065B8                 test    eax, eax
.text:004065BA                 mov     edi, [ebp+var_4]
.text:004065BD                 jnz     short loc_4065D7
.text:004065BF                 mov     dword ptr [edi], 125h
.text:004065C5                 mov     dword ptr [edi+8], 0F0000027h
.text:004065CC                 mov     dword ptr [edi+4], 4
.text:004065D3                 xor     ebx, ebx
.text:004065D5                 jmp     short loc_4065E8
.text:004065D7 ; ---------------------------------------------------------------------------
.text:004065D7
.text:004065D7 loc_4065D7:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+2D↑j
.text:004065D7                 cmp     eax, 2
.text:004065DA                 jnz     short loc_4065E8
.text:004065DC                 test    esi, esi
.text:004065DE                 jz      short loc_4065E5
.text:004065E0                 mov     ebx, [esi+14h]
.text:004065E3                 jmp     short loc_4065E8
.text:004065E5 ; ---------------------------------------------------------------------------
.text:004065E5
.text:004065E5 loc_4065E5:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+4E↑j
.text:004065E5                 mov     ebx, [ebp+arg_0]
.text:004065E8
.text:004065E8 loc_4065E8:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+45↑j
.text:004065E8                                         ; SimConnect_AICreateParkedATCAircraft+4A↑j ...
.text:004065E8                 test    ebx, ebx
.text:004065EA                 jl      short loc_406606
.text:004065EC                 mov     eax, [ebp+arg_4]
.text:004065EF                 test    eax, eax
.text:004065F1                 jz      short loc_406621
.text:004065F3                 lea     edx, [edi+10h]
.text:004065F6                 mov     ecx, 100h
.text:004065FB                 call    sub_402580
.text:00406600                 mov     ebx, eax
.text:00406602                 test    ebx, ebx
.text:00406604                 jge     short loc_406625
.text:00406606
.text:00406606 loc_406606:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+5A↑j
.text:00406606                                         ; SimConnect_AICreateParkedATCAircraft+B0↓j ...
.text:00406606                 test    edi, edi
.text:00406608                 jz      short loc_406616
.text:0040660A                 push    125h            ; Size
.text:0040660F                 push    edi             ; void *
.text:00406610                 push    esi             ; int
.text:00406611                 call    sub_403D30
.text:00406616
.text:00406616 loc_406616:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+78↑j
.text:00406616                                         ; SimConnect_AICreateParkedATCAircraft+EC↓j ...
.text:00406616                 pop     edi
.text:00406617                 pop     esi
.text:00406618                 mov     eax, ebx
.text:0040661A                 pop     ebx
.text:0040661B                 mov     esp, ebp
.text:0040661D                 pop     ebp
.text:0040661E                 retn    14h
.text:00406621 ; ---------------------------------------------------------------------------
.text:00406621
.text:00406621 loc_406621:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+61↑j
.text:00406621                 mov     byte ptr [edi+10h], 0
.text:00406625
.text:00406625 loc_406625:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+74↑j
.text:00406625                 mov     eax, [ebp+arg_8]
.text:00406628                 test    eax, eax
.text:0040662A                 jz      short loc_406644
.text:0040662C                 lea     edx, [edi+110h]
.text:00406632                 mov     ecx, 0Ch
.text:00406637                 call    sub_402580
.text:0040663C                 mov     ebx, eax
.text:0040663E                 test    ebx, ebx
.text:00406640                 jl      short loc_406606
.text:00406642                 jmp     short loc_40664B
.text:00406644 ; ---------------------------------------------------------------------------
.text:00406644
.text:00406644 loc_406644:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+9A↑j
.text:00406644                 mov     byte ptr [edi+110h], 0
.text:0040664B
.text:0040664B loc_40664B:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+B2↑j
.text:0040664B                 mov     eax, [ebp+arg_C]
.text:0040664E                 test    eax, eax
.text:00406650                 jz      short loc_40666A
.text:00406652                 lea     edx, [edi+11Ch]
.text:00406658                 mov     ecx, 5
.text:0040665D                 call    sub_402580
.text:00406662                 mov     ebx, eax
.text:00406664                 test    ebx, ebx
.text:00406666                 jl      short loc_406606
.text:00406668                 jmp     short loc_406671
.text:0040666A ; ---------------------------------------------------------------------------
.text:0040666A
.text:0040666A loc_40666A:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+C0↑j
.text:0040666A                 mov     byte ptr [edi+11Ch], 0
.text:00406671
.text:00406671 loc_406671:                             ; CODE XREF: SimConnect_AICreateParkedATCAircraft+D8↑j
.text:00406671                 test    esi, esi
.text:00406673                 mov     ecx, [ebp+arg_10]
.text:00406676                 mov     [edi+121h], ecx
.text:0040667C                 jz      short loc_406616
.text:0040667E                 cmp     byte ptr [esi+1E0h], 0
.text:00406685                 jz      short loc_406616
.text:00406687                 call    sub_403E40
.text:0040668C                 pop     edi
.text:0040668D                 pop     esi
.text:0040668E                 mov     eax, ebx
.text:00406690                 pop     ebx
.text:00406691                 mov     esp, ebp
.text:00406693                 pop     ebp
.text:00406694                 retn    14h
.text:00406694 SimConnect_AICreateParkedATCAircraft endp
.text:00406694
.text:00406694 ; ---------------------------------------------------------------------------
.text:00406697                 align 10h
.text:004066A0 ; Exported entry   1. SimConnect_AICreateEnrouteATCAircraft
.text:004066A0
.text:004066A0 ; =============== S U B R O U T I N E =======================================
.text:004066A0
.text:004066A0 ; Attributes: bp-based frame
.text:004066A0
.text:004066A0 ; int __stdcall SimConnect_AICreateEnrouteATCAircraft(int, int, int, int, int, double, int, int)
.text:004066A0                 public SimConnect_AICreateEnrouteATCAircraft
.text:004066A0 SimConnect_AICreateEnrouteATCAircraft proc near
.text:004066A0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004066A0
.text:004066A0 var_4           = dword ptr -4
.text:004066A0 arg_0           = dword ptr  8
.text:004066A0 arg_4           = dword ptr  0Ch
.text:004066A0 arg_8           = dword ptr  10h
.text:004066A0 arg_C           = dword ptr  14h
.text:004066A0 arg_10          = dword ptr  18h
.text:004066A0 arg_14          = qword ptr  1Ch
.text:004066A0 arg_1C          = dword ptr  24h
.text:004066A0 arg_20          = dword ptr  28h
.text:004066A0
.text:004066A0                 mov     edi, edi
.text:004066A2                 push    ebp
.text:004066A3                 mov     ebp, esp
.text:004066A5                 push    ecx
.text:004066A6                 push    ebx
.text:004066A7                 push    esi
.text:004066A8                 mov     esi, [ebp+arg_0]
.text:004066AB                 push    edi
.text:004066AC                 lea     eax, [ebp+var_4]
.text:004066AF                 push    eax
.text:004066B0                 mov     eax, 234h
.text:004066B5                 mov     ecx, esi
.text:004066B7                 mov     [ebp+var_4], 0
.text:004066BE                 mov     ebx, 80004005h
.text:004066C3                 call    sub_403C30
.text:004066C8                 test    eax, eax
.text:004066CA                 mov     edi, [ebp+var_4]
.text:004066CD                 jnz     short loc_4066E7
.text:004066CF                 mov     dword ptr [edi], 234h
.text:004066D5                 mov     dword ptr [edi+8], 0F0000028h
.text:004066DC                 mov     dword ptr [edi+4], 4
.text:004066E3                 xor     ebx, ebx
.text:004066E5                 jmp     short loc_4066F8
.text:004066E7 ; ---------------------------------------------------------------------------
.text:004066E7
.text:004066E7 loc_4066E7:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+2D↑j
.text:004066E7                 cmp     eax, 2
.text:004066EA                 jnz     short loc_4066F8
.text:004066EC                 test    esi, esi
.text:004066EE                 jz      short loc_4066F5
.text:004066F0                 mov     ebx, [esi+14h]
.text:004066F3                 jmp     short loc_4066F8
.text:004066F5 ; ---------------------------------------------------------------------------
.text:004066F5
.text:004066F5 loc_4066F5:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+4E↑j
.text:004066F5                 mov     ebx, [ebp+arg_0]
.text:004066F8
.text:004066F8 loc_4066F8:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+45↑j
.text:004066F8                                         ; SimConnect_AICreateEnrouteATCAircraft+4A↑j ...
.text:004066F8                 test    ebx, ebx
.text:004066FA                 jl      short loc_406716
.text:004066FC                 mov     eax, [ebp+arg_4]
.text:004066FF                 test    eax, eax
.text:00406701                 jz      short loc_406731
.text:00406703                 lea     edx, [edi+10h]
.text:00406706                 mov     ecx, 100h
.text:0040670B                 call    sub_402580
.text:00406710                 mov     ebx, eax
.text:00406712                 test    ebx, ebx
.text:00406714                 jge     short loc_406735
.text:00406716
.text:00406716 loc_406716:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+5A↑j
.text:00406716                                         ; SimConnect_AICreateEnrouteATCAircraft+B0↓j ...
.text:00406716                 test    edi, edi
.text:00406718                 jz      short loc_406726
.text:0040671A                 push    234h            ; Size
.text:0040671F                 push    edi             ; void *
.text:00406720                 push    esi             ; int
.text:00406721                 call    sub_403D30
.text:00406726
.text:00406726 loc_406726:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+78↑j
.text:00406726                                         ; SimConnect_AICreateEnrouteATCAircraft+107↓j ...
.text:00406726                 pop     edi
.text:00406727                 pop     esi
.text:00406728                 mov     eax, ebx
.text:0040672A                 pop     ebx
.text:0040672B                 mov     esp, ebp
.text:0040672D                 pop     ebp
.text:0040672E                 retn    24h ; '$'
.text:00406731 ; ---------------------------------------------------------------------------
.text:00406731
.text:00406731 loc_406731:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+61↑j
.text:00406731                 mov     byte ptr [edi+10h], 0
.text:00406735
.text:00406735 loc_406735:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+74↑j
.text:00406735                 mov     eax, [ebp+arg_8]
.text:00406738                 test    eax, eax
.text:0040673A                 jz      short loc_406754
.text:0040673C                 lea     edx, [edi+110h]
.text:00406742                 mov     ecx, 0Ch
.text:00406747                 call    sub_402580
.text:0040674C                 mov     ebx, eax
.text:0040674E                 test    ebx, ebx
.text:00406750                 jl      short loc_406716
.text:00406752                 jmp     short loc_40675B
.text:00406754 ; ---------------------------------------------------------------------------
.text:00406754
.text:00406754 loc_406754:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+9A↑j
.text:00406754                 mov     byte ptr [edi+110h], 0
.text:0040675B
.text:0040675B loc_40675B:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+B2↑j
.text:0040675B                 mov     eax, [ebp+arg_10]
.text:0040675E                 test    eax, eax
.text:00406760                 mov     ecx, [ebp+arg_C]
.text:00406763                 mov     [edi+11Ch], ecx
.text:00406769                 jz      short loc_406783
.text:0040676B                 lea     edx, [edi+120h]
.text:00406771                 mov     ecx, 104h
.text:00406776                 call    sub_402580
.text:0040677B                 mov     ebx, eax
.text:0040677D                 test    ebx, ebx
.text:0040677F                 jl      short loc_406716
.text:00406781                 jmp     short loc_40678A
.text:00406783 ; ---------------------------------------------------------------------------
.text:00406783
.text:00406783 loc_406783:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+C9↑j
.text:00406783                 mov     byte ptr [edi+120h], 0
.text:0040678A
.text:0040678A loc_40678A:                             ; CODE XREF: SimConnect_AICreateEnrouteATCAircraft+E1↑j
.text:0040678A                 test    esi, esi
.text:0040678C                 fld     [ebp+arg_14]
.text:0040678F                 mov     edx, [ebp+arg_1C]
.text:00406792                 fstp    qword ptr [edi+224h]
.text:00406798                 mov     eax, [ebp+arg_20]
.text:0040679B                 mov     [edi+22Ch], edx
.text:004067A1                 mov     [edi+230h], eax
.text:004067A7                 jz      loc_406726
.text:004067AD                 cmp     byte ptr [esi+1E0h], 0
.text:004067B4                 jz      loc_406726
.text:004067BA                 call    sub_403E40
.text:004067BF                 pop     edi
.text:004067C0                 pop     esi
.text:004067C1                 mov     eax, ebx
.text:004067C3                 pop     ebx
.text:004067C4                 mov     esp, ebp
.text:004067C6                 pop     ebp
.text:004067C7                 retn    24h ; '$'
.text:004067C7 SimConnect_AICreateEnrouteATCAircraft endp
.text:004067C7
.text:004067C7 ; ---------------------------------------------------------------------------
.text:004067CA                 align 10h
.text:004067D0 ; Exported entry   2. SimConnect_AICreateNonATCAircraft
.text:004067D0
.text:004067D0 ; =============== S U B R O U T I N E =======================================
.text:004067D0
.text:004067D0 ; Attributes: bp-based frame
.text:004067D0
.text:004067D0                 public SimConnect_AICreateNonATCAircraft
.text:004067D0 SimConnect_AICreateNonATCAircraft proc near
.text:004067D0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004067D0
.text:004067D0 var_4           = dword ptr -4
.text:004067D0 arg_0           = dword ptr  8
.text:004067D0 arg_4           = dword ptr  0Ch
.text:004067D0 arg_8           = dword ptr  10h
.text:004067D0 arg_C           = byte ptr  14h
.text:004067D0 arg_44          = dword ptr  4Ch
.text:004067D0
.text:004067D0                 mov     edi, edi
.text:004067D2                 push    ebp
.text:004067D3                 mov     ebp, esp
.text:004067D5                 push    ecx
.text:004067D6                 push    ebx
.text:004067D7                 push    esi
.text:004067D8                 push    edi
.text:004067D9                 mov     edi, [ebp+arg_0]
.text:004067DC                 lea     eax, [ebp+var_4]
.text:004067DF                 push    eax
.text:004067E0                 mov     eax, 158h
.text:004067E5                 mov     ecx, edi
.text:004067E7                 mov     [ebp+var_4], 0
.text:004067EE                 mov     esi, 80004005h
.text:004067F3                 call    sub_403C30
.text:004067F8                 test    eax, eax
.text:004067FA                 mov     ebx, [ebp+var_4]
.text:004067FD                 jnz     short loc_406817
.text:004067FF                 mov     dword ptr [ebx], 158h
.text:00406805                 mov     dword ptr [ebx+8], 0F0000029h
.text:0040680C                 mov     dword ptr [ebx+4], 4
.text:00406813                 xor     esi, esi
.text:00406815                 jmp     short loc_406828
.text:00406817 ; ---------------------------------------------------------------------------
.text:00406817
.text:00406817 loc_406817:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+2D↑j
.text:00406817                 cmp     eax, 2
.text:0040681A                 jnz     short loc_406828
.text:0040681C                 test    edi, edi
.text:0040681E                 jz      short loc_406825
.text:00406820                 mov     esi, [edi+14h]
.text:00406823                 jmp     short loc_406828
.text:00406825 ; ---------------------------------------------------------------------------
.text:00406825
.text:00406825 loc_406825:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+4E↑j
.text:00406825                 mov     esi, [ebp+arg_0]
.text:00406828
.text:00406828 loc_406828:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+45↑j
.text:00406828                                         ; SimConnect_AICreateNonATCAircraft+4A↑j ...
.text:00406828                 test    esi, esi
.text:0040682A                 mov     [ebp+var_4], esi
.text:0040682D                 jl      short loc_40684D
.text:0040682F                 mov     eax, [ebp+arg_4]
.text:00406832                 test    eax, eax
.text:00406834                 jz      short loc_406868
.text:00406836                 lea     edx, [ebx+10h]
.text:00406839                 mov     ecx, 100h
.text:0040683E                 call    sub_402580
.text:00406843                 test    eax, eax
.text:00406845                 mov     [ebp+var_4], eax
.text:00406848                 jge     short loc_40686C
.text:0040684A
.text:0040684A loc_40684A:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+B8↓j
.text:0040684A                 mov     esi, [ebp+var_4]
.text:0040684D
.text:0040684D loc_40684D:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+5D↑j
.text:0040684D                 test    ebx, ebx
.text:0040684F                 jz      short loc_40685D
.text:00406851                 push    158h            ; Size
.text:00406856                 push    ebx             ; void *
.text:00406857                 push    edi             ; int
.text:00406858                 call    sub_403D30
.text:0040685D
.text:0040685D loc_40685D:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+7F↑j
.text:0040685D                 pop     edi
.text:0040685E                 mov     eax, esi
.text:00406860                 pop     esi
.text:00406861                 pop     ebx
.text:00406862                 mov     esp, ebp
.text:00406864                 pop     ebp
.text:00406865                 retn    48h ; 'H'
.text:00406868 ; ---------------------------------------------------------------------------
.text:00406868
.text:00406868 loc_406868:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+64↑j
.text:00406868                 mov     byte ptr [ebx+10h], 0
.text:0040686C
.text:0040686C loc_40686C:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+78↑j
.text:0040686C                 mov     eax, [ebp+arg_8]
.text:0040686F                 test    eax, eax
.text:00406871                 jz      short loc_40688C
.text:00406873                 lea     edx, [ebx+110h]
.text:00406879                 mov     ecx, 0Ch
.text:0040687E                 call    sub_402580
.text:00406883                 test    eax, eax
.text:00406885                 mov     [ebp+var_4], eax
.text:00406888                 jl      short loc_40684A
.text:0040688A                 jmp     short loc_406893
.text:0040688C ; ---------------------------------------------------------------------------
.text:0040688C
.text:0040688C loc_40688C:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+A1↑j
.text:0040688C                 mov     byte ptr [ebx+110h], 0
.text:00406893
.text:00406893 loc_406893:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+BA↑j
.text:00406893                 lea     edi, [ebx+11Ch]
.text:00406899                 mov     ecx, 0Eh
.text:0040689E                 lea     esi, [ebp+arg_C]
.text:004068A1                 rep movsd
.text:004068A3                 mov     esi, [ebp+arg_0]
.text:004068A6                 test    esi, esi
.text:004068A8                 mov     ecx, [ebp+arg_44]
.text:004068AB                 mov     [ebx+154h], ecx
.text:004068B1                 jz      short loc_4068C1
.text:004068B3                 cmp     byte ptr [esi+1E0h], 0
.text:004068BA                 jz      short loc_4068C1
.text:004068BC                 call    sub_403E40
.text:004068C1
.text:004068C1 loc_4068C1:                             ; CODE XREF: SimConnect_AICreateNonATCAircraft+E1↑j
.text:004068C1                                         ; SimConnect_AICreateNonATCAircraft+EA↑j
.text:004068C1                 mov     eax, [ebp+var_4]
.text:004068C4                 pop     edi
.text:004068C5                 pop     esi
.text:004068C6                 pop     ebx
.text:004068C7                 mov     esp, ebp
.text:004068C9                 pop     ebp
.text:004068CA                 retn    48h ; 'H'
.text:004068CA SimConnect_AICreateNonATCAircraft endp
.text:004068CA
.text:004068CA ; ---------------------------------------------------------------------------
.text:004068CD                 align 20h
.text:004068E0 ; Exported entry   4. SimConnect_AICreateSimulatedObject
.text:004068E0
.text:004068E0 ; =============== S U B R O U T I N E =======================================
.text:004068E0
.text:004068E0 ; Attributes: bp-based frame
.text:004068E0
.text:004068E0                 public SimConnect_AICreateSimulatedObject
.text:004068E0 SimConnect_AICreateSimulatedObject proc near
.text:004068E0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004068E0
.text:004068E0 var_4           = dword ptr -4
.text:004068E0 arg_0           = dword ptr  8
.text:004068E0 arg_4           = dword ptr  0Ch
.text:004068E0 arg_8           = byte ptr  10h
.text:004068E0 arg_40          = dword ptr  48h
.text:004068E0
.text:004068E0                 mov     edi, edi
.text:004068E2                 push    ebp
.text:004068E3                 mov     ebp, esp
.text:004068E5                 push    ecx
.text:004068E6                 push    ebx
.text:004068E7                 push    esi
.text:004068E8                 push    edi
.text:004068E9                 mov     edi, [ebp+arg_0]
.text:004068EC                 lea     eax, [ebp+var_4]
.text:004068EF                 push    eax
.text:004068F0                 mov     eax, 14Ch
.text:004068F5                 mov     ecx, edi
.text:004068F7                 mov     [ebp+var_4], 0
.text:004068FE                 mov     esi, 80004005h
.text:00406903                 call    sub_403C30
.text:00406908                 test    eax, eax
.text:0040690A                 mov     ebx, [ebp+var_4]
.text:0040690D                 jnz     short loc_406927
.text:0040690F                 mov     dword ptr [ebx], 14Ch
.text:00406915                 mov     dword ptr [ebx+8], 0F000002Ah
.text:0040691C                 mov     dword ptr [ebx+4], 4
.text:00406923                 xor     esi, esi
.text:00406925                 jmp     short loc_406938
.text:00406927 ; ---------------------------------------------------------------------------
.text:00406927
.text:00406927 loc_406927:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+2D↑j
.text:00406927                 cmp     eax, 2
.text:0040692A                 jnz     short loc_406938
.text:0040692C                 test    edi, edi
.text:0040692E                 jz      short loc_406935
.text:00406930                 mov     esi, [edi+14h]
.text:00406933                 jmp     short loc_406938
.text:00406935 ; ---------------------------------------------------------------------------
.text:00406935
.text:00406935 loc_406935:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+4E↑j
.text:00406935                 mov     esi, [ebp+arg_0]
.text:00406938
.text:00406938 loc_406938:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+45↑j
.text:00406938                                         ; SimConnect_AICreateSimulatedObject+4A↑j ...
.text:00406938                 test    esi, esi
.text:0040693A                 mov     [ebp+var_4], esi
.text:0040693D                 jl      short loc_40695C
.text:0040693F                 mov     eax, [ebp+arg_4]
.text:00406942                 test    eax, eax
.text:00406944                 jz      short loc_406977
.text:00406946                 lea     edx, [ebx+10h]
.text:00406949                 mov     ecx, 100h
.text:0040694E                 call    sub_402580
.text:00406953                 test    eax, eax
.text:00406955                 mov     [ebp+var_4], eax
.text:00406958                 jge     short loc_40697B
.text:0040695A                 mov     esi, eax
.text:0040695C
.text:0040695C loc_40695C:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+5D↑j
.text:0040695C                 test    ebx, ebx
.text:0040695E                 jz      short loc_40696C
.text:00406960                 push    14Ch            ; Size
.text:00406965                 push    ebx             ; void *
.text:00406966                 push    edi             ; int
.text:00406967                 call    sub_403D30
.text:0040696C
.text:0040696C loc_40696C:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+7E↑j
.text:0040696C                 pop     edi
.text:0040696D                 mov     eax, esi
.text:0040696F                 pop     esi
.text:00406970                 pop     ebx
.text:00406971                 mov     esp, ebp
.text:00406973                 pop     ebp
.text:00406974                 retn    44h ; 'D'
.text:00406977 ; ---------------------------------------------------------------------------
.text:00406977
.text:00406977 loc_406977:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+64↑j
.text:00406977                 mov     byte ptr [ebx+10h], 0
.text:0040697B
.text:0040697B loc_40697B:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+78↑j
.text:0040697B                 lea     edi, [ebx+110h]
.text:00406981                 mov     ecx, 0Eh
.text:00406986                 lea     esi, [ebp+arg_8]
.text:00406989                 rep movsd
.text:0040698B                 mov     esi, [ebp+arg_0]
.text:0040698E                 test    esi, esi
.text:00406990                 mov     ecx, [ebp+arg_40]
.text:00406993                 mov     [ebx+148h], ecx
.text:00406999                 jz      short loc_4069A9
.text:0040699B                 cmp     byte ptr [esi+1E0h], 0
.text:004069A2                 jz      short loc_4069A9
.text:004069A4                 call    sub_403E40
.text:004069A9
.text:004069A9 loc_4069A9:                             ; CODE XREF: SimConnect_AICreateSimulatedObject+B9↑j
.text:004069A9                                         ; SimConnect_AICreateSimulatedObject+C2↑j
.text:004069A9                 mov     eax, [ebp+var_4]
.text:004069AC                 pop     edi
.text:004069AD                 pop     esi
.text:004069AE                 pop     ebx
.text:004069AF                 mov     esp, ebp
.text:004069B1                 pop     ebp
.text:004069B2                 retn    44h ; 'D'
.text:004069B2 SimConnect_AICreateSimulatedObject endp
.text:004069B2
.text:004069B2 ; ---------------------------------------------------------------------------
.text:004069B5                 align 10h
.text:004069C0 ; Exported entry   5. SimConnect_AIReleaseControl
.text:004069C0
.text:004069C0 ; =============== S U B R O U T I N E =======================================
.text:004069C0
.text:004069C0 ; Attributes: bp-based frame
.text:004069C0
.text:004069C0                 public SimConnect_AIReleaseControl
.text:004069C0 SimConnect_AIReleaseControl proc near   ; DATA XREF: .text:off_409FB8↓o
.text:004069C0
.text:004069C0 var_4           = dword ptr -4
.text:004069C0 arg_0           = dword ptr  8
.text:004069C0 arg_4           = dword ptr  0Ch
.text:004069C0 arg_8           = dword ptr  10h
.text:004069C0
.text:004069C0                 mov     edi, edi
.text:004069C2                 push    ebp
.text:004069C3                 mov     ebp, esp
.text:004069C5                 push    ecx
.text:004069C6                 push    esi
.text:004069C7                 mov     esi, [ebp+arg_0]
.text:004069CA                 push    edi
.text:004069CB                 lea     eax, [ebp+var_4]
.text:004069CE                 push    eax
.text:004069CF                 mov     eax, 18h
.text:004069D4                 mov     ecx, esi
.text:004069D6                 mov     [ebp+var_4], 0
.text:004069DD                 mov     edi, 80004005h
.text:004069E2                 call    sub_403C30
.text:004069E7                 test    eax, eax
.text:004069E9                 mov     ecx, [ebp+var_4]
.text:004069EC                 jnz     short loc_406A06
.text:004069EE                 mov     dword ptr [ecx], 18h
.text:004069F4                 mov     dword ptr [ecx+8], 0F000002Bh
.text:004069FB                 mov     dword ptr [ecx+4], 4
.text:00406A02                 xor     edi, edi
.text:00406A04                 jmp     short loc_406A1B
.text:00406A06 ; ---------------------------------------------------------------------------
.text:00406A06
.text:00406A06 loc_406A06:                             ; CODE XREF: SimConnect_AIReleaseControl+2C↑j
.text:00406A06                 cmp     eax, 2
.text:00406A09                 jnz     short loc_406A43
.text:00406A0B                 test    esi, esi
.text:00406A0D                 jz      short loc_406A14
.text:00406A0F                 mov     edi, [esi+14h]
.text:00406A12                 jmp     short loc_406A17
.text:00406A14 ; ---------------------------------------------------------------------------
.text:00406A14
.text:00406A14 loc_406A14:                             ; CODE XREF: SimConnect_AIReleaseControl+4D↑j
.text:00406A14                 mov     edi, [ebp+arg_0]
.text:00406A17
.text:00406A17 loc_406A17:                             ; CODE XREF: SimConnect_AIReleaseControl+52↑j
.text:00406A17                 test    edi, edi
.text:00406A19                 jl      short loc_406A43
.text:00406A1B
.text:00406A1B loc_406A1B:                             ; CODE XREF: SimConnect_AIReleaseControl+44↑j
.text:00406A1B                 test    esi, esi
.text:00406A1D                 mov     edx, [ebp+arg_4]
.text:00406A20                 mov     eax, [ebp+arg_8]
.text:00406A23                 mov     [ecx+10h], edx
.text:00406A26                 mov     [ecx+14h], eax
.text:00406A29                 jz      short loc_406A53
.text:00406A2B                 cmp     byte ptr [esi+1E0h], 0
.text:00406A32                 jz      short loc_406A53
.text:00406A34                 call    sub_403E40
.text:00406A39                 mov     eax, edi
.text:00406A3B                 pop     edi
.text:00406A3C                 pop     esi
.text:00406A3D                 mov     esp, ebp
.text:00406A3F                 pop     ebp
.text:00406A40                 retn    0Ch
.text:00406A43 ; ---------------------------------------------------------------------------
.text:00406A43
.text:00406A43 loc_406A43:                             ; CODE XREF: SimConnect_AIReleaseControl+49↑j
.text:00406A43                                         ; SimConnect_AIReleaseControl+59↑j
.text:00406A43                 mov     eax, [ebp+var_4]
.text:00406A46                 test    eax, eax
.text:00406A48                 jz      short loc_406A53
.text:00406A4A                 push    18h             ; Size
.text:00406A4C                 push    eax             ; void *
.text:00406A4D                 push    esi             ; int
.text:00406A4E                 call    sub_403D30
.text:00406A53
.text:00406A53 loc_406A53:                             ; CODE XREF: SimConnect_AIReleaseControl+69↑j
.text:00406A53                                         ; SimConnect_AIReleaseControl+72↑j ...
.text:00406A53                 mov     eax, edi
.text:00406A55                 pop     edi
.text:00406A56                 pop     esi
.text:00406A57                 mov     esp, ebp
.text:00406A59                 pop     ebp
.text:00406A5A                 retn    0Ch
.text:00406A5A SimConnect_AIReleaseControl endp
.text:00406A5A
.text:00406A5A ; ---------------------------------------------------------------------------
.text:00406A5D                 db 13h dup(0CCh)
.text:00406A70 ; Exported entry   6. SimConnect_AIRemoveObject
.text:00406A70
.text:00406A70 ; =============== S U B R O U T I N E =======================================
.text:00406A70
.text:00406A70 ; Attributes: bp-based frame
.text:00406A70
.text:00406A70                 public SimConnect_AIRemoveObject
.text:00406A70 SimConnect_AIRemoveObject proc near     ; DATA XREF: .text:off_409FB8↓o
.text:00406A70
.text:00406A70 var_4           = dword ptr -4
.text:00406A70 arg_0           = dword ptr  8
.text:00406A70 arg_4           = dword ptr  0Ch
.text:00406A70 arg_8           = dword ptr  10h
.text:00406A70
.text:00406A70                 mov     edi, edi
.text:00406A72                 push    ebp
.text:00406A73                 mov     ebp, esp
.text:00406A75                 push    ecx
.text:00406A76                 push    esi
.text:00406A77                 mov     esi, [ebp+arg_0]
.text:00406A7A                 push    edi
.text:00406A7B                 lea     eax, [ebp+var_4]
.text:00406A7E                 push    eax
.text:00406A7F                 mov     eax, 18h
.text:00406A84                 mov     ecx, esi
.text:00406A86                 mov     [ebp+var_4], 0
.text:00406A8D                 mov     edi, 80004005h
.text:00406A92                 call    sub_403C30
.text:00406A97                 test    eax, eax
.text:00406A99                 mov     ecx, [ebp+var_4]
.text:00406A9C                 jnz     short loc_406AB6
.text:00406A9E                 mov     dword ptr [ecx], 18h
.text:00406AA4                 mov     dword ptr [ecx+8], 0F000002Ch
.text:00406AAB                 mov     dword ptr [ecx+4], 4
.text:00406AB2                 xor     edi, edi
.text:00406AB4                 jmp     short loc_406ACB
.text:00406AB6 ; ---------------------------------------------------------------------------
.text:00406AB6
.text:00406AB6 loc_406AB6:                             ; CODE XREF: SimConnect_AIRemoveObject+2C↑j
.text:00406AB6                 cmp     eax, 2
.text:00406AB9                 jnz     short loc_406AF3
.text:00406ABB                 test    esi, esi
.text:00406ABD                 jz      short loc_406AC4
.text:00406ABF                 mov     edi, [esi+14h]
.text:00406AC2                 jmp     short loc_406AC7
.text:00406AC4 ; ---------------------------------------------------------------------------
.text:00406AC4
.text:00406AC4 loc_406AC4:                             ; CODE XREF: SimConnect_AIRemoveObject+4D↑j
.text:00406AC4                 mov     edi, [ebp+arg_0]
.text:00406AC7
.text:00406AC7 loc_406AC7:                             ; CODE XREF: SimConnect_AIRemoveObject+52↑j
.text:00406AC7                 test    edi, edi
.text:00406AC9                 jl      short loc_406AF3
.text:00406ACB
.text:00406ACB loc_406ACB:                             ; CODE XREF: SimConnect_AIRemoveObject+44↑j
.text:00406ACB                 test    esi, esi
.text:00406ACD                 mov     edx, [ebp+arg_4]
.text:00406AD0                 mov     eax, [ebp+arg_8]
.text:00406AD3                 mov     [ecx+10h], edx
.text:00406AD6                 mov     [ecx+14h], eax
.text:00406AD9                 jz      short loc_406B03
.text:00406ADB                 cmp     byte ptr [esi+1E0h], 0
.text:00406AE2                 jz      short loc_406B03
.text:00406AE4                 call    sub_403E40
.text:00406AE9                 mov     eax, edi
.text:00406AEB                 pop     edi
.text:00406AEC                 pop     esi
.text:00406AED                 mov     esp, ebp
.text:00406AEF                 pop     ebp
.text:00406AF0                 retn    0Ch
.text:00406AF3 ; ---------------------------------------------------------------------------
.text:00406AF3
.text:00406AF3 loc_406AF3:                             ; CODE XREF: SimConnect_AIRemoveObject+49↑j
.text:00406AF3                                         ; SimConnect_AIRemoveObject+59↑j
.text:00406AF3                 mov     eax, [ebp+var_4]
.text:00406AF6                 test    eax, eax
.text:00406AF8                 jz      short loc_406B03
.text:00406AFA                 push    18h             ; Size
.text:00406AFC                 push    eax             ; void *
.text:00406AFD                 push    esi             ; int
.text:00406AFE                 call    sub_403D30
.text:00406B03
.text:00406B03 loc_406B03:                             ; CODE XREF: SimConnect_AIRemoveObject+69↑j
.text:00406B03                                         ; SimConnect_AIRemoveObject+72↑j ...
.text:00406B03                 mov     eax, edi
.text:00406B05                 pop     edi
.text:00406B06                 pop     esi
.text:00406B07                 mov     esp, ebp
.text:00406B09                 pop     ebp
.text:00406B0A                 retn    0Ch
.text:00406B0A SimConnect_AIRemoveObject endp
.text:00406B0A
.text:00406B0A ; ---------------------------------------------------------------------------
.text:00406B0D                 align 20h
.text:00406B20 ; Exported entry   7. SimConnect_AISetAircraftFlightPlan
.text:00406B20
.text:00406B20 ; =============== S U B R O U T I N E =======================================
.text:00406B20
.text:00406B20 ; Attributes: bp-based frame
.text:00406B20
.text:00406B20                 public SimConnect_AISetAircraftFlightPlan
.text:00406B20 SimConnect_AISetAircraftFlightPlan proc near
.text:00406B20                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406B20
.text:00406B20 var_4           = dword ptr -4
.text:00406B20 arg_0           = dword ptr  8
.text:00406B20 arg_4           = dword ptr  0Ch
.text:00406B20 arg_8           = dword ptr  10h
.text:00406B20 arg_C           = dword ptr  14h
.text:00406B20
.text:00406B20                 mov     edi, edi
.text:00406B22                 push    ebp
.text:00406B23                 mov     ebp, esp
.text:00406B25                 push    ecx
.text:00406B26                 push    ebx
.text:00406B27                 mov     ebx, [ebp+arg_0]
.text:00406B2A                 push    esi
.text:00406B2B                 push    edi
.text:00406B2C                 lea     eax, [ebp+var_4]
.text:00406B2F                 push    eax
.text:00406B30                 mov     eax, 11Ch
.text:00406B35                 mov     ecx, ebx
.text:00406B37                 mov     [ebp+var_4], 0
.text:00406B3E                 mov     esi, 80004005h
.text:00406B43                 call    sub_403C30
.text:00406B48                 test    eax, eax
.text:00406B4A                 mov     edi, [ebp+var_4]
.text:00406B4D                 jnz     short loc_406B67
.text:00406B4F                 mov     dword ptr [edi], 11Ch
.text:00406B55                 mov     dword ptr [edi+8], 0F000002Dh
.text:00406B5C                 mov     dword ptr [edi+4], 4
.text:00406B63                 xor     esi, esi
.text:00406B65                 jmp     short loc_406B78
.text:00406B67 ; ---------------------------------------------------------------------------
.text:00406B67
.text:00406B67 loc_406B67:                             ; CODE XREF: SimConnect_AISetAircraftFlightPlan+2D↑j
.text:00406B67                 cmp     eax, 2
.text:00406B6A                 jnz     short loc_406B78
.text:00406B6C                 test    ebx, ebx
.text:00406B6E                 jz      short loc_406B75
.text:00406B70                 mov     esi, [ebx+14h]
.text:00406B73                 jmp     short loc_406B78
.text:00406B75 ; ---------------------------------------------------------------------------
.text:00406B75
.text:00406B75 loc_406B75:                             ; CODE XREF: SimConnect_AISetAircraftFlightPlan+4E↑j
.text:00406B75                 mov     esi, [ebp+arg_0]
.text:00406B78
.text:00406B78 loc_406B78:                             ; CODE XREF: SimConnect_AISetAircraftFlightPlan+45↑j
.text:00406B78                                         ; SimConnect_AISetAircraftFlightPlan+4A↑j ...
.text:00406B78                 test    esi, esi
.text:00406B7A                 mov     ebx, esi
.text:00406B7C                 jl      short loc_406B9E
.text:00406B7E                 mov     eax, [ebp+arg_8]
.text:00406B81                 test    eax, eax
.text:00406B83                 mov     ecx, [ebp+arg_4]
.text:00406B86                 mov     [edi+10h], ecx
.text:00406B89                 jz      short loc_406BBC
.text:00406B8B                 lea     edx, [edi+14h]
.text:00406B8E                 mov     ecx, 104h
.text:00406B93                 call    sub_402580
.text:00406B98                 mov     ebx, eax
.text:00406B9A                 test    ebx, ebx
.text:00406B9C                 jge     short loc_406BC0
.text:00406B9E
.text:00406B9E loc_406B9E:                             ; CODE XREF: SimConnect_AISetAircraftFlightPlan+5C↑j
.text:00406B9E                 test    edi, edi
.text:00406BA0                 jz      short loc_406BB1
.text:00406BA2                 mov     eax, [ebp+arg_0]
.text:00406BA5                 push    11Ch            ; Size
.text:00406BAA                 push    edi             ; void *
.text:00406BAB                 push    eax             ; int
.text:00406BAC                 call    sub_403D30
.text:00406BB1
.text:00406BB1 loc_406BB1:                             ; CODE XREF: SimConnect_AISetAircraftFlightPlan+80↑j
.text:00406BB1                                         ; SimConnect_AISetAircraftFlightPlan+AE↓j ...
.text:00406BB1                 pop     edi
.text:00406BB2                 pop     esi
.text:00406BB3                 mov     eax, ebx
.text:00406BB5                 pop     ebx
.text:00406BB6                 mov     esp, ebp
.text:00406BB8                 pop     ebp
.text:00406BB9                 retn    10h
.text:00406BBC ; ---------------------------------------------------------------------------
.text:00406BBC
.text:00406BBC loc_406BBC:                             ; CODE XREF: SimConnect_AISetAircraftFlightPlan+69↑j
.text:00406BBC                 mov     byte ptr [edi+14h], 0
.text:00406BC0
.text:00406BC0 loc_406BC0:                             ; CODE XREF: SimConnect_AISetAircraftFlightPlan+7C↑j
.text:00406BC0                 mov     esi, [ebp+arg_0]
.text:00406BC3                 test    esi, esi
.text:00406BC5                 mov     edx, [ebp+arg_C]
.text:00406BC8                 mov     [edi+118h], edx
.text:00406BCE                 jz      short loc_406BB1
.text:00406BD0                 cmp     byte ptr [esi+1E0h], 0
.text:00406BD7                 jz      short loc_406BB1
.text:00406BD9                 call    sub_403E40
.text:00406BDE                 pop     edi
.text:00406BDF                 pop     esi
.text:00406BE0                 mov     eax, ebx
.text:00406BE2                 pop     ebx
.text:00406BE3                 mov     esp, ebp
.text:00406BE5                 pop     ebp
.text:00406BE6                 retn    10h
.text:00406BE6 SimConnect_AISetAircraftFlightPlan endp
.text:00406BE6
.text:00406BE6 ; ---------------------------------------------------------------------------
.text:00406BE9                 align 10h
.text:00406BF0 ; Exported entry  20. SimConnect_ExecuteMissionAction
.text:00406BF0
.text:00406BF0 ; =============== S U B R O U T I N E =======================================
.text:00406BF0
.text:00406BF0 ; Attributes: bp-based frame
.text:00406BF0
.text:00406BF0                 public SimConnect_ExecuteMissionAction
.text:00406BF0 SimConnect_ExecuteMissionAction proc near
.text:00406BF0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406BF0
.text:00406BF0 var_18          = dword ptr -18h
.text:00406BF0 var_10          = dword ptr -10h
.text:00406BF0 var_C           = dword ptr -0Ch
.text:00406BF0 var_8           = dword ptr -8
.text:00406BF0 var_4           = dword ptr -4
.text:00406BF0 arg_0           = dword ptr  8
.text:00406BF0 arg_4           = dword ptr  0Ch
.text:00406BF0 arg_8           = dword ptr  10h
.text:00406BF0 arg_C           = dword ptr  14h
.text:00406BF0 arg_10          = dword ptr  18h
.text:00406BF0
.text:00406BF0                 mov     edi, edi
.text:00406BF2                 push    ebp
.text:00406BF3                 mov     ebp, esp
.text:00406BF5                 sub     esp, 18h
.text:00406BF8                 mov     eax, ___security_cookie
.text:00406BFD                 xor     eax, ebp
.text:00406BFF                 mov     [ebp+var_4], eax
.text:00406C02                 mov     eax, [ebp+arg_8]
.text:00406C05                 mov     ecx, [ebp+arg_C]
.text:00406C08                 mov     edx, [ebp+arg_10]
.text:00406C0B                 push    ebx
.text:00406C0C                 mov     ebx, [ebp+arg_4]
.text:00406C0F                 push    esi
.text:00406C10                 mov     esi, [ebp+arg_0]
.text:00406C13                 mov     [ebp+var_10], eax
.text:00406C16                 push    edi
.text:00406C17                 lea     eax, [ebp+var_18]
.text:00406C1A                 mov     [ebp+var_C], ecx
.text:00406C1D                 push    eax
.text:00406C1E                 mov     eax, 20h ; ' '
.text:00406C23                 mov     ecx, esi
.text:00406C25                 mov     [ebp+var_8], edx
.text:00406C28                 mov     [ebp+var_18], 0
.text:00406C2F                 mov     edi, 80004005h
.text:00406C34                 call    sub_403C30
.text:00406C39                 test    eax, eax
.text:00406C3B                 mov     ecx, [ebp+var_18]
.text:00406C3E                 jnz     short loc_406C58
.text:00406C40                 mov     dword ptr [ecx], 20h ; ' '
.text:00406C46                 mov     dword ptr [ecx+8], 0F000002Eh
.text:00406C4D                 mov     dword ptr [ecx+4], 4
.text:00406C54                 xor     edi, edi
.text:00406C56                 jmp     short loc_406C6D
.text:00406C58 ; ---------------------------------------------------------------------------
.text:00406C58
.text:00406C58 loc_406C58:                             ; CODE XREF: SimConnect_ExecuteMissionAction+4E↑j
.text:00406C58                 cmp     eax, 2
.text:00406C5B                 jnz     short loc_406C96
.text:00406C5D                 test    esi, esi
.text:00406C5F                 jz      short loc_406C66
.text:00406C61                 mov     edi, [esi+14h]
.text:00406C64                 jmp     short loc_406C69
.text:00406C66 ; ---------------------------------------------------------------------------
.text:00406C66
.text:00406C66 loc_406C66:                             ; CODE XREF: SimConnect_ExecuteMissionAction+6F↑j
.text:00406C66                 mov     edi, [ebp+var_18]
.text:00406C69
.text:00406C69 loc_406C69:                             ; CODE XREF: SimConnect_ExecuteMissionAction+74↑j
.text:00406C69                 test    edi, edi
.text:00406C6B                 jl      short loc_406C96
.text:00406C6D
.text:00406C6D loc_406C6D:                             ; CODE XREF: SimConnect_ExecuteMissionAction+66↑j
.text:00406C6D                 test    esi, esi
.text:00406C6F                 mov     edx, [ebp+var_10]
.text:00406C72                 mov     eax, [ebp+var_C]
.text:00406C75                 mov     [ecx+10h], ebx
.text:00406C78                 mov     [ecx+14h], edx
.text:00406C7B                 mov     edx, [ebp+var_8]
.text:00406C7E                 mov     [ecx+18h], eax
.text:00406C81                 mov     [ecx+1Ch], edx
.text:00406C84                 jz      short loc_406CA6
.text:00406C86                 cmp     byte ptr [esi+1E0h], 0
.text:00406C8D                 jz      short loc_406CA6
.text:00406C8F                 call    sub_403E40
.text:00406C94                 jmp     short loc_406CA6
.text:00406C96 ; ---------------------------------------------------------------------------
.text:00406C96
.text:00406C96 loc_406C96:                             ; CODE XREF: SimConnect_ExecuteMissionAction+6B↑j
.text:00406C96                                         ; SimConnect_ExecuteMissionAction+7B↑j
.text:00406C96                 mov     eax, [ebp+var_18]
.text:00406C99                 test    eax, eax
.text:00406C9B                 jz      short loc_406CA6
.text:00406C9D                 push    20h ; ' '       ; Size
.text:00406C9F                 push    eax             ; void *
.text:00406CA0                 push    esi             ; int
.text:00406CA1                 call    sub_403D30
.text:00406CA6
.text:00406CA6 loc_406CA6:                             ; CODE XREF: SimConnect_ExecuteMissionAction+94↑j
.text:00406CA6                                         ; SimConnect_ExecuteMissionAction+9D↑j ...
.text:00406CA6                 mov     ecx, [ebp+var_4]
.text:00406CA9                 mov     eax, edi
.text:00406CAB                 pop     edi
.text:00406CAC                 pop     esi
.text:00406CAD                 xor     ecx, ebp        ; StackCookie
.text:00406CAF                 pop     ebx
.text:00406CB0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00406CB5                 mov     esp, ebp
.text:00406CB7                 pop     ebp
.text:00406CB8                 retn    14h
.text:00406CB8 SimConnect_ExecuteMissionAction endp
.text:00406CB8
.text:00406CB8 ; ---------------------------------------------------------------------------
.text:00406CBB                 align 10h
.text:00406CC0 ; Exported entry  18. SimConnect_CompleteCustomMissionAction
.text:00406CC0
.text:00406CC0 ; =============== S U B R O U T I N E =======================================
.text:00406CC0
.text:00406CC0 ; Attributes: bp-based frame
.text:00406CC0
.text:00406CC0                 public SimConnect_CompleteCustomMissionAction
.text:00406CC0 SimConnect_CompleteCustomMissionAction proc near
.text:00406CC0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406CC0
.text:00406CC0 var_18          = dword ptr -18h
.text:00406CC0 var_10          = dword ptr -10h
.text:00406CC0 var_C           = dword ptr -0Ch
.text:00406CC0 var_8           = dword ptr -8
.text:00406CC0 var_4           = dword ptr -4
.text:00406CC0 arg_0           = dword ptr  8
.text:00406CC0 arg_4           = dword ptr  0Ch
.text:00406CC0 arg_8           = dword ptr  10h
.text:00406CC0 arg_C           = dword ptr  14h
.text:00406CC0 arg_10          = dword ptr  18h
.text:00406CC0
.text:00406CC0                 mov     edi, edi
.text:00406CC2                 push    ebp
.text:00406CC3                 mov     ebp, esp
.text:00406CC5                 sub     esp, 18h
.text:00406CC8                 mov     eax, ___security_cookie
.text:00406CCD                 xor     eax, ebp
.text:00406CCF                 mov     [ebp+var_4], eax
.text:00406CD2                 mov     eax, [ebp+arg_8]
.text:00406CD5                 mov     ecx, [ebp+arg_C]
.text:00406CD8                 mov     edx, [ebp+arg_10]
.text:00406CDB                 push    ebx
.text:00406CDC                 mov     ebx, [ebp+arg_4]
.text:00406CDF                 push    esi
.text:00406CE0                 mov     esi, [ebp+arg_0]
.text:00406CE3                 mov     [ebp+var_10], eax
.text:00406CE6                 push    edi
.text:00406CE7                 lea     eax, [ebp+var_18]
.text:00406CEA                 mov     [ebp+var_C], ecx
.text:00406CED                 push    eax
.text:00406CEE                 mov     eax, 20h ; ' '
.text:00406CF3                 mov     ecx, esi
.text:00406CF5                 mov     [ebp+var_8], edx
.text:00406CF8                 mov     [ebp+var_18], 0
.text:00406CFF                 mov     edi, 80004005h
.text:00406D04                 call    sub_403C30
.text:00406D09                 test    eax, eax
.text:00406D0B                 mov     ecx, [ebp+var_18]
.text:00406D0E                 jnz     short loc_406D28
.text:00406D10                 mov     dword ptr [ecx], 20h ; ' '
.text:00406D16                 mov     dword ptr [ecx+8], 0F000002Fh
.text:00406D1D                 mov     dword ptr [ecx+4], 4
.text:00406D24                 xor     edi, edi
.text:00406D26                 jmp     short loc_406D3D
.text:00406D28 ; ---------------------------------------------------------------------------
.text:00406D28
.text:00406D28 loc_406D28:                             ; CODE XREF: SimConnect_CompleteCustomMissionAction+4E↑j
.text:00406D28                 cmp     eax, 2
.text:00406D2B                 jnz     short loc_406D66
.text:00406D2D                 test    esi, esi
.text:00406D2F                 jz      short loc_406D36
.text:00406D31                 mov     edi, [esi+14h]
.text:00406D34                 jmp     short loc_406D39
.text:00406D36 ; ---------------------------------------------------------------------------
.text:00406D36
.text:00406D36 loc_406D36:                             ; CODE XREF: SimConnect_CompleteCustomMissionAction+6F↑j
.text:00406D36                 mov     edi, [ebp+var_18]
.text:00406D39
.text:00406D39 loc_406D39:                             ; CODE XREF: SimConnect_CompleteCustomMissionAction+74↑j
.text:00406D39                 test    edi, edi
.text:00406D3B                 jl      short loc_406D66
.text:00406D3D
.text:00406D3D loc_406D3D:                             ; CODE XREF: SimConnect_CompleteCustomMissionAction+66↑j
.text:00406D3D                 test    esi, esi
.text:00406D3F                 mov     edx, [ebp+var_10]
.text:00406D42                 mov     eax, [ebp+var_C]
.text:00406D45                 mov     [ecx+10h], ebx
.text:00406D48                 mov     [ecx+14h], edx
.text:00406D4B                 mov     edx, [ebp+var_8]
.text:00406D4E                 mov     [ecx+18h], eax
.text:00406D51                 mov     [ecx+1Ch], edx
.text:00406D54                 jz      short loc_406D76
.text:00406D56                 cmp     byte ptr [esi+1E0h], 0
.text:00406D5D                 jz      short loc_406D76
.text:00406D5F                 call    sub_403E40
.text:00406D64                 jmp     short loc_406D76
.text:00406D66 ; ---------------------------------------------------------------------------
.text:00406D66
.text:00406D66 loc_406D66:                             ; CODE XREF: SimConnect_CompleteCustomMissionAction+6B↑j
.text:00406D66                                         ; SimConnect_CompleteCustomMissionAction+7B↑j
.text:00406D66                 mov     eax, [ebp+var_18]
.text:00406D69                 test    eax, eax
.text:00406D6B                 jz      short loc_406D76
.text:00406D6D                 push    20h ; ' '       ; Size
.text:00406D6F                 push    eax             ; void *
.text:00406D70                 push    esi             ; int
.text:00406D71                 call    sub_403D30
.text:00406D76
.text:00406D76 loc_406D76:                             ; CODE XREF: SimConnect_CompleteCustomMissionAction+94↑j
.text:00406D76                                         ; SimConnect_CompleteCustomMissionAction+9D↑j ...
.text:00406D76                 mov     ecx, [ebp+var_4]
.text:00406D79                 mov     eax, edi
.text:00406D7B                 pop     edi
.text:00406D7C                 pop     esi
.text:00406D7D                 xor     ecx, ebp        ; StackCookie
.text:00406D7F                 pop     ebx
.text:00406D80                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00406D85                 mov     esp, ebp
.text:00406D87                 pop     ebp
.text:00406D88                 retn    14h
.text:00406D88 SimConnect_CompleteCustomMissionAction endp
.text:00406D88
.text:00406D88 ; ---------------------------------------------------------------------------
.text:00406D8B                 align 10h
.text:00406D90 ; Exported entry  12. SimConnect_CameraSetRelative6DOF
.text:00406D90
.text:00406D90 ; =============== S U B R O U T I N E =======================================
.text:00406D90
.text:00406D90 ; Attributes: bp-based frame
.text:00406D90
.text:00406D90 ; int __stdcall SimConnect_CameraSetRelative6DOF(int, float, float, float, float, float, float)
.text:00406D90                 public SimConnect_CameraSetRelative6DOF
.text:00406D90 SimConnect_CameraSetRelative6DOF proc near
.text:00406D90                                         ; DATA XREF: .text:off_409FB8↓o
.text:00406D90
.text:00406D90 var_4           = dword ptr -4
.text:00406D90 arg_0           = dword ptr  8
.text:00406D90 arg_4           = dword ptr  0Ch
.text:00406D90 arg_8           = dword ptr  10h
.text:00406D90 arg_C           = dword ptr  14h
.text:00406D90 arg_10          = dword ptr  18h
.text:00406D90 arg_14          = dword ptr  1Ch
.text:00406D90 arg_18          = dword ptr  20h
.text:00406D90
.text:00406D90                 mov     edi, edi
.text:00406D92                 push    ebp
.text:00406D93                 mov     ebp, esp
.text:00406D95                 push    ecx
.text:00406D96                 push    esi
.text:00406D97                 mov     esi, [ebp+arg_0]
.text:00406D9A                 push    edi
.text:00406D9B                 lea     eax, [ebp+var_4]
.text:00406D9E                 push    eax
.text:00406D9F                 mov     eax, 28h ; '('
.text:00406DA4                 mov     ecx, esi
.text:00406DA6                 mov     [ebp+var_4], 0
.text:00406DAD                 mov     edi, 80004005h
.text:00406DB2                 call    sub_403C30
.text:00406DB7                 test    eax, eax
.text:00406DB9                 mov     ecx, [ebp+var_4]
.text:00406DBC                 jnz     short loc_406DD6
.text:00406DBE                 mov     dword ptr [ecx], 28h ; '('
.text:00406DC4                 mov     dword ptr [ecx+8], 0F0000030h
.text:00406DCB                 mov     dword ptr [ecx+4], 4
.text:00406DD2                 xor     edi, edi
.text:00406DD4                 jmp     short loc_406DEB
.text:00406DD6 ; ---------------------------------------------------------------------------
.text:00406DD6
.text:00406DD6 loc_406DD6:                             ; CODE XREF: SimConnect_CameraSetRelative6DOF+2C↑j
.text:00406DD6                 cmp     eax, 2
.text:00406DD9                 jnz     short loc_406E2B
.text:00406DDB                 test    esi, esi
.text:00406DDD                 jz      short loc_406DE4
.text:00406DDF                 mov     edi, [esi+14h]
.text:00406DE2                 jmp     short loc_406DE7
.text:00406DE4 ; ---------------------------------------------------------------------------
.text:00406DE4
.text:00406DE4 loc_406DE4:                             ; CODE XREF: SimConnect_CameraSetRelative6DOF+4D↑j
.text:00406DE4                 mov     edi, [ebp+arg_0]
.text:00406DE7
.text:00406DE7 loc_406DE7:                             ; CODE XREF: SimConnect_CameraSetRelative6DOF+52↑j
.text:00406DE7                 test    edi, edi
.text:00406DE9                 jl      short loc_406E2B
.text:00406DEB
.text:00406DEB loc_406DEB:                             ; CODE XREF: SimConnect_CameraSetRelative6DOF+44↑j
.text:00406DEB                 test    esi, esi
.text:00406DED                 fld     [ebp+arg_4]
.text:00406DF0                 fstp    dword ptr [ecx+10h]
.text:00406DF3                 fld     [ebp+arg_8]
.text:00406DF6                 fstp    dword ptr [ecx+14h]
.text:00406DF9                 fld     [ebp+arg_C]
.text:00406DFC                 fstp    dword ptr [ecx+18h]
.text:00406DFF                 fld     [ebp+arg_10]
.text:00406E02                 fstp    dword ptr [ecx+1Ch]
.text:00406E05                 fld     [ebp+arg_14]
.text:00406E08                 fstp    dword ptr [ecx+20h]
.text:00406E0B                 fld     [ebp+arg_18]
.text:00406E0E                 fstp    dword ptr [ecx+24h]
.text:00406E11                 jz      short loc_406E3B
.text:00406E13                 cmp     byte ptr [esi+1E0h], 0
.text:00406E1A                 jz      short loc_406E3B
.text:00406E1C                 call    sub_403E40
.text:00406E21                 mov     eax, edi
.text:00406E23                 pop     edi
.text:00406E24                 pop     esi
.text:00406E25                 mov     esp, ebp
.text:00406E27                 pop     ebp
.text:00406E28                 retn    1Ch
.text:00406E2B ; ---------------------------------------------------------------------------
.text:00406E2B
.text:00406E2B loc_406E2B:                             ; CODE XREF: SimConnect_CameraSetRelative6DOF+49↑j
.text:00406E2B                                         ; SimConnect_CameraSetRelative6DOF+59↑j
.text:00406E2B                 mov     eax, [ebp+var_4]
.text:00406E2E                 test    eax, eax
.text:00406E30                 jz      short loc_406E3B
.text:00406E32                 push    28h ; '('       ; Size
.text:00406E34                 push    eax             ; void *
.text:00406E35                 push    esi             ; int
.text:00406E36                 call    sub_403D30
.text:00406E3B
.text:00406E3B loc_406E3B:                             ; CODE XREF: SimConnect_CameraSetRelative6DOF+81↑j
.text:00406E3B                                         ; SimConnect_CameraSetRelative6DOF+8A↑j ...
.text:00406E3B                 mov     eax, edi
.text:00406E3D                 pop     edi
.text:00406E3E                 pop     esi
.text:00406E3F                 mov     esp, ebp
.text:00406E41                 pop     ebp
.text:00406E42                 retn    1Ch
.text:00406E42 SimConnect_CameraSetRelative6DOF endp
.text:00406E42
.text:00406E42 ; ---------------------------------------------------------------------------
.text:00406E45                 align 10h
.text:00406E50 ; Exported entry  30. SimConnect_MenuAddItem
.text:00406E50
.text:00406E50 ; =============== S U B R O U T I N E =======================================
.text:00406E50
.text:00406E50 ; Attributes: bp-based frame
.text:00406E50
.text:00406E50                 public SimConnect_MenuAddItem
.text:00406E50 SimConnect_MenuAddItem proc near        ; DATA XREF: .text:off_409FB8↓o
.text:00406E50
.text:00406E50 var_4           = dword ptr -4
.text:00406E50 arg_0           = dword ptr  8
.text:00406E50 arg_4           = dword ptr  0Ch
.text:00406E50 arg_8           = dword ptr  10h
.text:00406E50 arg_C           = dword ptr  14h
.text:00406E50
.text:00406E50                 mov     edi, edi
.text:00406E52                 push    ebp
.text:00406E53                 mov     ebp, esp
.text:00406E55                 push    ecx
.text:00406E56                 push    ebx
.text:00406E57                 mov     ebx, [ebp+arg_0]
.text:00406E5A                 push    esi
.text:00406E5B                 push    edi
.text:00406E5C                 lea     eax, [ebp+var_4]
.text:00406E5F                 push    eax
.text:00406E60                 mov     eax, 118h
.text:00406E65                 mov     ecx, ebx
.text:00406E67                 mov     [ebp+var_4], 0
.text:00406E6E                 mov     esi, 80004005h
.text:00406E73                 call    sub_403C30
.text:00406E78                 test    eax, eax
.text:00406E7A                 mov     edi, [ebp+var_4]
.text:00406E7D                 jnz     short loc_406E97
.text:00406E7F                 mov     dword ptr [edi], 118h
.text:00406E85                 mov     dword ptr [edi+8], 0F0000031h
.text:00406E8C                 mov     dword ptr [edi+4], 4
.text:00406E93                 xor     esi, esi
.text:00406E95                 jmp     short loc_406EA8
.text:00406E97 ; ---------------------------------------------------------------------------
.text:00406E97
.text:00406E97 loc_406E97:                             ; CODE XREF: SimConnect_MenuAddItem+2D↑j
.text:00406E97                 cmp     eax, 2
.text:00406E9A                 jnz     short loc_406EA8
.text:00406E9C                 test    ebx, ebx
.text:00406E9E                 jz      short loc_406EA5
.text:00406EA0                 mov     esi, [ebx+14h]
.text:00406EA3                 jmp     short loc_406EA8
.text:00406EA5 ; ---------------------------------------------------------------------------
.text:00406EA5
.text:00406EA5 loc_406EA5:                             ; CODE XREF: SimConnect_MenuAddItem+4E↑j
.text:00406EA5                 mov     esi, [ebp+arg_0]
.text:00406EA8
.text:00406EA8 loc_406EA8:                             ; CODE XREF: SimConnect_MenuAddItem+45↑j
.text:00406EA8                                         ; SimConnect_MenuAddItem+4A↑j ...
.text:00406EA8                 test    esi, esi
.text:00406EAA                 mov     ebx, esi
.text:00406EAC                 jl      short loc_406EC8
.text:00406EAE                 mov     eax, [ebp+arg_4]
.text:00406EB1                 test    eax, eax
.text:00406EB3                 jz      short loc_406EE6
.text:00406EB5                 lea     edx, [edi+10h]
.text:00406EB8                 mov     ecx, 100h
.text:00406EBD                 call    sub_402580
.text:00406EC2                 mov     ebx, eax
.text:00406EC4                 test    ebx, ebx
.text:00406EC6                 jge     short loc_406EEA
.text:00406EC8
.text:00406EC8 loc_406EC8:                             ; CODE XREF: SimConnect_MenuAddItem+5C↑j
.text:00406EC8                 test    edi, edi
.text:00406ECA                 jz      short loc_406EDB
.text:00406ECC                 mov     eax, [ebp+arg_0]
.text:00406ECF                 push    118h            ; Size
.text:00406ED4                 push    edi             ; void *
.text:00406ED5                 push    eax             ; int
.text:00406ED6                 call    sub_403D30
.text:00406EDB
.text:00406EDB loc_406EDB:                             ; CODE XREF: SimConnect_MenuAddItem+7A↑j
.text:00406EDB                                         ; SimConnect_MenuAddItem+B1↓j ...
.text:00406EDB                 pop     edi
.text:00406EDC                 pop     esi
.text:00406EDD                 mov     eax, ebx
.text:00406EDF                 pop     ebx
.text:00406EE0                 mov     esp, ebp
.text:00406EE2                 pop     ebp
.text:00406EE3                 retn    10h
.text:00406EE6 ; ---------------------------------------------------------------------------
.text:00406EE6
.text:00406EE6 loc_406EE6:                             ; CODE XREF: SimConnect_MenuAddItem+63↑j
.text:00406EE6                 mov     byte ptr [edi+10h], 0
.text:00406EEA
.text:00406EEA loc_406EEA:                             ; CODE XREF: SimConnect_MenuAddItem+76↑j
.text:00406EEA                 mov     ecx, [ebp+arg_8]
.text:00406EED                 mov     esi, [ebp+arg_0]
.text:00406EF0                 test    esi, esi
.text:00406EF2                 mov     edx, [ebp+arg_C]
.text:00406EF5                 mov     [edi+110h], ecx
.text:00406EFB                 mov     [edi+114h], edx
.text:00406F01                 jz      short loc_406EDB
.text:00406F03                 cmp     byte ptr [esi+1E0h], 0
.text:00406F0A                 jz      short loc_406EDB
.text:00406F0C                 call    sub_403E40
.text:00406F11                 pop     edi
.text:00406F12                 pop     esi
.text:00406F13                 mov     eax, ebx
.text:00406F15                 pop     ebx
.text:00406F16                 mov     esp, ebp
.text:00406F18                 pop     ebp
.text:00406F19                 retn    10h
.text:00406F19 SimConnect_MenuAddItem endp
.text:00406F19
.text:00406F19 ; ---------------------------------------------------------------------------
.text:00406F1C                 db 14h dup(0CCh)
.text:00406F30 ; Exported entry  32. SimConnect_MenuDeleteItem
.text:00406F30
.text:00406F30 ; =============== S U B R O U T I N E =======================================
.text:00406F30
.text:00406F30 ; Attributes: bp-based frame
.text:00406F30
.text:00406F30                 public SimConnect_MenuDeleteItem
.text:00406F30 SimConnect_MenuDeleteItem proc near     ; DATA XREF: .text:off_409FB8↓o
.text:00406F30
.text:00406F30 var_4           = dword ptr -4
.text:00406F30 arg_0           = dword ptr  8
.text:00406F30 arg_4           = dword ptr  0Ch
.text:00406F30
.text:00406F30                 mov     edi, edi
.text:00406F32                 push    ebp
.text:00406F33                 mov     ebp, esp
.text:00406F35                 push    ecx
.text:00406F36                 push    esi
.text:00406F37                 mov     esi, [ebp+arg_0]
.text:00406F3A                 push    edi
.text:00406F3B                 lea     eax, [ebp+var_4]
.text:00406F3E                 push    eax
.text:00406F3F                 mov     eax, 14h
.text:00406F44                 mov     ecx, esi
.text:00406F46                 mov     [ebp+var_4], 0
.text:00406F4D                 mov     edi, 80004005h
.text:00406F52                 call    sub_403C30
.text:00406F57                 test    eax, eax
.text:00406F59                 mov     ecx, [ebp+var_4]
.text:00406F5C                 jnz     short loc_406F76
.text:00406F5E                 mov     dword ptr [ecx], 14h
.text:00406F64                 mov     dword ptr [ecx+8], 0F0000032h
.text:00406F6B                 mov     dword ptr [ecx+4], 4
.text:00406F72                 xor     edi, edi
.text:00406F74                 jmp     short loc_406F8B
.text:00406F76 ; ---------------------------------------------------------------------------
.text:00406F76
.text:00406F76 loc_406F76:                             ; CODE XREF: SimConnect_MenuDeleteItem+2C↑j
.text:00406F76                 cmp     eax, 2
.text:00406F79                 jnz     short loc_406FAD
.text:00406F7B                 test    esi, esi
.text:00406F7D                 jz      short loc_406F84
.text:00406F7F                 mov     edi, [esi+14h]
.text:00406F82                 jmp     short loc_406F87
.text:00406F84 ; ---------------------------------------------------------------------------
.text:00406F84
.text:00406F84 loc_406F84:                             ; CODE XREF: SimConnect_MenuDeleteItem+4D↑j
.text:00406F84                 mov     edi, [ebp+arg_0]
.text:00406F87
.text:00406F87 loc_406F87:                             ; CODE XREF: SimConnect_MenuDeleteItem+52↑j
.text:00406F87                 test    edi, edi
.text:00406F89                 jl      short loc_406FAD
.text:00406F8B
.text:00406F8B loc_406F8B:                             ; CODE XREF: SimConnect_MenuDeleteItem+44↑j
.text:00406F8B                 test    esi, esi
.text:00406F8D                 mov     edx, [ebp+arg_4]
.text:00406F90                 mov     [ecx+10h], edx
.text:00406F93                 jz      short loc_406FBD
.text:00406F95                 cmp     byte ptr [esi+1E0h], 0
.text:00406F9C                 jz      short loc_406FBD
.text:00406F9E                 call    sub_403E40
.text:00406FA3                 mov     eax, edi
.text:00406FA5                 pop     edi
.text:00406FA6                 pop     esi
.text:00406FA7                 mov     esp, ebp
.text:00406FA9                 pop     ebp
.text:00406FAA                 retn    8
.text:00406FAD ; ---------------------------------------------------------------------------
.text:00406FAD
.text:00406FAD loc_406FAD:                             ; CODE XREF: SimConnect_MenuDeleteItem+49↑j
.text:00406FAD                                         ; SimConnect_MenuDeleteItem+59↑j
.text:00406FAD                 mov     eax, [ebp+var_4]
.text:00406FB0                 test    eax, eax
.text:00406FB2                 jz      short loc_406FBD
.text:00406FB4                 push    14h             ; Size
.text:00406FB6                 push    eax             ; void *
.text:00406FB7                 push    esi             ; int
.text:00406FB8                 call    sub_403D30
.text:00406FBD
.text:00406FBD loc_406FBD:                             ; CODE XREF: SimConnect_MenuDeleteItem+63↑j
.text:00406FBD                                         ; SimConnect_MenuDeleteItem+6C↑j ...
.text:00406FBD                 mov     eax, edi
.text:00406FBF                 pop     edi
.text:00406FC0                 pop     esi
.text:00406FC1                 mov     esp, ebp
.text:00406FC3                 pop     ebp
.text:00406FC4                 retn    8
.text:00406FC4 SimConnect_MenuDeleteItem endp
.text:00406FC4
.text:00406FC4 ; ---------------------------------------------------------------------------
.text:00406FC7                 align 10h
.text:00406FD0 ; Exported entry  31. SimConnect_MenuAddSubItem
.text:00406FD0
.text:00406FD0 ; =============== S U B R O U T I N E =======================================
.text:00406FD0
.text:00406FD0 ; Attributes: bp-based frame
.text:00406FD0
.text:00406FD0                 public SimConnect_MenuAddSubItem
.text:00406FD0 SimConnect_MenuAddSubItem proc near     ; DATA XREF: .text:off_409FB8↓o
.text:00406FD0
.text:00406FD0 var_4           = dword ptr -4
.text:00406FD0 arg_0           = dword ptr  8
.text:00406FD0 arg_4           = dword ptr  0Ch
.text:00406FD0 arg_8           = dword ptr  10h
.text:00406FD0 arg_C           = dword ptr  14h
.text:00406FD0 arg_10          = dword ptr  18h
.text:00406FD0
.text:00406FD0                 mov     edi, edi
.text:00406FD2                 push    ebp
.text:00406FD3                 mov     ebp, esp
.text:00406FD5                 push    ecx
.text:00406FD6                 push    ebx
.text:00406FD7                 mov     ebx, [ebp+arg_0]
.text:00406FDA                 push    esi
.text:00406FDB                 push    edi
.text:00406FDC                 lea     eax, [ebp+var_4]
.text:00406FDF                 push    eax
.text:00406FE0                 mov     eax, 11Ch
.text:00406FE5                 mov     ecx, ebx
.text:00406FE7                 mov     [ebp+var_4], 0
.text:00406FEE                 mov     esi, 80004005h
.text:00406FF3                 call    sub_403C30
.text:00406FF8                 test    eax, eax
.text:00406FFA                 mov     edi, [ebp+var_4]
.text:00406FFD                 jnz     short loc_407017
.text:00406FFF                 mov     dword ptr [edi], 11Ch
.text:00407005                 mov     dword ptr [edi+8], 0F0000033h
.text:0040700C                 mov     dword ptr [edi+4], 4
.text:00407013                 xor     esi, esi
.text:00407015                 jmp     short loc_407028
.text:00407017 ; ---------------------------------------------------------------------------
.text:00407017
.text:00407017 loc_407017:                             ; CODE XREF: SimConnect_MenuAddSubItem+2D↑j
.text:00407017                 cmp     eax, 2
.text:0040701A                 jnz     short loc_407028
.text:0040701C                 test    ebx, ebx
.text:0040701E                 jz      short loc_407025
.text:00407020                 mov     esi, [ebx+14h]
.text:00407023                 jmp     short loc_407028
.text:00407025 ; ---------------------------------------------------------------------------
.text:00407025
.text:00407025 loc_407025:                             ; CODE XREF: SimConnect_MenuAddSubItem+4E↑j
.text:00407025                 mov     esi, [ebp+arg_0]
.text:00407028
.text:00407028 loc_407028:                             ; CODE XREF: SimConnect_MenuAddSubItem+45↑j
.text:00407028                                         ; SimConnect_MenuAddSubItem+4A↑j ...
.text:00407028                 test    esi, esi
.text:0040702A                 mov     ebx, esi
.text:0040702C                 jl      short loc_40704E
.text:0040702E                 mov     eax, [ebp+arg_8]
.text:00407031                 test    eax, eax
.text:00407033                 mov     ecx, [ebp+arg_4]
.text:00407036                 mov     [edi+10h], ecx
.text:00407039                 jz      short loc_40706C
.text:0040703B                 lea     edx, [edi+14h]
.text:0040703E                 mov     ecx, 100h
.text:00407043                 call    sub_402580
.text:00407048                 mov     ebx, eax
.text:0040704A                 test    ebx, ebx
.text:0040704C                 jge     short loc_407070
.text:0040704E
.text:0040704E loc_40704E:                             ; CODE XREF: SimConnect_MenuAddSubItem+5C↑j
.text:0040704E                 test    edi, edi
.text:00407050                 jz      short loc_407061
.text:00407052                 mov     ecx, [ebp+arg_0]
.text:00407055                 push    11Ch            ; Size
.text:0040705A                 push    edi             ; void *
.text:0040705B                 push    ecx             ; int
.text:0040705C                 call    sub_403D30
.text:00407061
.text:00407061 loc_407061:                             ; CODE XREF: SimConnect_MenuAddSubItem+80↑j
.text:00407061                                         ; SimConnect_MenuAddSubItem+B7↓j ...
.text:00407061                 pop     edi
.text:00407062                 pop     esi
.text:00407063                 mov     eax, ebx
.text:00407065                 pop     ebx
.text:00407066                 mov     esp, ebp
.text:00407068                 pop     ebp
.text:00407069                 retn    14h
.text:0040706C ; ---------------------------------------------------------------------------
.text:0040706C
.text:0040706C loc_40706C:                             ; CODE XREF: SimConnect_MenuAddSubItem+69↑j
.text:0040706C                 mov     byte ptr [edi+14h], 0
.text:00407070
.text:00407070 loc_407070:                             ; CODE XREF: SimConnect_MenuAddSubItem+7C↑j
.text:00407070                 mov     edx, [ebp+arg_C]
.text:00407073                 mov     esi, [ebp+arg_0]
.text:00407076                 test    esi, esi
.text:00407078                 mov     eax, [ebp+arg_10]
.text:0040707B                 mov     [edi+114h], edx
.text:00407081                 mov     [edi+118h], eax
.text:00407087                 jz      short loc_407061
.text:00407089                 cmp     byte ptr [esi+1E0h], 0
.text:00407090                 jz      short loc_407061
.text:00407092                 call    sub_403E40
.text:00407097                 pop     edi
.text:00407098                 pop     esi
.text:00407099                 mov     eax, ebx
.text:0040709B                 pop     ebx
.text:0040709C                 mov     esp, ebp
.text:0040709E                 pop     ebp
.text:0040709F                 retn    14h
.text:0040709F SimConnect_MenuAddSubItem endp
.text:0040709F
.text:0040709F ; ---------------------------------------------------------------------------
.text:004070A2                 align 10h
.text:004070B0 ; Exported entry  33. SimConnect_MenuDeleteSubItem
.text:004070B0
.text:004070B0 ; =============== S U B R O U T I N E =======================================
.text:004070B0
.text:004070B0 ; Attributes: bp-based frame
.text:004070B0
.text:004070B0                 public SimConnect_MenuDeleteSubItem
.text:004070B0 SimConnect_MenuDeleteSubItem proc near  ; DATA XREF: .text:off_409FB8↓o
.text:004070B0
.text:004070B0 var_4           = dword ptr -4
.text:004070B0 arg_0           = dword ptr  8
.text:004070B0 arg_4           = dword ptr  0Ch
.text:004070B0 arg_8           = dword ptr  10h
.text:004070B0
.text:004070B0                 mov     edi, edi
.text:004070B2                 push    ebp
.text:004070B3                 mov     ebp, esp
.text:004070B5                 push    ecx
.text:004070B6                 push    esi
.text:004070B7                 mov     esi, [ebp+arg_0]
.text:004070BA                 push    edi
.text:004070BB                 lea     eax, [ebp+var_4]
.text:004070BE                 push    eax
.text:004070BF                 mov     eax, 18h
.text:004070C4                 mov     ecx, esi
.text:004070C6                 mov     [ebp+var_4], 0
.text:004070CD                 mov     edi, 80004005h
.text:004070D2                 call    sub_403C30
.text:004070D7                 test    eax, eax
.text:004070D9                 mov     ecx, [ebp+var_4]
.text:004070DC                 jnz     short loc_4070F6
.text:004070DE                 mov     dword ptr [ecx], 18h
.text:004070E4                 mov     dword ptr [ecx+8], 0F0000034h
.text:004070EB                 mov     dword ptr [ecx+4], 4
.text:004070F2                 xor     edi, edi
.text:004070F4                 jmp     short loc_40710B
.text:004070F6 ; ---------------------------------------------------------------------------
.text:004070F6
.text:004070F6 loc_4070F6:                             ; CODE XREF: SimConnect_MenuDeleteSubItem+2C↑j
.text:004070F6                 cmp     eax, 2
.text:004070F9                 jnz     short loc_407133
.text:004070FB                 test    esi, esi
.text:004070FD                 jz      short loc_407104
.text:004070FF                 mov     edi, [esi+14h]
.text:00407102                 jmp     short loc_407107
.text:00407104 ; ---------------------------------------------------------------------------
.text:00407104
.text:00407104 loc_407104:                             ; CODE XREF: SimConnect_MenuDeleteSubItem+4D↑j
.text:00407104                 mov     edi, [ebp+arg_0]
.text:00407107
.text:00407107 loc_407107:                             ; CODE XREF: SimConnect_MenuDeleteSubItem+52↑j
.text:00407107                 test    edi, edi
.text:00407109                 jl      short loc_407133
.text:0040710B
.text:0040710B loc_40710B:                             ; CODE XREF: SimConnect_MenuDeleteSubItem+44↑j
.text:0040710B                 test    esi, esi
.text:0040710D                 mov     edx, [ebp+arg_4]
.text:00407110                 mov     eax, [ebp+arg_8]
.text:00407113                 mov     [ecx+10h], edx
.text:00407116                 mov     [ecx+14h], eax
.text:00407119                 jz      short loc_407143
.text:0040711B                 cmp     byte ptr [esi+1E0h], 0
.text:00407122                 jz      short loc_407143
.text:00407124                 call    sub_403E40
.text:00407129                 mov     eax, edi
.text:0040712B                 pop     edi
.text:0040712C                 pop     esi
.text:0040712D                 mov     esp, ebp
.text:0040712F                 pop     ebp
.text:00407130                 retn    0Ch
.text:00407133 ; ---------------------------------------------------------------------------
.text:00407133
.text:00407133 loc_407133:                             ; CODE XREF: SimConnect_MenuDeleteSubItem+49↑j
.text:00407133                                         ; SimConnect_MenuDeleteSubItem+59↑j
.text:00407133                 mov     eax, [ebp+var_4]
.text:00407136                 test    eax, eax
.text:00407138                 jz      short loc_407143
.text:0040713A                 push    18h             ; Size
.text:0040713C                 push    eax             ; void *
.text:0040713D                 push    esi             ; int
.text:0040713E                 call    sub_403D30
.text:00407143
.text:00407143 loc_407143:                             ; CODE XREF: SimConnect_MenuDeleteSubItem+69↑j
.text:00407143                                         ; SimConnect_MenuDeleteSubItem+72↑j ...
.text:00407143                 mov     eax, edi
.text:00407145                 pop     edi
.text:00407146                 pop     esi
.text:00407147                 mov     esp, ebp
.text:00407149                 pop     ebp
.text:0040714A                 retn    0Ch
.text:0040714A SimConnect_MenuDeleteSubItem endp
.text:0040714A
.text:0040714A ; ---------------------------------------------------------------------------
.text:0040714D                 align 20h
.text:00407160 ; Exported entry  44. SimConnect_RequestSystemState
.text:00407160
.text:00407160 ; =============== S U B R O U T I N E =======================================
.text:00407160
.text:00407160 ; Attributes: bp-based frame
.text:00407160
.text:00407160                 public SimConnect_RequestSystemState
.text:00407160 SimConnect_RequestSystemState proc near ; DATA XREF: .text:off_409FB8↓o
.text:00407160
.text:00407160 var_4           = dword ptr -4
.text:00407160 arg_0           = dword ptr  8
.text:00407160 arg_4           = dword ptr  0Ch
.text:00407160 arg_8           = dword ptr  10h
.text:00407160
.text:00407160                 mov     edi, edi
.text:00407162                 push    ebp
.text:00407163                 mov     ebp, esp
.text:00407165                 push    ecx
.text:00407166                 push    ebx
.text:00407167                 mov     ebx, [ebp+arg_0]
.text:0040716A                 push    esi
.text:0040716B                 push    edi
.text:0040716C                 lea     eax, [ebp+var_4]
.text:0040716F                 push    eax
.text:00407170                 mov     eax, 114h
.text:00407175                 mov     ecx, ebx
.text:00407177                 mov     [ebp+var_4], 0
.text:0040717E                 mov     esi, 80004005h
.text:00407183                 call    sub_403C30
.text:00407188                 test    eax, eax
.text:0040718A                 mov     edi, [ebp+var_4]
.text:0040718D                 jnz     short loc_4071A7
.text:0040718F                 mov     dword ptr [edi], 114h
.text:00407195                 mov     dword ptr [edi+8], 0F0000035h
.text:0040719C                 mov     dword ptr [edi+4], 4
.text:004071A3                 xor     esi, esi
.text:004071A5                 jmp     short loc_4071B8
.text:004071A7 ; ---------------------------------------------------------------------------
.text:004071A7
.text:004071A7 loc_4071A7:                             ; CODE XREF: SimConnect_RequestSystemState+2D↑j
.text:004071A7                 cmp     eax, 2
.text:004071AA                 jnz     short loc_4071B8
.text:004071AC                 test    ebx, ebx
.text:004071AE                 jz      short loc_4071B5
.text:004071B0                 mov     esi, [ebx+14h]
.text:004071B3                 jmp     short loc_4071B8
.text:004071B5 ; ---------------------------------------------------------------------------
.text:004071B5
.text:004071B5 loc_4071B5:                             ; CODE XREF: SimConnect_RequestSystemState+4E↑j
.text:004071B5                 mov     esi, [ebp+arg_0]
.text:004071B8
.text:004071B8 loc_4071B8:                             ; CODE XREF: SimConnect_RequestSystemState+45↑j
.text:004071B8                                         ; SimConnect_RequestSystemState+4A↑j ...
.text:004071B8                 test    esi, esi
.text:004071BA                 mov     ebx, esi
.text:004071BC                 jl      short loc_4071DE
.text:004071BE                 mov     eax, [ebp+arg_8]
.text:004071C1                 test    eax, eax
.text:004071C3                 mov     ecx, [ebp+arg_4]
.text:004071C6                 mov     [edi+10h], ecx
.text:004071C9                 jz      short loc_4071FC
.text:004071CB                 lea     edx, [edi+14h]
.text:004071CE                 mov     ecx, 100h
.text:004071D3                 call    sub_402580
.text:004071D8                 mov     ebx, eax
.text:004071DA                 test    ebx, ebx
.text:004071DC                 jge     short loc_407200
.text:004071DE
.text:004071DE loc_4071DE:                             ; CODE XREF: SimConnect_RequestSystemState+5C↑j
.text:004071DE                 test    edi, edi
.text:004071E0                 jz      short loc_4071F1
.text:004071E2                 mov     edx, [ebp+arg_0]
.text:004071E5                 push    114h            ; Size
.text:004071EA                 push    edi             ; void *
.text:004071EB                 push    edx             ; int
.text:004071EC                 call    sub_403D30
.text:004071F1
.text:004071F1 loc_4071F1:                             ; CODE XREF: SimConnect_RequestSystemState+80↑j
.text:004071F1                                         ; SimConnect_RequestSystemState+A5↓j ...
.text:004071F1                 pop     edi
.text:004071F2                 pop     esi
.text:004071F3                 mov     eax, ebx
.text:004071F5                 pop     ebx
.text:004071F6                 mov     esp, ebp
.text:004071F8                 pop     ebp
.text:004071F9                 retn    0Ch
.text:004071FC ; ---------------------------------------------------------------------------
.text:004071FC
.text:004071FC loc_4071FC:                             ; CODE XREF: SimConnect_RequestSystemState+69↑j
.text:004071FC                 mov     byte ptr [edi+14h], 0
.text:00407200
.text:00407200 loc_407200:                             ; CODE XREF: SimConnect_RequestSystemState+7C↑j
.text:00407200                 mov     esi, [ebp+arg_0]
.text:00407203                 test    esi, esi
.text:00407205                 jz      short loc_4071F1
.text:00407207                 cmp     byte ptr [esi+1E0h], 0
.text:0040720E                 jz      short loc_4071F1
.text:00407210                 call    sub_403E40
.text:00407215                 pop     edi
.text:00407216                 pop     esi
.text:00407217                 mov     eax, ebx
.text:00407219                 pop     ebx
.text:0040721A                 mov     esp, ebp
.text:0040721C                 pop     ebp
.text:0040721D                 retn    0Ch
.text:0040721D SimConnect_RequestSystemState endp
.text:0040721D
.text:0040721D ; ---------------------------------------------------------------------------
.text:00407220                 db 10h dup(0CCh)
.text:00407230 ; Exported entry  52. SimConnect_SetSystemState
.text:00407230
.text:00407230 ; =============== S U B R O U T I N E =======================================
.text:00407230
.text:00407230 ; Attributes: bp-based frame
.text:00407230
.text:00407230 ; int __stdcall SimConnect_SetSystemState(int, int, int, float, int)
.text:00407230                 public SimConnect_SetSystemState
.text:00407230 SimConnect_SetSystemState proc near     ; DATA XREF: .text:off_409FB8↓o
.text:00407230
.text:00407230 var_4           = dword ptr -4
.text:00407230 arg_0           = dword ptr  8
.text:00407230 arg_4           = dword ptr  0Ch
.text:00407230 arg_8           = dword ptr  10h
.text:00407230 arg_C           = dword ptr  14h
.text:00407230 arg_10          = dword ptr  18h
.text:00407230
.text:00407230                 mov     edi, edi
.text:00407232                 push    ebp
.text:00407233                 mov     ebp, esp
.text:00407235                 push    ecx
.text:00407236                 push    ebx
.text:00407237                 push    esi
.text:00407238                 mov     esi, [ebp+arg_0]
.text:0040723B                 push    edi
.text:0040723C                 lea     eax, [ebp+var_4]
.text:0040723F                 push    eax
.text:00407240                 mov     eax, 21Ch
.text:00407245                 mov     ecx, esi
.text:00407247                 mov     [ebp+var_4], 0
.text:0040724E                 mov     ebx, 80004005h
.text:00407253                 call    sub_403C30
.text:00407258                 test    eax, eax
.text:0040725A                 mov     edi, [ebp+var_4]
.text:0040725D                 jnz     short loc_407277
.text:0040725F                 mov     dword ptr [edi], 21Ch
.text:00407265                 mov     dword ptr [edi+8], 0F0000036h
.text:0040726C                 mov     dword ptr [edi+4], 4
.text:00407273                 xor     ebx, ebx
.text:00407275                 jmp     short loc_407288
.text:00407277 ; ---------------------------------------------------------------------------
.text:00407277
.text:00407277 loc_407277:                             ; CODE XREF: SimConnect_SetSystemState+2D↑j
.text:00407277                 cmp     eax, 2
.text:0040727A                 jnz     short loc_407288
.text:0040727C                 test    esi, esi
.text:0040727E                 jz      short loc_407285
.text:00407280                 mov     ebx, [esi+14h]
.text:00407283                 jmp     short loc_407288
.text:00407285 ; ---------------------------------------------------------------------------
.text:00407285
.text:00407285 loc_407285:                             ; CODE XREF: SimConnect_SetSystemState+4E↑j
.text:00407285                 mov     ebx, [ebp+arg_0]
.text:00407288
.text:00407288 loc_407288:                             ; CODE XREF: SimConnect_SetSystemState+45↑j
.text:00407288                                         ; SimConnect_SetSystemState+4A↑j ...
.text:00407288                 test    ebx, ebx
.text:0040728A                 jl      short loc_4072A6
.text:0040728C                 mov     eax, [ebp+arg_4]
.text:0040728F                 test    eax, eax
.text:00407291                 jz      short loc_4072C1
.text:00407293                 lea     edx, [edi+10h]
.text:00407296                 mov     ecx, 100h
.text:0040729B                 call    sub_402580
.text:004072A0                 mov     ebx, eax
.text:004072A2                 test    ebx, ebx
.text:004072A4                 jge     short loc_4072C5
.text:004072A6
.text:004072A6 loc_4072A6:                             ; CODE XREF: SimConnect_SetSystemState+5A↑j
.text:004072A6                                         ; SimConnect_SetSystemState+C2↓j
.text:004072A6                 test    edi, edi
.text:004072A8                 jz      short loc_4072B6
.text:004072AA                 push    21Ch            ; Size
.text:004072AF                 push    edi             ; void *
.text:004072B0                 push    esi             ; int
.text:004072B1                 call    sub_403D30
.text:004072B6
.text:004072B6 loc_4072B6:                             ; CODE XREF: SimConnect_SetSystemState+78↑j
.text:004072B6                                         ; SimConnect_SetSystemState+CF↓j ...
.text:004072B6                 pop     edi
.text:004072B7                 pop     esi
.text:004072B8                 mov     eax, ebx
.text:004072BA                 pop     ebx
.text:004072BB                 mov     esp, ebp
.text:004072BD                 pop     ebp
.text:004072BE                 retn    14h
.text:004072C1 ; ---------------------------------------------------------------------------
.text:004072C1
.text:004072C1 loc_4072C1:                             ; CODE XREF: SimConnect_SetSystemState+61↑j
.text:004072C1                 mov     byte ptr [edi+10h], 0
.text:004072C5
.text:004072C5 loc_4072C5:                             ; CODE XREF: SimConnect_SetSystemState+74↑j
.text:004072C5                 mov     ecx, [ebp+arg_8]
.text:004072C8                 fld     [ebp+arg_C]
.text:004072CB                 mov     eax, [ebp+arg_10]
.text:004072CE                 test    eax, eax
.text:004072D0                 mov     [edi+110h], ecx
.text:004072D6                 fstp    dword ptr [edi+114h]
.text:004072DC                 jz      short loc_4072F6
.text:004072DE                 lea     edx, [edi+118h]
.text:004072E4                 mov     ecx, 104h
.text:004072E9                 call    sub_402580
.text:004072EE                 mov     ebx, eax
.text:004072F0                 test    ebx, ebx
.text:004072F2                 jl      short loc_4072A6
.text:004072F4                 jmp     short loc_4072FD
.text:004072F6 ; ---------------------------------------------------------------------------
.text:004072F6
.text:004072F6 loc_4072F6:                             ; CODE XREF: SimConnect_SetSystemState+AC↑j
.text:004072F6                 mov     byte ptr [edi+118h], 0
.text:004072FD
.text:004072FD loc_4072FD:                             ; CODE XREF: SimConnect_SetSystemState+C4↑j
.text:004072FD                 test    esi, esi
.text:004072FF                 jz      short loc_4072B6
.text:00407301                 cmp     byte ptr [esi+1E0h], 0
.text:00407308                 jz      short loc_4072B6
.text:0040730A                 call    sub_403E40
.text:0040730F                 pop     edi
.text:00407310                 pop     esi
.text:00407311                 mov     eax, ebx
.text:00407313                 pop     ebx
.text:00407314                 mov     esp, ebp
.text:00407316                 pop     ebp
.text:00407317                 retn    14h
.text:00407317 SimConnect_SetSystemState endp
.text:00407317
.text:00407317 ; ---------------------------------------------------------------------------
.text:0040731A                 align 10h
.text:00407320 ; Exported entry  27. SimConnect_MapClientDataNameToID
.text:00407320
.text:00407320 ; =============== S U B R O U T I N E =======================================
.text:00407320
.text:00407320 ; Attributes: bp-based frame
.text:00407320
.text:00407320                 public SimConnect_MapClientDataNameToID
.text:00407320 SimConnect_MapClientDataNameToID proc near
.text:00407320                                         ; DATA XREF: .text:off_409FB8↓o
.text:00407320
.text:00407320 var_4           = dword ptr -4
.text:00407320 arg_0           = dword ptr  8
.text:00407320 arg_4           = dword ptr  0Ch
.text:00407320 arg_8           = dword ptr  10h
.text:00407320
.text:00407320                 mov     edi, edi
.text:00407322                 push    ebp
.text:00407323                 mov     ebp, esp
.text:00407325                 push    ecx
.text:00407326                 push    ebx
.text:00407327                 mov     ebx, [ebp+arg_0]
.text:0040732A                 push    esi
.text:0040732B                 push    edi
.text:0040732C                 lea     eax, [ebp+var_4]
.text:0040732F                 push    eax
.text:00407330                 mov     eax, 114h
.text:00407335                 mov     ecx, ebx
.text:00407337                 mov     [ebp+var_4], 0
.text:0040733E                 mov     esi, 80004005h
.text:00407343                 call    sub_403C30
.text:00407348                 test    eax, eax
.text:0040734A                 mov     edi, [ebp+var_4]
.text:0040734D                 jnz     short loc_407367
.text:0040734F                 mov     dword ptr [edi], 114h
.text:00407355                 mov     dword ptr [edi+8], 0F0000037h
.text:0040735C                 mov     dword ptr [edi+4], 4
.text:00407363                 xor     esi, esi
.text:00407365                 jmp     short loc_407378
.text:00407367 ; ---------------------------------------------------------------------------
.text:00407367
.text:00407367 loc_407367:                             ; CODE XREF: SimConnect_MapClientDataNameToID+2D↑j
.text:00407367                 cmp     eax, 2
.text:0040736A                 jnz     short loc_407378
.text:0040736C                 test    ebx, ebx
.text:0040736E                 jz      short loc_407375
.text:00407370                 mov     esi, [ebx+14h]
.text:00407373                 jmp     short loc_407378
.text:00407375 ; ---------------------------------------------------------------------------
.text:00407375
.text:00407375 loc_407375:                             ; CODE XREF: SimConnect_MapClientDataNameToID+4E↑j
.text:00407375                 mov     esi, [ebp+arg_0]
.text:00407378
.text:00407378 loc_407378:                             ; CODE XREF: SimConnect_MapClientDataNameToID+45↑j
.text:00407378                                         ; SimConnect_MapClientDataNameToID+4A↑j ...
.text:00407378                 test    esi, esi
.text:0040737A                 mov     ebx, esi
.text:0040737C                 jl      short loc_407398
.text:0040737E                 mov     eax, [ebp+arg_4]
.text:00407381                 test    eax, eax
.text:00407383                 jz      short loc_4073B6
.text:00407385                 lea     edx, [edi+10h]
.text:00407388                 mov     ecx, 100h
.text:0040738D                 call    sub_402580
.text:00407392                 mov     ebx, eax
.text:00407394                 test    ebx, ebx
.text:00407396                 jge     short loc_4073BA
.text:00407398
.text:00407398 loc_407398:                             ; CODE XREF: SimConnect_MapClientDataNameToID+5C↑j
.text:00407398                 test    edi, edi
.text:0040739A                 jz      short loc_4073AB
.text:0040739C                 mov     edx, [ebp+arg_0]
.text:0040739F                 push    114h            ; Size
.text:004073A4                 push    edi             ; void *
.text:004073A5                 push    edx             ; int
.text:004073A6                 call    sub_403D30
.text:004073AB
.text:004073AB loc_4073AB:                             ; CODE XREF: SimConnect_MapClientDataNameToID+7A↑j
.text:004073AB                                         ; SimConnect_MapClientDataNameToID+A8↓j ...
.text:004073AB                 pop     edi
.text:004073AC                 pop     esi
.text:004073AD                 mov     eax, ebx
.text:004073AF                 pop     ebx
.text:004073B0                 mov     esp, ebp
.text:004073B2                 pop     ebp
.text:004073B3                 retn    0Ch
.text:004073B6 ; ---------------------------------------------------------------------------
.text:004073B6
.text:004073B6 loc_4073B6:                             ; CODE XREF: SimConnect_MapClientDataNameToID+63↑j
.text:004073B6                 mov     byte ptr [edi+10h], 0
.text:004073BA
.text:004073BA loc_4073BA:                             ; CODE XREF: SimConnect_MapClientDataNameToID+76↑j
.text:004073BA                 mov     esi, [ebp+arg_0]
.text:004073BD                 test    esi, esi
.text:004073BF                 mov     ecx, [ebp+arg_8]
.text:004073C2                 mov     [edi+110h], ecx
.text:004073C8                 jz      short loc_4073AB
.text:004073CA                 cmp     byte ptr [esi+1E0h], 0
.text:004073D1                 jz      short loc_4073AB
.text:004073D3                 call    sub_403E40
.text:004073D8                 pop     edi
.text:004073D9                 pop     esi
.text:004073DA                 mov     eax, ebx
.text:004073DC                 pop     ebx
.text:004073DD                 mov     esp, ebp
.text:004073DF                 pop     ebp
.text:004073E0                 retn    0Ch
.text:004073E0 SimConnect_MapClientDataNameToID endp
.text:004073E0
.text:004073E0 ; ---------------------------------------------------------------------------
.text:004073E3                 align 10h
.text:004073F0 ; Exported entry  19. SimConnect_CreateClientData
.text:004073F0
.text:004073F0 ; =============== S U B R O U T I N E =======================================
.text:004073F0
.text:004073F0 ; Attributes: bp-based frame
.text:004073F0
.text:004073F0                 public SimConnect_CreateClientData
.text:004073F0 SimConnect_CreateClientData proc near   ; DATA XREF: .text:off_409FB8↓o
.text:004073F0
.text:004073F0 var_4           = dword ptr -4
.text:004073F0 arg_0           = dword ptr  8
.text:004073F0 arg_4           = dword ptr  0Ch
.text:004073F0 arg_8           = dword ptr  10h
.text:004073F0 arg_C           = dword ptr  14h
.text:004073F0
.text:004073F0                 mov     edi, edi
.text:004073F2                 push    ebp
.text:004073F3                 mov     ebp, esp
.text:004073F5                 push    ecx
.text:004073F6                 push    esi
.text:004073F7                 mov     esi, [ebp+arg_0]
.text:004073FA                 push    edi
.text:004073FB                 lea     eax, [ebp+var_4]
.text:004073FE                 push    eax
.text:004073FF                 mov     eax, 1Ch
.text:00407404                 mov     ecx, esi
.text:00407406                 mov     [ebp+var_4], 0
.text:0040740D                 mov     edi, 80004005h
.text:00407412                 call    sub_403C30
.text:00407417                 test    eax, eax
.text:00407419                 mov     ecx, [ebp+var_4]
.text:0040741C                 jnz     short loc_407436
.text:0040741E                 mov     dword ptr [ecx], 1Ch
.text:00407424                 mov     dword ptr [ecx+8], 0F0000038h
.text:0040742B                 mov     dword ptr [ecx+4], 4
.text:00407432                 xor     edi, edi
.text:00407434                 jmp     short loc_40744B
.text:00407436 ; ---------------------------------------------------------------------------
.text:00407436
.text:00407436 loc_407436:                             ; CODE XREF: SimConnect_CreateClientData+2C↑j
.text:00407436                 cmp     eax, 2
.text:00407439                 jnz     short loc_407479
.text:0040743B                 test    esi, esi
.text:0040743D                 jz      short loc_407444
.text:0040743F                 mov     edi, [esi+14h]
.text:00407442                 jmp     short loc_407447
.text:00407444 ; ---------------------------------------------------------------------------
.text:00407444
.text:00407444 loc_407444:                             ; CODE XREF: SimConnect_CreateClientData+4D↑j
.text:00407444                 mov     edi, [ebp+arg_0]
.text:00407447
.text:00407447 loc_407447:                             ; CODE XREF: SimConnect_CreateClientData+52↑j
.text:00407447                 test    edi, edi
.text:00407449                 jl      short loc_407479
.text:0040744B
.text:0040744B loc_40744B:                             ; CODE XREF: SimConnect_CreateClientData+44↑j
.text:0040744B                 test    esi, esi
.text:0040744D                 mov     edx, [ebp+arg_4]
.text:00407450                 mov     eax, [ebp+arg_8]
.text:00407453                 mov     [ecx+10h], edx
.text:00407456                 mov     edx, [ebp+arg_C]
.text:00407459                 mov     [ecx+14h], eax
.text:0040745C                 mov     [ecx+18h], edx
.text:0040745F                 jz      short loc_407489
.text:00407461                 cmp     byte ptr [esi+1E0h], 0
.text:00407468                 jz      short loc_407489
.text:0040746A                 call    sub_403E40
.text:0040746F                 mov     eax, edi
.text:00407471                 pop     edi
.text:00407472                 pop     esi
.text:00407473                 mov     esp, ebp
.text:00407475                 pop     ebp
.text:00407476                 retn    10h
.text:00407479 ; ---------------------------------------------------------------------------
.text:00407479
.text:00407479 loc_407479:                             ; CODE XREF: SimConnect_CreateClientData+49↑j
.text:00407479                                         ; SimConnect_CreateClientData+59↑j
.text:00407479                 mov     eax, [ebp+var_4]
.text:0040747C                 test    eax, eax
.text:0040747E                 jz      short loc_407489
.text:00407480                 push    1Ch             ; Size
.text:00407482                 push    eax             ; void *
.text:00407483                 push    esi             ; int
.text:00407484                 call    sub_403D30
.text:00407489
.text:00407489 loc_407489:                             ; CODE XREF: SimConnect_CreateClientData+6F↑j
.text:00407489                                         ; SimConnect_CreateClientData+78↑j ...
.text:00407489                 mov     eax, edi
.text:0040748B                 pop     edi
.text:0040748C                 pop     esi
.text:0040748D                 mov     esp, ebp
.text:0040748F                 pop     ebp
.text:00407490                 retn    10h
.text:00407490 SimConnect_CreateClientData endp
.text:00407490
.text:00407490 ; ---------------------------------------------------------------------------
.text:00407493                 align 10h
.text:004074A0 ; Exported entry   9. SimConnect_AddToClientDataDefinition
.text:004074A0
.text:004074A0 ; =============== S U B R O U T I N E =======================================
.text:004074A0
.text:004074A0 ; Attributes: bp-based frame
.text:004074A0
.text:004074A0 ; int __stdcall SimConnect_AddToClientDataDefinition(int, int, int, int, float, int)
.text:004074A0                 public SimConnect_AddToClientDataDefinition
.text:004074A0 SimConnect_AddToClientDataDefinition proc near
.text:004074A0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004074A0
.text:004074A0 var_4           = dword ptr -4
.text:004074A0 arg_0           = dword ptr  8
.text:004074A0 arg_4           = dword ptr  0Ch
.text:004074A0 arg_8           = dword ptr  10h
.text:004074A0 arg_C           = dword ptr  14h
.text:004074A0 arg_10          = dword ptr  18h
.text:004074A0 arg_14          = dword ptr  1Ch
.text:004074A0
.text:004074A0                 mov     edi, edi
.text:004074A2                 push    ebp
.text:004074A3                 mov     ebp, esp
.text:004074A5                 push    ecx
.text:004074A6                 push    esi
.text:004074A7                 mov     esi, [ebp+arg_0]
.text:004074AA                 push    edi
.text:004074AB                 lea     eax, [ebp+var_4]
.text:004074AE                 push    eax
.text:004074AF                 mov     eax, 24h ; '$'
.text:004074B4                 mov     ecx, esi
.text:004074B6                 mov     [ebp+var_4], 0
.text:004074BD                 mov     edi, 80004005h
.text:004074C2                 call    sub_403C30
.text:004074C7                 test    eax, eax
.text:004074C9                 mov     ecx, [ebp+var_4]
.text:004074CC                 jnz     short loc_4074E6
.text:004074CE                 mov     dword ptr [ecx], 24h ; '$'
.text:004074D4                 mov     dword ptr [ecx+8], 0F0000039h
.text:004074DB                 mov     dword ptr [ecx+4], 4
.text:004074E2                 xor     edi, edi
.text:004074E4                 jmp     short loc_4074FB
.text:004074E6 ; ---------------------------------------------------------------------------
.text:004074E6
.text:004074E6 loc_4074E6:                             ; CODE XREF: SimConnect_AddToClientDataDefinition+2C↑j
.text:004074E6                 cmp     eax, 2
.text:004074E9                 jnz     short loc_407535
.text:004074EB                 test    esi, esi
.text:004074ED                 jz      short loc_4074F4
.text:004074EF                 mov     edi, [esi+14h]
.text:004074F2                 jmp     short loc_4074F7
.text:004074F4 ; ---------------------------------------------------------------------------
.text:004074F4
.text:004074F4 loc_4074F4:                             ; CODE XREF: SimConnect_AddToClientDataDefinition+4D↑j
.text:004074F4                 mov     edi, [ebp+arg_0]
.text:004074F7
.text:004074F7 loc_4074F7:                             ; CODE XREF: SimConnect_AddToClientDataDefinition+52↑j
.text:004074F7                 test    edi, edi
.text:004074F9                 jl      short loc_407535
.text:004074FB
.text:004074FB loc_4074FB:                             ; CODE XREF: SimConnect_AddToClientDataDefinition+44↑j
.text:004074FB                 test    esi, esi
.text:004074FD                 fld     [ebp+arg_10]
.text:00407500                 mov     edx, [ebp+arg_4]
.text:00407503                 mov     eax, [ebp+arg_8]
.text:00407506                 mov     [ecx+10h], edx
.text:00407509                 mov     edx, [ebp+arg_C]
.text:0040750C                 mov     [ecx+14h], eax
.text:0040750F                 mov     eax, [ebp+arg_14]
.text:00407512                 mov     [ecx+18h], edx
.text:00407515                 fstp    dword ptr [ecx+1Ch]
.text:00407518                 mov     [ecx+20h], eax
.text:0040751B                 jz      short loc_407545
.text:0040751D                 cmp     byte ptr [esi+1E0h], 0
.text:00407524                 jz      short loc_407545
.text:00407526                 call    sub_403E40
.text:0040752B                 mov     eax, edi
.text:0040752D                 pop     edi
.text:0040752E                 pop     esi
.text:0040752F                 mov     esp, ebp
.text:00407531                 pop     ebp
.text:00407532                 retn    18h
.text:00407535 ; ---------------------------------------------------------------------------
.text:00407535
.text:00407535 loc_407535:                             ; CODE XREF: SimConnect_AddToClientDataDefinition+49↑j
.text:00407535                                         ; SimConnect_AddToClientDataDefinition+59↑j
.text:00407535                 mov     eax, [ebp+var_4]
.text:00407538                 test    eax, eax
.text:0040753A                 jz      short loc_407545
.text:0040753C                 push    24h ; '$'       ; Size
.text:0040753E                 push    eax             ; void *
.text:0040753F                 push    esi             ; int
.text:00407540                 call    sub_403D30
.text:00407545
.text:00407545 loc_407545:                             ; CODE XREF: SimConnect_AddToClientDataDefinition+7B↑j
.text:00407545                                         ; SimConnect_AddToClientDataDefinition+84↑j ...
.text:00407545                 mov     eax, edi
.text:00407547                 pop     edi
.text:00407548                 pop     esi
.text:00407549                 mov     esp, ebp
.text:0040754B                 pop     ebp
.text:0040754C                 retn    18h
.text:0040754C SimConnect_AddToClientDataDefinition endp
.text:0040754C
.text:0040754C ; ---------------------------------------------------------------------------
.text:0040754F                 align 20h
.text:00407560 ; Exported entry  13. SimConnect_ClearClientDataDefinition
.text:00407560
.text:00407560 ; =============== S U B R O U T I N E =======================================
.text:00407560
.text:00407560 ; Attributes: bp-based frame
.text:00407560
.text:00407560                 public SimConnect_ClearClientDataDefinition
.text:00407560 SimConnect_ClearClientDataDefinition proc near
.text:00407560                                         ; DATA XREF: .text:off_409FB8↓o
.text:00407560
.text:00407560 var_4           = dword ptr -4
.text:00407560 arg_0           = dword ptr  8
.text:00407560 arg_4           = dword ptr  0Ch
.text:00407560
.text:00407560                 mov     edi, edi
.text:00407562                 push    ebp
.text:00407563                 mov     ebp, esp
.text:00407565                 push    ecx
.text:00407566                 push    esi
.text:00407567                 mov     esi, [ebp+arg_0]
.text:0040756A                 push    edi
.text:0040756B                 lea     eax, [ebp+var_4]
.text:0040756E                 push    eax
.text:0040756F                 mov     eax, 14h
.text:00407574                 mov     ecx, esi
.text:00407576                 mov     [ebp+var_4], 0
.text:0040757D                 mov     edi, 80004005h
.text:00407582                 call    sub_403C30
.text:00407587                 test    eax, eax
.text:00407589                 mov     ecx, [ebp+var_4]
.text:0040758C                 jnz     short loc_4075A6
.text:0040758E                 mov     dword ptr [ecx], 14h
.text:00407594                 mov     dword ptr [ecx+8], 0F000003Ah
.text:0040759B                 mov     dword ptr [ecx+4], 4
.text:004075A2                 xor     edi, edi
.text:004075A4                 jmp     short loc_4075BB
.text:004075A6 ; ---------------------------------------------------------------------------
.text:004075A6
.text:004075A6 loc_4075A6:                             ; CODE XREF: SimConnect_ClearClientDataDefinition+2C↑j
.text:004075A6                 cmp     eax, 2
.text:004075A9                 jnz     short loc_4075DD
.text:004075AB                 test    esi, esi
.text:004075AD                 jz      short loc_4075B4
.text:004075AF                 mov     edi, [esi+14h]
.text:004075B2                 jmp     short loc_4075B7
.text:004075B4 ; ---------------------------------------------------------------------------
.text:004075B4
.text:004075B4 loc_4075B4:                             ; CODE XREF: SimConnect_ClearClientDataDefinition+4D↑j
.text:004075B4                 mov     edi, [ebp+arg_0]
.text:004075B7
.text:004075B7 loc_4075B7:                             ; CODE XREF: SimConnect_ClearClientDataDefinition+52↑j
.text:004075B7                 test    edi, edi
.text:004075B9                 jl      short loc_4075DD
.text:004075BB
.text:004075BB loc_4075BB:                             ; CODE XREF: SimConnect_ClearClientDataDefinition+44↑j
.text:004075BB                 test    esi, esi
.text:004075BD                 mov     edx, [ebp+arg_4]
.text:004075C0                 mov     [ecx+10h], edx
.text:004075C3                 jz      short loc_4075ED
.text:004075C5                 cmp     byte ptr [esi+1E0h], 0
.text:004075CC                 jz      short loc_4075ED
.text:004075CE                 call    sub_403E40
.text:004075D3                 mov     eax, edi
.text:004075D5                 pop     edi
.text:004075D6                 pop     esi
.text:004075D7                 mov     esp, ebp
.text:004075D9                 pop     ebp
.text:004075DA                 retn    8
.text:004075DD ; ---------------------------------------------------------------------------
.text:004075DD
.text:004075DD loc_4075DD:                             ; CODE XREF: SimConnect_ClearClientDataDefinition+49↑j
.text:004075DD                                         ; SimConnect_ClearClientDataDefinition+59↑j
.text:004075DD                 mov     eax, [ebp+var_4]
.text:004075E0                 test    eax, eax
.text:004075E2                 jz      short loc_4075ED
.text:004075E4                 push    14h             ; Size
.text:004075E6                 push    eax             ; void *
.text:004075E7                 push    esi             ; int
.text:004075E8                 call    sub_403D30
.text:004075ED
.text:004075ED loc_4075ED:                             ; CODE XREF: SimConnect_ClearClientDataDefinition+63↑j
.text:004075ED                                         ; SimConnect_ClearClientDataDefinition+6C↑j ...
.text:004075ED                 mov     eax, edi
.text:004075EF                 pop     edi
.text:004075F0                 pop     esi
.text:004075F1                 mov     esp, ebp
.text:004075F3                 pop     ebp
.text:004075F4                 retn    8
.text:004075F4 SimConnect_ClearClientDataDefinition endp
.text:004075F4
.text:004075F4 ; ---------------------------------------------------------------------------
.text:004075F7                 align 10h
.text:00407600 ; Exported entry  37. SimConnect_RequestClientData
.text:00407600
.text:00407600 ; =============== S U B R O U T I N E =======================================
.text:00407600
.text:00407600 ; Attributes: bp-based frame
.text:00407600
.text:00407600                 public SimConnect_RequestClientData
.text:00407600 SimConnect_RequestClientData proc near  ; DATA XREF: .text:off_409FB8↓o
.text:00407600
.text:00407600 var_4           = dword ptr -4
.text:00407600 arg_0           = dword ptr  8
.text:00407600 arg_4           = dword ptr  0Ch
.text:00407600 arg_8           = dword ptr  10h
.text:00407600 arg_C           = dword ptr  14h
.text:00407600 arg_10          = dword ptr  18h
.text:00407600 arg_14          = dword ptr  1Ch
.text:00407600 arg_18          = dword ptr  20h
.text:00407600 arg_1C          = dword ptr  24h
.text:00407600 arg_20          = dword ptr  28h
.text:00407600
.text:00407600                 mov     edi, edi
.text:00407602                 push    ebp
.text:00407603                 mov     ebp, esp
.text:00407605                 push    ecx
.text:00407606                 push    esi
.text:00407607                 mov     esi, [ebp+arg_0]
.text:0040760A                 push    edi
.text:0040760B                 lea     eax, [ebp+var_4]
.text:0040760E                 push    eax
.text:0040760F                 mov     eax, 30h ; '0'
.text:00407614                 mov     ecx, esi
.text:00407616                 mov     [ebp+var_4], 0
.text:0040761D                 mov     edi, 80004005h
.text:00407622                 call    sub_403C30
.text:00407627                 test    eax, eax
.text:00407629                 mov     ecx, [ebp+var_4]
.text:0040762C                 jnz     short loc_407646
.text:0040762E                 mov     dword ptr [ecx], 30h ; '0'
.text:00407634                 mov     dword ptr [ecx+8], 0F000003Bh
.text:0040763B                 mov     dword ptr [ecx+4], 4
.text:00407642                 xor     edi, edi
.text:00407644                 jmp     short loc_40765B
.text:00407646 ; ---------------------------------------------------------------------------
.text:00407646
.text:00407646 loc_407646:                             ; CODE XREF: SimConnect_RequestClientData+2C↑j
.text:00407646                 cmp     eax, 2
.text:00407649                 jnz     short loc_4076A7
.text:0040764B                 test    esi, esi
.text:0040764D                 jz      short loc_407654
.text:0040764F                 mov     edi, [esi+14h]
.text:00407652                 jmp     short loc_407657
.text:00407654 ; ---------------------------------------------------------------------------
.text:00407654
.text:00407654 loc_407654:                             ; CODE XREF: SimConnect_RequestClientData+4D↑j
.text:00407654                 mov     edi, [ebp+arg_0]
.text:00407657
.text:00407657 loc_407657:                             ; CODE XREF: SimConnect_RequestClientData+52↑j
.text:00407657                 test    edi, edi
.text:00407659                 jl      short loc_4076A7
.text:0040765B
.text:0040765B loc_40765B:                             ; CODE XREF: SimConnect_RequestClientData+44↑j
.text:0040765B                 test    esi, esi
.text:0040765D                 mov     edx, [ebp+arg_4]
.text:00407660                 mov     eax, [ebp+arg_8]
.text:00407663                 mov     [ecx+10h], edx
.text:00407666                 mov     edx, [ebp+arg_C]
.text:00407669                 mov     [ecx+14h], eax
.text:0040766C                 mov     eax, [ebp+arg_10]
.text:0040766F                 mov     [ecx+18h], edx
.text:00407672                 mov     edx, [ebp+arg_14]
.text:00407675                 mov     [ecx+1Ch], eax
.text:00407678                 mov     eax, [ebp+arg_18]
.text:0040767B                 mov     [ecx+20h], edx
.text:0040767E                 mov     edx, [ebp+arg_1C]
.text:00407681                 mov     [ecx+24h], eax
.text:00407684                 mov     eax, [ebp+arg_20]
.text:00407687                 mov     [ecx+28h], edx
.text:0040768A                 mov     [ecx+2Ch], eax
.text:0040768D                 jz      short loc_4076B7
.text:0040768F                 cmp     byte ptr [esi+1E0h], 0
.text:00407696                 jz      short loc_4076B7
.text:00407698                 call    sub_403E40
.text:0040769D                 mov     eax, edi
.text:0040769F                 pop     edi
.text:004076A0                 pop     esi
.text:004076A1                 mov     esp, ebp
.text:004076A3                 pop     ebp
.text:004076A4                 retn    24h ; '$'
.text:004076A7 ; ---------------------------------------------------------------------------
.text:004076A7
.text:004076A7 loc_4076A7:                             ; CODE XREF: SimConnect_RequestClientData+49↑j
.text:004076A7                                         ; SimConnect_RequestClientData+59↑j
.text:004076A7                 mov     eax, [ebp+var_4]
.text:004076AA                 test    eax, eax
.text:004076AC                 jz      short loc_4076B7
.text:004076AE                 push    30h ; '0'       ; Size
.text:004076B0                 push    eax             ; void *
.text:004076B1                 push    esi             ; int
.text:004076B2                 call    sub_403D30
.text:004076B7
.text:004076B7 loc_4076B7:                             ; CODE XREF: SimConnect_RequestClientData+8D↑j
.text:004076B7                                         ; SimConnect_RequestClientData+96↑j ...
.text:004076B7                 mov     eax, edi
.text:004076B9                 pop     edi
.text:004076BA                 pop     esi
.text:004076BB                 mov     esp, ebp
.text:004076BD                 pop     ebp
.text:004076BE                 retn    24h ; '$'
.text:004076BE SimConnect_RequestClientData endp
.text:004076BE
.text:004076BE ; ---------------------------------------------------------------------------
.text:004076C1                 align 10h
.text:004076D0 ; Exported entry  46. SimConnect_SetClientData
.text:004076D0
.text:004076D0 ; =============== S U B R O U T I N E =======================================
.text:004076D0
.text:004076D0 ; Attributes: bp-based frame
.text:004076D0
.text:004076D0 ; int __stdcall SimConnect_SetClientData(int, int, int, int, int, size_t Size, void *Src)
.text:004076D0                 public SimConnect_SetClientData
.text:004076D0 SimConnect_SetClientData proc near      ; DATA XREF: .text:off_409FB8↓o
.text:004076D0
.text:004076D0 var_8           = dword ptr -8
.text:004076D0 var_4           = dword ptr -4
.text:004076D0 arg_0           = dword ptr  8
.text:004076D0 arg_4           = dword ptr  0Ch
.text:004076D0 arg_8           = dword ptr  10h
.text:004076D0 arg_C           = dword ptr  14h
.text:004076D0 arg_10          = dword ptr  18h
.text:004076D0 Size            = dword ptr  1Ch
.text:004076D0 Src             = dword ptr  20h
.text:004076D0
.text:004076D0                 mov     edi, edi
.text:004076D2                 push    ebp
.text:004076D3                 mov     ebp, esp
.text:004076D5                 sub     esp, 8
.text:004076D8                 mov     eax, [ebp+Size]
.text:004076DB                 push    ebx
.text:004076DC                 push    esi
.text:004076DD                 mov     esi, [ebp+arg_0]
.text:004076E0                 push    edi
.text:004076E1                 lea     ecx, [ebp+var_4]
.text:004076E4                 add     eax, 24h ; '$'
.text:004076E7                 push    ecx
.text:004076E8                 mov     ecx, esi
.text:004076EA                 mov     [ebp+var_4], 0
.text:004076F1                 mov     [ebp+var_8], eax
.text:004076F4                 mov     ebx, 80004005h
.text:004076F9                 call    sub_403C30
.text:004076FE                 test    eax, eax
.text:00407700                 mov     edi, [ebp+var_4]
.text:00407703                 jnz     short loc_40771C
.text:00407705                 mov     edx, [ebp+var_8]
.text:00407708                 mov     [edi], edx
.text:0040770A                 mov     dword ptr [edi+8], 0F000003Ch
.text:00407711                 mov     dword ptr [edi+4], 4
.text:00407718                 xor     ebx, ebx
.text:0040771A                 jmp     short loc_407731
.text:0040771C ; ---------------------------------------------------------------------------
.text:0040771C
.text:0040771C loc_40771C:                             ; CODE XREF: SimConnect_SetClientData+33↑j
.text:0040771C                 cmp     eax, 2
.text:0040771F                 jnz     short loc_407780
.text:00407721                 test    esi, esi
.text:00407723                 jz      short loc_40772A
.text:00407725                 mov     ebx, [esi+14h]
.text:00407728                 jmp     short loc_40772D
.text:0040772A ; ---------------------------------------------------------------------------
.text:0040772A
.text:0040772A loc_40772A:                             ; CODE XREF: SimConnect_SetClientData+53↑j
.text:0040772A                 mov     ebx, [ebp+Size]
.text:0040772D
.text:0040772D loc_40772D:                             ; CODE XREF: SimConnect_SetClientData+58↑j
.text:0040772D                 test    ebx, ebx
.text:0040772F                 jl      short loc_407780
.text:00407731
.text:00407731 loc_407731:                             ; CODE XREF: SimConnect_SetClientData+4A↑j
.text:00407731                 mov     eax, [ebp+Size]
.text:00407734                 mov     ecx, [ebp+Src]
.text:00407737                 push    eax             ; Size
.text:00407738                 push    ecx             ; Src
.text:00407739                 lea     edx, [edi+24h]
.text:0040773C                 push    edx             ; void *
.text:0040773D                 call    memcpy
.text:00407742                 mov     eax, [ebp+arg_4]
.text:00407745                 mov     ecx, [ebp+arg_8]
.text:00407748                 mov     edx, [ebp+arg_C]
.text:0040774B                 mov     [edi+10h], eax
.text:0040774E                 mov     eax, [ebp+arg_10]
.text:00407751                 mov     [edi+14h], ecx
.text:00407754                 mov     ecx, [ebp+Size]
.text:00407757                 mov     [edi+18h], edx
.text:0040775A                 add     esp, 0Ch
.text:0040775D                 test    esi, esi
.text:0040775F                 mov     [edi+1Ch], eax
.text:00407762                 mov     [edi+20h], ecx
.text:00407765                 jz      short loc_407792
.text:00407767                 cmp     byte ptr [esi+1E0h], 0
.text:0040776E                 jz      short loc_407792
.text:00407770                 call    sub_403E40
.text:00407775                 pop     edi
.text:00407776                 pop     esi
.text:00407777                 mov     eax, ebx
.text:00407779                 pop     ebx
.text:0040777A                 mov     esp, ebp
.text:0040777C                 pop     ebp
.text:0040777D                 retn    1Ch
.text:00407780 ; ---------------------------------------------------------------------------
.text:00407780
.text:00407780 loc_407780:                             ; CODE XREF: SimConnect_SetClientData+4F↑j
.text:00407780                                         ; SimConnect_SetClientData+5F↑j
.text:00407780                 mov     eax, [ebp+var_4]
.text:00407783                 test    eax, eax
.text:00407785                 jz      short loc_407792
.text:00407787                 mov     edx, [ebp+var_8]
.text:0040778A                 push    edx             ; Size
.text:0040778B                 push    eax             ; void *
.text:0040778C                 push    esi             ; int
.text:0040778D                 call    sub_403D30
.text:00407792
.text:00407792 loc_407792:                             ; CODE XREF: SimConnect_SetClientData+95↑j
.text:00407792                                         ; SimConnect_SetClientData+9E↑j ...
.text:00407792                 pop     edi
.text:00407793                 pop     esi
.text:00407794                 mov     eax, ebx
.text:00407796                 pop     ebx
.text:00407797                 mov     esp, ebp
.text:00407799                 pop     ebp
.text:0040779A                 retn    1Ch
.text:0040779A SimConnect_SetClientData endp
.text:0040779A
.text:0040779A ; ---------------------------------------------------------------------------
.text:0040779D                 db 13h dup(0CCh)
.text:004077B0 ; Exported entry  21. SimConnect_FlightLoad
.text:004077B0
.text:004077B0 ; =============== S U B R O U T I N E =======================================
.text:004077B0
.text:004077B0 ; Attributes: bp-based frame
.text:004077B0
.text:004077B0                 public SimConnect_FlightLoad
.text:004077B0 SimConnect_FlightLoad proc near         ; DATA XREF: .text:off_409FB8↓o
.text:004077B0
.text:004077B0 var_4           = dword ptr -4
.text:004077B0 arg_0           = dword ptr  8
.text:004077B0 arg_4           = dword ptr  0Ch
.text:004077B0
.text:004077B0                 mov     edi, edi
.text:004077B2                 push    ebp
.text:004077B3                 mov     ebp, esp
.text:004077B5                 push    ecx
.text:004077B6                 push    ebx
.text:004077B7                 mov     ebx, [ebp+arg_0]
.text:004077BA                 push    esi
.text:004077BB                 push    edi
.text:004077BC                 lea     eax, [ebp+var_4]
.text:004077BF                 push    eax
.text:004077C0                 mov     eax, 114h
.text:004077C5                 mov     ecx, ebx
.text:004077C7                 mov     [ebp+var_4], 0
.text:004077CE                 mov     edi, 80004005h
.text:004077D3                 call    sub_403C30
.text:004077D8                 test    eax, eax
.text:004077DA                 mov     esi, [ebp+var_4]
.text:004077DD                 jnz     short loc_4077F7
.text:004077DF                 mov     dword ptr [esi], 114h
.text:004077E5                 mov     dword ptr [esi+8], 0F000003Dh
.text:004077EC                 mov     dword ptr [esi+4], 4
.text:004077F3                 xor     edi, edi
.text:004077F5                 jmp     short loc_407808
.text:004077F7 ; ---------------------------------------------------------------------------
.text:004077F7
.text:004077F7 loc_4077F7:                             ; CODE XREF: SimConnect_FlightLoad+2D↑j
.text:004077F7                 cmp     eax, 2
.text:004077FA                 jnz     short loc_407808
.text:004077FC                 test    ebx, ebx
.text:004077FE                 jz      short loc_407805
.text:00407800                 mov     edi, [ebx+14h]
.text:00407803                 jmp     short loc_407808
.text:00407805 ; ---------------------------------------------------------------------------
.text:00407805
.text:00407805 loc_407805:                             ; CODE XREF: SimConnect_FlightLoad+4E↑j
.text:00407805                 mov     edi, [ebp+arg_0]
.text:00407808
.text:00407808 loc_407808:                             ; CODE XREF: SimConnect_FlightLoad+45↑j
.text:00407808                                         ; SimConnect_FlightLoad+4A↑j ...
.text:00407808                 test    edi, edi
.text:0040780A                 jl      short loc_407826
.text:0040780C                 mov     eax, [ebp+arg_4]
.text:0040780F                 test    eax, eax
.text:00407811                 jz      short loc_407841
.text:00407813                 lea     edx, [esi+10h]
.text:00407816                 mov     ecx, 104h
.text:0040781B                 call    sub_402580
.text:00407820                 mov     edi, eax
.text:00407822                 test    edi, edi
.text:00407824                 jge     short loc_407845
.text:00407826
.text:00407826 loc_407826:                             ; CODE XREF: SimConnect_FlightLoad+5A↑j
.text:00407826                 test    esi, esi
.text:00407828                 jz      short loc_407836
.text:0040782A                 push    114h            ; Size
.text:0040782F                 push    esi             ; void *
.text:00407830                 push    ebx             ; int
.text:00407831                 call    sub_403D30
.text:00407836
.text:00407836 loc_407836:                             ; CODE XREF: SimConnect_FlightLoad+78↑j
.text:00407836                                         ; SimConnect_FlightLoad+97↓j ...
.text:00407836                 mov     eax, edi
.text:00407838                 pop     edi
.text:00407839                 pop     esi
.text:0040783A                 pop     ebx
.text:0040783B                 mov     esp, ebp
.text:0040783D                 pop     ebp
.text:0040783E                 retn    8
.text:00407841 ; ---------------------------------------------------------------------------
.text:00407841
.text:00407841 loc_407841:                             ; CODE XREF: SimConnect_FlightLoad+61↑j
.text:00407841                 mov     byte ptr [esi+10h], 0
.text:00407845
.text:00407845 loc_407845:                             ; CODE XREF: SimConnect_FlightLoad+74↑j
.text:00407845                 test    ebx, ebx
.text:00407847                 jz      short loc_407836
.text:00407849                 cmp     byte ptr [ebx+1E0h], 0
.text:00407850                 jz      short loc_407836
.text:00407852                 mov     esi, ebx
.text:00407854                 call    sub_403E40
.text:00407859                 mov     eax, edi
.text:0040785B                 pop     edi
.text:0040785C                 pop     esi
.text:0040785D                 pop     ebx
.text:0040785E                 mov     esp, ebp
.text:00407860                 pop     ebp
.text:00407861                 retn    8
.text:00407861 SimConnect_FlightLoad endp
.text:00407861
.text:00407861 ; ---------------------------------------------------------------------------
.text:00407864                 align 10h
.text:00407870 ; Exported entry  23. SimConnect_FlightSave
.text:00407870
.text:00407870 ; =============== S U B R O U T I N E =======================================
.text:00407870
.text:00407870 ; Attributes: bp-based frame
.text:00407870
.text:00407870                 public SimConnect_FlightSave
.text:00407870 SimConnect_FlightSave proc near         ; DATA XREF: .text:off_409FB8↓o
.text:00407870
.text:00407870 var_4           = dword ptr -4
.text:00407870 arg_0           = dword ptr  8
.text:00407870 arg_4           = dword ptr  0Ch
.text:00407870 arg_8           = dword ptr  10h
.text:00407870 arg_C           = dword ptr  14h
.text:00407870 arg_10          = dword ptr  18h
.text:00407870
.text:00407870                 mov     edi, edi
.text:00407872                 push    ebp
.text:00407873                 mov     ebp, esp
.text:00407875                 push    ecx
.text:00407876                 push    ebx
.text:00407877                 push    esi
.text:00407878                 mov     esi, [ebp+arg_0]
.text:0040787B                 push    edi
.text:0040787C                 lea     eax, [ebp+var_4]
.text:0040787F                 push    eax
.text:00407880                 mov     eax, 0A1Ch
.text:00407885                 mov     ecx, esi
.text:00407887                 mov     [ebp+var_4], 0
.text:0040788E                 mov     ebx, 80004005h
.text:00407893                 call    sub_403C30
.text:00407898                 test    eax, eax
.text:0040789A                 mov     edi, [ebp+var_4]
.text:0040789D                 jnz     short loc_4078B7
.text:0040789F                 mov     dword ptr [edi], 0A1Ch
.text:004078A5                 mov     dword ptr [edi+8], 0F000003Eh
.text:004078AC                 mov     dword ptr [edi+4], 4
.text:004078B3                 xor     ebx, ebx
.text:004078B5                 jmp     short loc_4078C8
.text:004078B7 ; ---------------------------------------------------------------------------
.text:004078B7
.text:004078B7 loc_4078B7:                             ; CODE XREF: SimConnect_FlightSave+2D↑j
.text:004078B7                 cmp     eax, 2
.text:004078BA                 jnz     short loc_4078C8
.text:004078BC                 test    esi, esi
.text:004078BE                 jz      short loc_4078C5
.text:004078C0                 mov     ebx, [esi+14h]
.text:004078C3                 jmp     short loc_4078C8
.text:004078C5 ; ---------------------------------------------------------------------------
.text:004078C5
.text:004078C5 loc_4078C5:                             ; CODE XREF: SimConnect_FlightSave+4E↑j
.text:004078C5                 mov     ebx, [ebp+arg_0]
.text:004078C8
.text:004078C8 loc_4078C8:                             ; CODE XREF: SimConnect_FlightSave+45↑j
.text:004078C8                                         ; SimConnect_FlightSave+4A↑j ...
.text:004078C8                 test    ebx, ebx
.text:004078CA                 jl      short loc_4078E6
.text:004078CC                 mov     eax, [ebp+arg_4]
.text:004078CF                 test    eax, eax
.text:004078D1                 jz      short loc_407901
.text:004078D3                 lea     edx, [edi+10h]
.text:004078D6                 mov     ecx, 104h
.text:004078DB                 call    sub_402580
.text:004078E0                 mov     ebx, eax
.text:004078E2                 test    ebx, ebx
.text:004078E4                 jge     short loc_407905
.text:004078E6
.text:004078E6 loc_4078E6:                             ; CODE XREF: SimConnect_FlightSave+5A↑j
.text:004078E6                                         ; SimConnect_FlightSave+B0↓j ...
.text:004078E6                 test    edi, edi
.text:004078E8                 jz      short loc_4078F6
.text:004078EA                 push    0A1Ch           ; Size
.text:004078EF                 push    edi             ; void *
.text:004078F0                 push    esi             ; int
.text:004078F1                 call    sub_403D30
.text:004078F6
.text:004078F6 loc_4078F6:                             ; CODE XREF: SimConnect_FlightSave+78↑j
.text:004078F6                                         ; SimConnect_FlightSave+EC↓j ...
.text:004078F6                 pop     edi
.text:004078F7                 pop     esi
.text:004078F8                 mov     eax, ebx
.text:004078FA                 pop     ebx
.text:004078FB                 mov     esp, ebp
.text:004078FD                 pop     ebp
.text:004078FE                 retn    14h
.text:00407901 ; ---------------------------------------------------------------------------
.text:00407901
.text:00407901 loc_407901:                             ; CODE XREF: SimConnect_FlightSave+61↑j
.text:00407901                 mov     byte ptr [edi+10h], 0
.text:00407905
.text:00407905 loc_407905:                             ; CODE XREF: SimConnect_FlightSave+74↑j
.text:00407905                 mov     eax, [ebp+arg_8]
.text:00407908                 test    eax, eax
.text:0040790A                 jz      short loc_407924
.text:0040790C                 lea     edx, [edi+114h]
.text:00407912                 mov     ecx, 104h
.text:00407917                 call    sub_402580
.text:0040791C                 mov     ebx, eax
.text:0040791E                 test    ebx, ebx
.text:00407920                 jl      short loc_4078E6
.text:00407922                 jmp     short loc_40792B
.text:00407924 ; ---------------------------------------------------------------------------
.text:00407924
.text:00407924 loc_407924:                             ; CODE XREF: SimConnect_FlightSave+9A↑j
.text:00407924                 mov     byte ptr [edi+114h], 0
.text:0040792B
.text:0040792B loc_40792B:                             ; CODE XREF: SimConnect_FlightSave+B2↑j
.text:0040792B                 mov     eax, [ebp+arg_C]
.text:0040792E                 test    eax, eax
.text:00407930                 jz      short loc_40794A
.text:00407932                 lea     edx, [edi+218h]
.text:00407938                 mov     ecx, 800h
.text:0040793D                 call    sub_402580
.text:00407942                 mov     ebx, eax
.text:00407944                 test    ebx, ebx
.text:00407946                 jl      short loc_4078E6
.text:00407948                 jmp     short loc_407951
.text:0040794A ; ---------------------------------------------------------------------------
.text:0040794A
.text:0040794A loc_40794A:                             ; CODE XREF: SimConnect_FlightSave+C0↑j
.text:0040794A                 mov     byte ptr [edi+218h], 0
.text:00407951
.text:00407951 loc_407951:                             ; CODE XREF: SimConnect_FlightSave+D8↑j
.text:00407951                 test    esi, esi
.text:00407953                 mov     ecx, [ebp+arg_10]
.text:00407956                 mov     [edi+0A18h], ecx
.text:0040795C                 jz      short loc_4078F6
.text:0040795E                 cmp     byte ptr [esi+1E0h], 0
.text:00407965                 jz      short loc_4078F6
.text:00407967                 call    sub_403E40
.text:0040796C                 pop     edi
.text:0040796D                 pop     esi
.text:0040796E                 mov     eax, ebx
.text:00407970                 pop     ebx
.text:00407971                 mov     esp, ebp
.text:00407973                 pop     ebp
.text:00407974                 retn    14h
.text:00407974 SimConnect_FlightSave endp
.text:00407974
.text:00407974 ; ---------------------------------------------------------------------------
.text:00407977                 align 10h
.text:00407980 ; Exported entry  22. SimConnect_FlightPlanLoad
.text:00407980
.text:00407980 ; =============== S U B R O U T I N E =======================================
.text:00407980
.text:00407980 ; Attributes: bp-based frame
.text:00407980
.text:00407980                 public SimConnect_FlightPlanLoad
.text:00407980 SimConnect_FlightPlanLoad proc near     ; DATA XREF: .text:off_409FB8↓o
.text:00407980
.text:00407980 var_4           = dword ptr -4
.text:00407980 arg_0           = dword ptr  8
.text:00407980 arg_4           = dword ptr  0Ch
.text:00407980
.text:00407980                 mov     edi, edi
.text:00407982                 push    ebp
.text:00407983                 mov     ebp, esp
.text:00407985                 push    ecx
.text:00407986                 push    ebx
.text:00407987                 mov     ebx, [ebp+arg_0]
.text:0040798A                 push    esi
.text:0040798B                 push    edi
.text:0040798C                 lea     eax, [ebp+var_4]
.text:0040798F                 push    eax
.text:00407990                 mov     eax, 114h
.text:00407995                 mov     ecx, ebx
.text:00407997                 mov     [ebp+var_4], 0
.text:0040799E                 mov     edi, 80004005h
.text:004079A3                 call    sub_403C30
.text:004079A8                 test    eax, eax
.text:004079AA                 mov     esi, [ebp+var_4]
.text:004079AD                 jnz     short loc_4079C7
.text:004079AF                 mov     dword ptr [esi], 114h
.text:004079B5                 mov     dword ptr [esi+8], 0F000003Fh
.text:004079BC                 mov     dword ptr [esi+4], 4
.text:004079C3                 xor     edi, edi
.text:004079C5                 jmp     short loc_4079D8
.text:004079C7 ; ---------------------------------------------------------------------------
.text:004079C7
.text:004079C7 loc_4079C7:                             ; CODE XREF: SimConnect_FlightPlanLoad+2D↑j
.text:004079C7                 cmp     eax, 2
.text:004079CA                 jnz     short loc_4079D8
.text:004079CC                 test    ebx, ebx
.text:004079CE                 jz      short loc_4079D5
.text:004079D0                 mov     edi, [ebx+14h]
.text:004079D3                 jmp     short loc_4079D8
.text:004079D5 ; ---------------------------------------------------------------------------
.text:004079D5
.text:004079D5 loc_4079D5:                             ; CODE XREF: SimConnect_FlightPlanLoad+4E↑j
.text:004079D5                 mov     edi, [ebp+arg_0]
.text:004079D8
.text:004079D8 loc_4079D8:                             ; CODE XREF: SimConnect_FlightPlanLoad+45↑j
.text:004079D8                                         ; SimConnect_FlightPlanLoad+4A↑j ...
.text:004079D8                 test    edi, edi
.text:004079DA                 jl      short loc_4079F6
.text:004079DC                 mov     eax, [ebp+arg_4]
.text:004079DF                 test    eax, eax
.text:004079E1                 jz      short loc_407A11
.text:004079E3                 lea     edx, [esi+10h]
.text:004079E6                 mov     ecx, 104h
.text:004079EB                 call    sub_402580
.text:004079F0                 mov     edi, eax
.text:004079F2                 test    edi, edi
.text:004079F4                 jge     short loc_407A15
.text:004079F6
.text:004079F6 loc_4079F6:                             ; CODE XREF: SimConnect_FlightPlanLoad+5A↑j
.text:004079F6                 test    esi, esi
.text:004079F8                 jz      short loc_407A06
.text:004079FA                 push    114h            ; Size
.text:004079FF                 push    esi             ; void *
.text:00407A00                 push    ebx             ; int
.text:00407A01                 call    sub_403D30
.text:00407A06
.text:00407A06 loc_407A06:                             ; CODE XREF: SimConnect_FlightPlanLoad+78↑j
.text:00407A06                                         ; SimConnect_FlightPlanLoad+97↓j ...
.text:00407A06                 mov     eax, edi
.text:00407A08                 pop     edi
.text:00407A09                 pop     esi
.text:00407A0A                 pop     ebx
.text:00407A0B                 mov     esp, ebp
.text:00407A0D                 pop     ebp
.text:00407A0E                 retn    8
.text:00407A11 ; ---------------------------------------------------------------------------
.text:00407A11
.text:00407A11 loc_407A11:                             ; CODE XREF: SimConnect_FlightPlanLoad+61↑j
.text:00407A11                 mov     byte ptr [esi+10h], 0
.text:00407A15
.text:00407A15 loc_407A15:                             ; CODE XREF: SimConnect_FlightPlanLoad+74↑j
.text:00407A15                 test    ebx, ebx
.text:00407A17                 jz      short loc_407A06
.text:00407A19                 cmp     byte ptr [ebx+1E0h], 0
.text:00407A20                 jz      short loc_407A06
.text:00407A22                 mov     esi, ebx
.text:00407A24                 call    sub_403E40
.text:00407A29                 mov     eax, edi
.text:00407A2B                 pop     edi
.text:00407A2C                 pop     esi
.text:00407A2D                 pop     ebx
.text:00407A2E                 mov     esp, ebp
.text:00407A30                 pop     ebp
.text:00407A31                 retn    8
.text:00407A31 SimConnect_FlightPlanLoad endp
.text:00407A31
.text:00407A31 ; ---------------------------------------------------------------------------
.text:00407A34                 align 10h
.text:00407A40 ; Exported entry  55. SimConnect_Text
.text:00407A40
.text:00407A40 ; =============== S U B R O U T I N E =======================================
.text:00407A40
.text:00407A40 ; Attributes: bp-based frame
.text:00407A40
.text:00407A40 ; int __stdcall SimConnect_Text(int, int, float, int, size_t Size, void *Src)
.text:00407A40                 public SimConnect_Text
.text:00407A40 SimConnect_Text proc near               ; DATA XREF: .text:off_409FB8↓o
.text:00407A40
.text:00407A40 var_8           = dword ptr -8
.text:00407A40 var_4           = dword ptr -4
.text:00407A40 arg_0           = dword ptr  8
.text:00407A40 arg_4           = dword ptr  0Ch
.text:00407A40 arg_8           = dword ptr  10h
.text:00407A40 arg_C           = dword ptr  14h
.text:00407A40 Size            = dword ptr  18h
.text:00407A40 Src             = dword ptr  1Ch
.text:00407A40
.text:00407A40                 mov     edi, edi
.text:00407A42                 push    ebp
.text:00407A43                 mov     ebp, esp
.text:00407A45                 sub     esp, 8
.text:00407A48                 mov     eax, [ebp+Size]
.text:00407A4B                 push    ebx
.text:00407A4C                 push    esi
.text:00407A4D                 mov     esi, [ebp+arg_0]
.text:00407A50                 push    edi
.text:00407A51                 lea     ecx, [ebp+var_4]
.text:00407A54                 add     eax, 20h ; ' '
.text:00407A57                 push    ecx
.text:00407A58                 mov     ecx, esi
.text:00407A5A                 mov     [ebp+var_4], 0
.text:00407A61                 mov     [ebp+var_8], eax
.text:00407A64                 mov     ebx, 80004005h
.text:00407A69                 call    sub_403C30
.text:00407A6E                 test    eax, eax
.text:00407A70                 mov     edi, [ebp+var_4]
.text:00407A73                 jnz     short loc_407A8C
.text:00407A75                 mov     edx, [ebp+var_8]
.text:00407A78                 mov     [edi], edx
.text:00407A7A                 mov     dword ptr [edi+8], 0F0000040h
.text:00407A81                 mov     dword ptr [edi+4], 4
.text:00407A88                 xor     ebx, ebx
.text:00407A8A                 jmp     short loc_407AA1
.text:00407A8C ; ---------------------------------------------------------------------------
.text:00407A8C
.text:00407A8C loc_407A8C:                             ; CODE XREF: SimConnect_Text+33↑j
.text:00407A8C                 cmp     eax, 2
.text:00407A8F                 jnz     short loc_407AEA
.text:00407A91                 test    esi, esi
.text:00407A93                 jz      short loc_407A9A
.text:00407A95                 mov     ebx, [esi+14h]
.text:00407A98                 jmp     short loc_407A9D
.text:00407A9A ; ---------------------------------------------------------------------------
.text:00407A9A
.text:00407A9A loc_407A9A:                             ; CODE XREF: SimConnect_Text+53↑j
.text:00407A9A                 mov     ebx, [ebp+Size]
.text:00407A9D
.text:00407A9D loc_407A9D:                             ; CODE XREF: SimConnect_Text+58↑j
.text:00407A9D                 test    ebx, ebx
.text:00407A9F                 jl      short loc_407AEA
.text:00407AA1
.text:00407AA1 loc_407AA1:                             ; CODE XREF: SimConnect_Text+4A↑j
.text:00407AA1                 mov     eax, [ebp+Size]
.text:00407AA4                 mov     ecx, [ebp+Src]
.text:00407AA7                 push    eax             ; Size
.text:00407AA8                 push    ecx             ; Src
.text:00407AA9                 lea     edx, [edi+20h]
.text:00407AAC                 push    edx             ; void *
.text:00407AAD                 call    memcpy
.text:00407AB2                 fld     [ebp+arg_8]
.text:00407AB5                 mov     eax, [ebp+arg_4]
.text:00407AB8                 mov     ecx, [ebp+arg_C]
.text:00407ABB                 mov     edx, [ebp+Size]
.text:00407ABE                 mov     [edi+10h], eax
.text:00407AC1                 fstp    dword ptr [edi+14h]
.text:00407AC4                 add     esp, 0Ch
.text:00407AC7                 test    esi, esi
.text:00407AC9                 mov     [edi+18h], ecx
.text:00407ACC                 mov     [edi+1Ch], edx
.text:00407ACF                 jz      short loc_407AFC
.text:00407AD1                 cmp     byte ptr [esi+1E0h], 0
.text:00407AD8                 jz      short loc_407AFC
.text:00407ADA                 call    sub_403E40
.text:00407ADF                 pop     edi
.text:00407AE0                 pop     esi
.text:00407AE1                 mov     eax, ebx
.text:00407AE3                 pop     ebx
.text:00407AE4                 mov     esp, ebp
.text:00407AE6                 pop     ebp
.text:00407AE7                 retn    18h
.text:00407AEA ; ---------------------------------------------------------------------------
.text:00407AEA
.text:00407AEA loc_407AEA:                             ; CODE XREF: SimConnect_Text+4F↑j
.text:00407AEA                                         ; SimConnect_Text+5F↑j
.text:00407AEA                 mov     eax, [ebp+var_4]
.text:00407AED                 test    eax, eax
.text:00407AEF                 jz      short loc_407AFC
.text:00407AF1                 mov     ecx, [ebp+var_8]
.text:00407AF4                 push    ecx             ; Size
.text:00407AF5                 push    eax             ; void *
.text:00407AF6                 push    esi             ; int
.text:00407AF7                 call    sub_403D30
.text:00407AFC
.text:00407AFC loc_407AFC:                             ; CODE XREF: SimConnect_Text+8F↑j
.text:00407AFC                                         ; SimConnect_Text+98↑j ...
.text:00407AFC                 pop     edi
.text:00407AFD                 pop     esi
.text:00407AFE                 mov     eax, ebx
.text:00407B00                 pop     ebx
.text:00407B01                 mov     esp, ebp
.text:00407B03                 pop     ebp
.text:00407B04                 retn    18h
.text:00407B04 SimConnect_Text endp
.text:00407B04
.text:00407B04 ; ---------------------------------------------------------------------------
.text:00407B07                 align 10h
.text:00407B10 ; Exported entry  53. SimConnect_SubscribeToFacilities
.text:00407B10
.text:00407B10 ; =============== S U B R O U T I N E =======================================
.text:00407B10
.text:00407B10 ; Attributes: bp-based frame
.text:00407B10
.text:00407B10                 public SimConnect_SubscribeToFacilities
.text:00407B10 SimConnect_SubscribeToFacilities proc near
.text:00407B10                                         ; DATA XREF: .text:off_409FB8↓o
.text:00407B10
.text:00407B10 var_4           = dword ptr -4
.text:00407B10 arg_0           = dword ptr  8
.text:00407B10 arg_4           = dword ptr  0Ch
.text:00407B10 arg_8           = dword ptr  10h
.text:00407B10
.text:00407B10                 mov     edi, edi
.text:00407B12                 push    ebp
.text:00407B13                 mov     ebp, esp
.text:00407B15                 push    ecx
.text:00407B16                 push    esi
.text:00407B17                 mov     esi, [ebp+arg_0]
.text:00407B1A                 push    edi
.text:00407B1B                 lea     eax, [ebp+var_4]
.text:00407B1E                 push    eax
.text:00407B1F                 mov     eax, 18h
.text:00407B24                 mov     ecx, esi
.text:00407B26                 mov     [ebp+var_4], 0
.text:00407B2D                 mov     edi, 80004005h
.text:00407B32                 call    sub_403C30
.text:00407B37                 test    eax, eax
.text:00407B39                 mov     ecx, [ebp+var_4]
.text:00407B3C                 jnz     short loc_407B56
.text:00407B3E                 mov     dword ptr [ecx], 18h
.text:00407B44                 mov     dword ptr [ecx+8], 0F0000041h
.text:00407B4B                 mov     dword ptr [ecx+4], 4
.text:00407B52                 xor     edi, edi
.text:00407B54                 jmp     short loc_407B6B
.text:00407B56 ; ---------------------------------------------------------------------------
.text:00407B56
.text:00407B56 loc_407B56:                             ; CODE XREF: SimConnect_SubscribeToFacilities+2C↑j
.text:00407B56                 cmp     eax, 2
.text:00407B59                 jnz     short loc_407B93
.text:00407B5B                 test    esi, esi
.text:00407B5D                 jz      short loc_407B64
.text:00407B5F                 mov     edi, [esi+14h]
.text:00407B62                 jmp     short loc_407B67
.text:00407B64 ; ---------------------------------------------------------------------------
.text:00407B64
.text:00407B64 loc_407B64:                             ; CODE XREF: SimConnect_SubscribeToFacilities+4D↑j
.text:00407B64                 mov     edi, [ebp+arg_0]
.text:00407B67
.text:00407B67 loc_407B67:                             ; CODE XREF: SimConnect_SubscribeToFacilities+52↑j
.text:00407B67                 test    edi, edi
.text:00407B69                 jl      short loc_407B93
.text:00407B6B
.text:00407B6B loc_407B6B:                             ; CODE XREF: SimConnect_SubscribeToFacilities+44↑j
.text:00407B6B                 test    esi, esi
.text:00407B6D                 mov     edx, [ebp+arg_4]
.text:00407B70                 mov     eax, [ebp+arg_8]
.text:00407B73                 mov     [ecx+10h], edx
.text:00407B76                 mov     [ecx+14h], eax
.text:00407B79                 jz      short loc_407BA3
.text:00407B7B                 cmp     byte ptr [esi+1E0h], 0
.text:00407B82                 jz      short loc_407BA3
.text:00407B84                 call    sub_403E40
.text:00407B89                 mov     eax, edi
.text:00407B8B                 pop     edi
.text:00407B8C                 pop     esi
.text:00407B8D                 mov     esp, ebp
.text:00407B8F                 pop     ebp
.text:00407B90                 retn    0Ch
.text:00407B93 ; ---------------------------------------------------------------------------
.text:00407B93
.text:00407B93 loc_407B93:                             ; CODE XREF: SimConnect_SubscribeToFacilities+49↑j
.text:00407B93                                         ; SimConnect_SubscribeToFacilities+59↑j
.text:00407B93                 mov     eax, [ebp+var_4]
.text:00407B96                 test    eax, eax
.text:00407B98                 jz      short loc_407BA3
.text:00407B9A                 push    18h             ; Size
.text:00407B9C                 push    eax             ; void *
.text:00407B9D                 push    esi             ; int
.text:00407B9E                 call    sub_403D30
.text:00407BA3
.text:00407BA3 loc_407BA3:                             ; CODE XREF: SimConnect_SubscribeToFacilities+69↑j
.text:00407BA3                                         ; SimConnect_SubscribeToFacilities+72↑j ...
.text:00407BA3                 mov     eax, edi
.text:00407BA5                 pop     edi
.text:00407BA6                 pop     esi
.text:00407BA7                 mov     esp, ebp
.text:00407BA9                 pop     ebp
.text:00407BAA                 retn    0Ch
.text:00407BAA SimConnect_SubscribeToFacilities endp
.text:00407BAA
.text:00407BAA ; ---------------------------------------------------------------------------
.text:00407BAD                 align 20h
.text:00407BC0 ; Exported entry  58. SimConnect_UnsubscribeToFacilities
.text:00407BC0
.text:00407BC0 ; =============== S U B R O U T I N E =======================================
.text:00407BC0
.text:00407BC0 ; Attributes: bp-based frame
.text:00407BC0
.text:00407BC0                 public SimConnect_UnsubscribeToFacilities
.text:00407BC0 SimConnect_UnsubscribeToFacilities proc near
.text:00407BC0                                         ; DATA XREF: .text:off_409FB8↓o
.text:00407BC0
.text:00407BC0 var_4           = dword ptr -4
.text:00407BC0 arg_0           = dword ptr  8
.text:00407BC0 arg_4           = dword ptr  0Ch
.text:00407BC0
.text:00407BC0                 mov     edi, edi
.text:00407BC2                 push    ebp
.text:00407BC3                 mov     ebp, esp
.text:00407BC5                 push    ecx
.text:00407BC6                 push    esi
.text:00407BC7                 mov     esi, [ebp+arg_0]
.text:00407BCA                 push    edi
.text:00407BCB                 lea     eax, [ebp+var_4]
.text:00407BCE                 push    eax
.text:00407BCF                 mov     eax, 14h
.text:00407BD4                 mov     ecx, esi
.text:00407BD6                 mov     [ebp+var_4], 0
.text:00407BDD                 mov     edi, 80004005h
.text:00407BE2                 call    sub_403C30
.text:00407BE7                 test    eax, eax
.text:00407BE9                 mov     ecx, [ebp+var_4]
.text:00407BEC                 jnz     short loc_407C06
.text:00407BEE                 mov     dword ptr [ecx], 14h
.text:00407BF4                 mov     dword ptr [ecx+8], 0F0000042h
.text:00407BFB                 mov     dword ptr [ecx+4], 4
.text:00407C02                 xor     edi, edi
.text:00407C04                 jmp     short loc_407C1B
.text:00407C06 ; ---------------------------------------------------------------------------
.text:00407C06
.text:00407C06 loc_407C06:                             ; CODE XREF: SimConnect_UnsubscribeToFacilities+2C↑j
.text:00407C06                 cmp     eax, 2
.text:00407C09                 jnz     short loc_407C3D
.text:00407C0B                 test    esi, esi
.text:00407C0D                 jz      short loc_407C14
.text:00407C0F                 mov     edi, [esi+14h]
.text:00407C12                 jmp     short loc_407C17
.text:00407C14 ; ---------------------------------------------------------------------------
.text:00407C14
.text:00407C14 loc_407C14:                             ; CODE XREF: SimConnect_UnsubscribeToFacilities+4D↑j
.text:00407C14                 mov     edi, [ebp+arg_0]
.text:00407C17
.text:00407C17 loc_407C17:                             ; CODE XREF: SimConnect_UnsubscribeToFacilities+52↑j
.text:00407C17                 test    edi, edi
.text:00407C19                 jl      short loc_407C3D
.text:00407C1B
.text:00407C1B loc_407C1B:                             ; CODE XREF: SimConnect_UnsubscribeToFacilities+44↑j
.text:00407C1B                 test    esi, esi
.text:00407C1D                 mov     edx, [ebp+arg_4]
.text:00407C20                 mov     [ecx+10h], edx
.text:00407C23                 jz      short loc_407C4D
.text:00407C25                 cmp     byte ptr [esi+1E0h], 0
.text:00407C2C                 jz      short loc_407C4D
.text:00407C2E                 call    sub_403E40
.text:00407C33                 mov     eax, edi
.text:00407C35                 pop     edi
.text:00407C36                 pop     esi
.text:00407C37                 mov     esp, ebp
.text:00407C39                 pop     ebp
.text:00407C3A                 retn    8
.text:00407C3D ; ---------------------------------------------------------------------------
.text:00407C3D
.text:00407C3D loc_407C3D:                             ; CODE XREF: SimConnect_UnsubscribeToFacilities+49↑j
.text:00407C3D                                         ; SimConnect_UnsubscribeToFacilities+59↑j
.text:00407C3D                 mov     eax, [ebp+var_4]
.text:00407C40                 test    eax, eax
.text:00407C42                 jz      short loc_407C4D
.text:00407C44                 push    14h             ; Size
.text:00407C46                 push    eax             ; void *
.text:00407C47                 push    esi             ; int
.text:00407C48                 call    sub_403D30
.text:00407C4D
.text:00407C4D loc_407C4D:                             ; CODE XREF: SimConnect_UnsubscribeToFacilities+63↑j
.text:00407C4D                                         ; SimConnect_UnsubscribeToFacilities+6C↑j ...
.text:00407C4D                 mov     eax, edi
.text:00407C4F                 pop     edi
.text:00407C50                 pop     esi
.text:00407C51                 mov     esp, ebp
.text:00407C53                 pop     ebp
.text:00407C54                 retn    8
.text:00407C54 SimConnect_UnsubscribeToFacilities endp
.text:00407C54
.text:00407C54 ; ---------------------------------------------------------------------------
.text:00407C57                 align 10h
.text:00407C60 ; Exported entry  40. SimConnect_RequestFacilitiesList
.text:00407C60
.text:00407C60 ; =============== S U B R O U T I N E =======================================
.text:00407C60
.text:00407C60 ; Attributes: bp-based frame
.text:00407C60
.text:00407C60                 public SimConnect_RequestFacilitiesList
.text:00407C60 SimConnect_RequestFacilitiesList proc near
.text:00407C60                                         ; DATA XREF: .text:off_409FB8↓o
.text:00407C60
.text:00407C60 var_4           = dword ptr -4
.text:00407C60 arg_0           = dword ptr  8
.text:00407C60 arg_4           = dword ptr  0Ch
.text:00407C60 arg_8           = dword ptr  10h
.text:00407C60
.text:00407C60                 mov     edi, edi
.text:00407C62                 push    ebp
.text:00407C63                 mov     ebp, esp
.text:00407C65                 push    ecx
.text:00407C66                 push    esi
.text:00407C67                 mov     esi, [ebp+arg_0]
.text:00407C6A                 push    edi
.text:00407C6B                 lea     eax, [ebp+var_4]
.text:00407C6E                 push    eax
.text:00407C6F                 mov     eax, 18h
.text:00407C74                 mov     ecx, esi
.text:00407C76                 mov     [ebp+var_4], 0
.text:00407C7D                 mov     edi, 80004005h
.text:00407C82                 call    sub_403C30
.text:00407C87                 test    eax, eax
.text:00407C89                 mov     ecx, [ebp+var_4]
.text:00407C8C                 jnz     short loc_407CA6
.text:00407C8E                 mov     dword ptr [ecx], 18h
.text:00407C94                 mov     dword ptr [ecx+8], 0F0000043h
.text:00407C9B                 mov     dword ptr [ecx+4], 4
.text:00407CA2                 xor     edi, edi
.text:00407CA4                 jmp     short loc_407CBB
.text:00407CA6 ; ---------------------------------------------------------------------------
.text:00407CA6
.text:00407CA6 loc_407CA6:                             ; CODE XREF: SimConnect_RequestFacilitiesList+2C↑j
.text:00407CA6                 cmp     eax, 2
.text:00407CA9                 jnz     short loc_407CE3
.text:00407CAB                 test    esi, esi
.text:00407CAD                 jz      short loc_407CB4
.text:00407CAF                 mov     edi, [esi+14h]
.text:00407CB2                 jmp     short loc_407CB7
.text:00407CB4 ; ---------------------------------------------------------------------------
.text:00407CB4
.text:00407CB4 loc_407CB4:                             ; CODE XREF: SimConnect_RequestFacilitiesList+4D↑j
.text:00407CB4                 mov     edi, [ebp+arg_0]
.text:00407CB7
.text:00407CB7 loc_407CB7:                             ; CODE XREF: SimConnect_RequestFacilitiesList+52↑j
.text:00407CB7                 test    edi, edi
.text:00407CB9                 jl      short loc_407CE3
.text:00407CBB
.text:00407CBB loc_407CBB:                             ; CODE XREF: SimConnect_RequestFacilitiesList+44↑j
.text:00407CBB                 test    esi, esi
.text:00407CBD                 mov     edx, [ebp+arg_4]
.text:00407CC0                 mov     eax, [ebp+arg_8]
.text:00407CC3                 mov     [ecx+10h], edx
.text:00407CC6                 mov     [ecx+14h], eax
.text:00407CC9                 jz      short loc_407CF3
.text:00407CCB                 cmp     byte ptr [esi+1E0h], 0
.text:00407CD2                 jz      short loc_407CF3
.text:00407CD4                 call    sub_403E40
.text:00407CD9                 mov     eax, edi
.text:00407CDB                 pop     edi
.text:00407CDC                 pop     esi
.text:00407CDD                 mov     esp, ebp
.text:00407CDF                 pop     ebp
.text:00407CE0                 retn    0Ch
.text:00407CE3 ; ---------------------------------------------------------------------------
.text:00407CE3
.text:00407CE3 loc_407CE3:                             ; CODE XREF: SimConnect_RequestFacilitiesList+49↑j
.text:00407CE3                                         ; SimConnect_RequestFacilitiesList+59↑j
.text:00407CE3                 mov     eax, [ebp+var_4]
.text:00407CE6                 test    eax, eax
.text:00407CE8                 jz      short loc_407CF3
.text:00407CEA                 push    18h             ; Size
.text:00407CEC                 push    eax             ; void *
.text:00407CED                 push    esi             ; int
.text:00407CEE                 call    sub_403D30
.text:00407CF3
.text:00407CF3 loc_407CF3:                             ; CODE XREF: SimConnect_RequestFacilitiesList+69↑j
.text:00407CF3                                         ; SimConnect_RequestFacilitiesList+72↑j ...
.text:00407CF3                 mov     eax, edi
.text:00407CF5                 pop     edi
.text:00407CF6                 pop     esi
.text:00407CF7                 mov     esp, ebp
.text:00407CF9                 pop     ebp
.text:00407CFA                 retn    0Ch
.text:00407CFA SimConnect_RequestFacilitiesList endp
.text:00407CFA
.text:00407CFA ; ---------------------------------------------------------------------------
.text:00407CFD                 db 13h dup(0CCh)
.text:00407D10 ; Exported entry  24. SimConnect_GetLastSentPacketID
.text:00407D10
.text:00407D10 ; =============== S U B R O U T I N E =======================================
.text:00407D10
.text:00407D10 ; Attributes: bp-based frame
.text:00407D10
.text:00407D10                 public SimConnect_GetLastSentPacketID
.text:00407D10 SimConnect_GetLastSentPacketID proc near
.text:00407D10                                         ; DATA XREF: .text:off_409FB8↓o
.text:00407D10
.text:00407D10 arg_0           = dword ptr  8
.text:00407D10 arg_4           = dword ptr  0Ch
.text:00407D10
.text:00407D10                 mov     edi, edi
.text:00407D12                 push    ebp
.text:00407D13                 mov     ebp, esp
.text:00407D15                 mov     ecx, [ebp+arg_4]
.text:00407D18                 test    ecx, ecx
.text:00407D1A                 jz      short loc_407D31
.text:00407D1C                 mov     eax, [ebp+arg_0]
.text:00407D1F                 test    eax, eax
.text:00407D21                 jz      short loc_407D31
.text:00407D23                 mov     eax, [eax+0A298h]
.text:00407D29                 mov     [ecx], eax
.text:00407D2B                 xor     eax, eax
.text:00407D2D                 pop     ebp
.text:00407D2E                 retn    8
.text:00407D31 ; ---------------------------------------------------------------------------
.text:00407D31
.text:00407D31 loc_407D31:                             ; CODE XREF: SimConnect_GetLastSentPacketID+A↑j
.text:00407D31                                         ; SimConnect_GetLastSentPacketID+11↑j
.text:00407D31                 mov     eax, 80004005h
.text:00407D36                 pop     ebp
.text:00407D37                 retn    8
.text:00407D37 SimConnect_GetLastSentPacketID endp
.text:00407D37
.text:00407D37 ; ---------------------------------------------------------------------------
.text:00407D3A                 align 10h
.text:00407D40 ; Exported entry  26. SimConnect_InsertString
.text:00407D40
.text:00407D40 ; =============== S U B R O U T I N E =======================================
.text:00407D40
.text:00407D40 ; Attributes: bp-based frame
.text:00407D40
.text:00407D40                 public SimConnect_InsertString
.text:00407D40 SimConnect_InsertString proc near       ; DATA XREF: .text:off_409FB8↓o
.text:00407D40
.text:00407D40 arg_0           = dword ptr  8
.text:00407D40 arg_4           = dword ptr  0Ch
.text:00407D40 arg_8           = dword ptr  10h
.text:00407D40 arg_C           = dword ptr  14h
.text:00407D40 arg_10          = dword ptr  18h
.text:00407D40
.text:00407D40                 mov     edi, edi
.text:00407D42                 push    ebp
.text:00407D43                 mov     ebp, esp
.text:00407D45                 cmp     [ebp+arg_0], 0
.text:00407D49                 mov     eax, 80004005h
.text:00407D4E                 jz      loc_407DF7
.text:00407D54                 mov     ecx, [ebp+arg_10]
.text:00407D57                 test    ecx, ecx
.text:00407D59                 jz      loc_407DF7
.text:00407D5F                 push    edi
.text:00407D60                 mov     edi, [ebp+arg_4]
.text:00407D63                 cmp     edi, 1
.text:00407D66                 jb      loc_407DF6
.text:00407D6C                 push    ebx
.text:00407D6D                 lea     ebx, [ebp+arg_4]
.text:00407D70                 mov     edx, edi
.text:00407D72                 call    sub_404A80
.text:00407D77                 test    eax, eax
.text:00407D79                 jl      short loc_407DF5
.text:00407D7B                 mov     eax, [ebp+arg_4]
.text:00407D7E                 push    esi
.text:00407D7F                 lea     ebx, [eax+1]
.text:00407D82                 mov     esi, ebx
.text:00407D84                 mov     ecx, edi
.text:00407D86                 neg     esi
.text:00407D88                 sub     ecx, eax
.text:00407D8A                 and     esi, 3
.text:00407D8D                 sub     ecx, 1
.text:00407D90                 cmp     ecx, esi
.text:00407D92                 jl      short loc_407DEF
.text:00407D94                 cmp     edi, 7FFFFFFFh
.text:00407D9A                 jbe     short loc_407DA3
.text:00407D9C                 mov     eax, 80070057h
.text:00407DA1                 jmp     short loc_407DB0
.text:00407DA3 ; ---------------------------------------------------------------------------
.text:00407DA3
.text:00407DA3 loc_407DA3:                             ; CODE XREF: SimConnect_InsertString+5A↑j
.text:00407DA3                 mov     eax, [ebp+arg_10]
.text:00407DA6                 mov     edx, [ebp+arg_0]
.text:00407DA9                 mov     ecx, edi
.text:00407DAB                 call    sub_402580
.text:00407DB0
.text:00407DB0 loc_407DB0:                             ; CODE XREF: SimConnect_InsertString+61↑j
.text:00407DB0                 test    eax, eax
.text:00407DB2                 mov     [ebp+arg_10], eax
.text:00407DB5                 jl      short loc_407DF4
.text:00407DB7                 test    esi, esi
.text:00407DB9                 mov     edx, [ebp+arg_0]
.text:00407DBC                 mov     edi, ebx
.text:00407DBE                 lea     ebx, [edi+edx]
.text:00407DC1                 jle     short loc_407DD4
.text:00407DC3                 push    esi             ; Size
.text:00407DC4                 push    0               ; Val
.text:00407DC6                 push    ebx             ; void *
.text:00407DC7                 call    memset
.text:00407DCC                 mov     eax, [ebp+arg_10]
.text:00407DCF                 add     esp, 0Ch
.text:00407DD2                 add     ebx, esi
.text:00407DD4
.text:00407DD4 loc_407DD4:                             ; CODE XREF: SimConnect_InsertString+81↑j
.text:00407DD4                 mov     ecx, [ebp+arg_8]
.text:00407DD7                 add     edi, esi
.text:00407DD9                 test    ecx, ecx
.text:00407DDB                 jz      short loc_407DDF
.text:00407DDD                 mov     [ecx], ebx
.text:00407DDF
.text:00407DDF loc_407DDF:                             ; CODE XREF: SimConnect_InsertString+9B↑j
.text:00407DDF                 mov     ecx, [ebp+arg_C]
.text:00407DE2                 test    ecx, ecx
.text:00407DE4                 jz      short loc_407DF4
.text:00407DE6                 pop     esi
.text:00407DE7                 pop     ebx
.text:00407DE8                 mov     [ecx], edi
.text:00407DEA                 pop     edi
.text:00407DEB                 pop     ebp
.text:00407DEC                 retn    14h
.text:00407DEF ; ---------------------------------------------------------------------------
.text:00407DEF
.text:00407DEF loc_407DEF:                             ; CODE XREF: SimConnect_InsertString+52↑j
.text:00407DEF                 mov     eax, 80004005h
.text:00407DF4
.text:00407DF4 loc_407DF4:                             ; CODE XREF: SimConnect_InsertString+75↑j
.text:00407DF4                                         ; SimConnect_InsertString+A4↑j
.text:00407DF4                 pop     esi
.text:00407DF5
.text:00407DF5 loc_407DF5:                             ; CODE XREF: SimConnect_InsertString+39↑j
.text:00407DF5                 pop     ebx
.text:00407DF6
.text:00407DF6 loc_407DF6:                             ; CODE XREF: SimConnect_InsertString+26↑j
.text:00407DF6                 pop     edi
.text:00407DF7
.text:00407DF7 loc_407DF7:                             ; CODE XREF: SimConnect_InsertString+E↑j
.text:00407DF7                                         ; SimConnect_InsertString+19↑j
.text:00407DF7                 pop     ebp
.text:00407DF8                 retn    14h
.text:00407DF8 SimConnect_InsertString endp
.text:00407DF8
.text:00407DF8 ; ---------------------------------------------------------------------------
.text:00407DFB                 align 10h
.text:00407E00 ; Exported entry  45. SimConnect_RetrieveString
.text:00407E00
.text:00407E00 ; =============== S U B R O U T I N E =======================================
.text:00407E00
.text:00407E00 ; Attributes: bp-based frame
.text:00407E00
.text:00407E00                 public SimConnect_RetrieveString
.text:00407E00 SimConnect_RetrieveString proc near     ; DATA XREF: .text:off_409FB8↓o
.text:00407E00
.text:00407E00 arg_0           = dword ptr  8
.text:00407E00 arg_4           = dword ptr  0Ch
.text:00407E00 arg_8           = dword ptr  10h
.text:00407E00 arg_C           = dword ptr  14h
.text:00407E00 arg_10          = dword ptr  18h
.text:00407E00
.text:00407E00                 mov     edi, edi
.text:00407E02                 push    ebp
.text:00407E03                 mov     ebp, esp
.text:00407E05                 mov     edx, [ebp+arg_0]
.text:00407E08                 test    edx, edx
.text:00407E0A                 mov     eax, 80004005h
.text:00407E0F                 jz      short loc_407E7A
.text:00407E11                 push    ebx
.text:00407E12                 mov     ebx, [ebp+arg_4]
.text:00407E15                 test    ebx, ebx
.text:00407E17                 jz      short loc_407E79
.text:00407E19                 push    esi
.text:00407E1A                 mov     esi, [ebp+arg_8]
.text:00407E1D                 test    esi, esi
.text:00407E1F                 jz      short loc_407E78
.text:00407E21                 mov     ecx, [ebp+arg_C]
.text:00407E24                 test    ecx, ecx
.text:00407E26                 jz      short loc_407E78
.text:00407E28                 push    edi
.text:00407E29                 mov     edi, [ebp+arg_10]
.text:00407E2C                 test    edi, edi
.text:00407E2E                 mov     dword ptr [ecx], 0
.text:00407E34                 jz      short loc_407E3C
.text:00407E36                 mov     dword ptr [edi], 0
.text:00407E3C
.text:00407E3C loc_407E3C:                             ; CODE XREF: SimConnect_RetrieveString+34↑j
.text:00407E3C                 sub     edx, esi
.text:00407E3E                 add     edx, ebx
.text:00407E40                 lea     ebx, [ebp+arg_0]
.text:00407E43                 mov     ecx, esi
.text:00407E45                 mov     [ebp+arg_0], 0
.text:00407E4C                 call    sub_404A80
.text:00407E51                 test    eax, eax
.text:00407E53                 jl      short loc_407E72
.text:00407E55                 test    edi, edi
.text:00407E57                 jz      short loc_407E64
.text:00407E59                 mov     eax, [ebp+arg_0]
.text:00407E5C                 and     eax, 0FFFFFFFCh
.text:00407E5F                 add     eax, 4
.text:00407E62                 mov     [edi], eax
.text:00407E64
.text:00407E64 loc_407E64:                             ; CODE XREF: SimConnect_RetrieveString+57↑j
.text:00407E64                 mov     ecx, [ebp+arg_C]
.text:00407E67                 pop     edi
.text:00407E68                 mov     [ecx], esi
.text:00407E6A                 pop     esi
.text:00407E6B                 xor     eax, eax
.text:00407E6D                 pop     ebx
.text:00407E6E                 pop     ebp
.text:00407E6F                 retn    14h
.text:00407E72 ; ---------------------------------------------------------------------------
.text:00407E72
.text:00407E72 loc_407E72:                             ; CODE XREF: SimConnect_RetrieveString+53↑j
.text:00407E72                 mov     eax, 80004005h
.text:00407E77                 pop     edi
.text:00407E78
.text:00407E78 loc_407E78:                             ; CODE XREF: SimConnect_RetrieveString+1F↑j
.text:00407E78                                         ; SimConnect_RetrieveString+26↑j
.text:00407E78                 pop     esi
.text:00407E79
.text:00407E79 loc_407E79:                             ; CODE XREF: SimConnect_RetrieveString+17↑j
.text:00407E79                 pop     ebx
.text:00407E7A
.text:00407E7A loc_407E7A:                             ; CODE XREF: SimConnect_RetrieveString+F↑j
.text:00407E7A                 pop     ebp
.text:00407E7B                 retn    14h
.text:00407E7B SimConnect_RetrieveString endp
.text:00407E7B
.text:00407E7B ; ---------------------------------------------------------------------------
.text:00407E7E                 db 12h dup(0CCh)
.text:00407E90 ; Exported entry  11. SimConnect_CallDispatch
.text:00407E90
.text:00407E90 ; =============== S U B R O U T I N E =======================================
.text:00407E90
.text:00407E90 ; Attributes: bp-based frame
.text:00407E90
.text:00407E90 ; int __stdcall SimConnect_CallDispatch(void *, int, int)
.text:00407E90                 public SimConnect_CallDispatch
.text:00407E90 SimConnect_CallDispatch proc near       ; DATA XREF: .text:off_409FB8↓o
.text:00407E90
.text:00407E90 arg_0           = dword ptr  8
.text:00407E90 arg_4           = dword ptr  0Ch
.text:00407E90 arg_8           = dword ptr  10h
.text:00407E90
.text:00407E90                 mov     edi, edi
.text:00407E92                 push    ebp
.text:00407E93                 mov     ebp, esp
.text:00407E95                 mov     eax, [ebp+arg_8]
.text:00407E98                 mov     ecx, [ebp+arg_4]
.text:00407E9B                 push    esi
.text:00407E9C                 mov     esi, [ebp+arg_0]
.text:00407E9F                 push    edi
.text:00407EA0                 push    eax             ; int
.text:00407EA1                 push    ecx             ; int
.text:00407EA2                 push    esi             ; void *
.text:00407EA3                 mov     edi, 80004005h
.text:00407EA8                 call    sub_404180
.text:00407EAD                 test    eax, eax
.text:00407EAF                 jnz     short loc_407EB7
.text:00407EB1                 pop     edi
.text:00407EB2                 pop     esi
.text:00407EB3                 pop     ebp
.text:00407EB4                 retn    0Ch
.text:00407EB7 ; ---------------------------------------------------------------------------
.text:00407EB7
.text:00407EB7 loc_407EB7:                             ; CODE XREF: SimConnect_CallDispatch+1F↑j
.text:00407EB7                 cmp     eax, 2
.text:00407EBA                 jnz     short loc_407ED2
.text:00407EBC                 test    esi, esi
.text:00407EBE                 jz      short loc_407EC9
.text:00407EC0                 mov     eax, [esi+14h]
.text:00407EC3                 pop     edi
.text:00407EC4                 pop     esi
.text:00407EC5                 pop     ebp
.text:00407EC6                 retn    0Ch
.text:00407EC9 ; ---------------------------------------------------------------------------
.text:00407EC9
.text:00407EC9 loc_407EC9:                             ; CODE XREF: SimConnect_CallDispatch+2E↑j
.text:00407EC9                 mov     eax, [ebp+arg_8]
.text:00407ECC                 pop     edi
.text:00407ECD                 pop     esi
.text:00407ECE                 pop     ebp
.text:00407ECF                 retn    0Ch
.text:00407ED2 ; ---------------------------------------------------------------------------
.text:00407ED2
.text:00407ED2 loc_407ED2:                             ; CODE XREF: SimConnect_CallDispatch+2A↑j
.text:00407ED2                 mov     eax, edi
.text:00407ED4                 pop     edi
.text:00407ED5                 pop     esi
.text:00407ED6                 pop     ebp
.text:00407ED7                 retn    0Ch
.text:00407ED7 SimConnect_CallDispatch endp
.text:00407ED7
.text:00407ED7 ; ---------------------------------------------------------------------------
.text:00407EDA                 align 10h
.text:00407EE0 ; Exported entry  25. SimConnect_GetNextDispatch
.text:00407EE0
.text:00407EE0 ; =============== S U B R O U T I N E =======================================
.text:00407EE0
.text:00407EE0 ; Attributes: bp-based frame
.text:00407EE0
.text:00407EE0                 public SimConnect_GetNextDispatch
.text:00407EE0 SimConnect_GetNextDispatch proc near    ; DATA XREF: .text:off_409FB8↓o
.text:00407EE0
.text:00407EE0 arg_0           = dword ptr  8
.text:00407EE0 arg_4           = dword ptr  0Ch
.text:00407EE0 arg_8           = dword ptr  10h
.text:00407EE0
.text:00407EE0                 mov     edi, edi
.text:00407EE2                 push    ebp
.text:00407EE3                 mov     ebp, esp
.text:00407EE5                 mov     eax, [ebp+arg_4]
.text:00407EE8                 push    ebx
.text:00407EE9                 mov     ebx, [ebp+arg_8]
.text:00407EEC                 push    esi
.text:00407EED                 mov     esi, [ebp+arg_0]
.text:00407EF0                 push    edi
.text:00407EF1                 push    eax
.text:00407EF2                 mov     eax, esi
.text:00407EF4                 mov     edi, 80004005h
.text:00407EF9                 call    sub_4042F0
.text:00407EFE                 test    eax, eax
.text:00407F00                 jnz     short loc_407F09
.text:00407F02                 pop     edi
.text:00407F03                 pop     esi
.text:00407F04                 pop     ebx
.text:00407F05                 pop     ebp
.text:00407F06                 retn    0Ch
.text:00407F09 ; ---------------------------------------------------------------------------
.text:00407F09
.text:00407F09 loc_407F09:                             ; CODE XREF: SimConnect_GetNextDispatch+20↑j
.text:00407F09                 cmp     eax, 2
.text:00407F0C                 jnz     short loc_407F26
.text:00407F0E                 test    esi, esi
.text:00407F10                 jz      short loc_407F1C
.text:00407F12                 mov     eax, [esi+14h]
.text:00407F15                 pop     edi
.text:00407F16                 pop     esi
.text:00407F17                 pop     ebx
.text:00407F18                 pop     ebp
.text:00407F19                 retn    0Ch
.text:00407F1C ; ---------------------------------------------------------------------------
.text:00407F1C
.text:00407F1C loc_407F1C:                             ; CODE XREF: SimConnect_GetNextDispatch+30↑j
.text:00407F1C                 mov     eax, [ebp+arg_4]
.text:00407F1F                 pop     edi
.text:00407F20                 pop     esi
.text:00407F21                 pop     ebx
.text:00407F22                 pop     ebp
.text:00407F23                 retn    0Ch
.text:00407F26 ; ---------------------------------------------------------------------------
.text:00407F26
.text:00407F26 loc_407F26:                             ; CODE XREF: SimConnect_GetNextDispatch+2C↑j
.text:00407F26                 mov     eax, edi
.text:00407F28                 pop     edi
.text:00407F29                 pop     esi
.text:00407F2A                 pop     ebx
.text:00407F2B                 pop     ebp
.text:00407F2C                 retn    0Ch
.text:00407F2C SimConnect_GetNextDispatch endp
.text:00407F2C
.text:00407F2C ; ---------------------------------------------------------------------------
.text:00407F2F                 align 20h
.text:00407F40 ; Exported entry  34. SimConnect_Open
.text:00407F40
.text:00407F40 ; =============== S U B R O U T I N E =======================================
.text:00407F40
.text:00407F40 ; Attributes: bp-based frame
.text:00407F40
.text:00407F40                 public SimConnect_Open
.text:00407F40 SimConnect_Open proc near               ; DATA XREF: .text:off_409FB8↓o
.text:00407F40
.text:00407F40 arg_0           = dword ptr  8
.text:00407F40 arg_4           = dword ptr  0Ch
.text:00407F40 arg_8           = dword ptr  10h
.text:00407F40 arg_C           = dword ptr  14h
.text:00407F40 arg_10          = dword ptr  18h
.text:00407F40 arg_14          = dword ptr  1Ch
.text:00407F40
.text:00407F40                 mov     edi, edi
.text:00407F42                 push    ebp
.text:00407F43                 mov     ebp, esp
.text:00407F45                 mov     eax, [ebp+arg_14]
.text:00407F48                 push    ebx
.text:00407F49                 push    esi
.text:00407F4A                 mov     esi, [ebp+arg_0]
.text:00407F4D                 push    eax
.text:00407F4E                 push    esi
.text:00407F4F                 mov     ebx, 80004005h
.text:00407F54                 call    sub_402E80
.text:00407F59                 test    eax, eax
.text:00407F5B                 jnz     loc_408045
.text:00407F61                 mov     eax, [esi]
.text:00407F63                 mov     ecx, [ebp+arg_8]
.text:00407F66                 mov     edx, [ebp+arg_C]
.text:00407F69                 mov     [eax+1F8h], ecx
.text:00407F6F                 mov     ecx, [ebp+arg_10]
.text:00407F72                 mov     [eax+1FCh], edx
.text:00407F78                 mov     [eax+0A29Ch], ecx
.text:00407F7E                 push    edi
.text:00407F7F                 mov     dword ptr [eax+200h], 0
.text:00407F89                 mov     edi, [esi]
.text:00407F8B                 lea     edx, [ebp+arg_14]
.text:00407F8E                 push    edx
.text:00407F8F                 mov     eax, 128h
.text:00407F94                 mov     ecx, edi
.text:00407F96                 call    sub_403C30
.text:00407F9B                 test    eax, eax
.text:00407F9D                 mov     esi, [ebp+arg_14]
.text:00407FA0                 jnz     short loc_407FBA
.text:00407FA2                 mov     dword ptr [esi], 128h
.text:00407FA8                 mov     dword ptr [esi+8], 0F0000001h
.text:00407FAF                 mov     dword ptr [esi+4], 4
.text:00407FB6                 xor     ebx, ebx
.text:00407FB8                 jmp     short loc_407FCD
.text:00407FBA ; ---------------------------------------------------------------------------
.text:00407FBA
.text:00407FBA loc_407FBA:                             ; CODE XREF: SimConnect_Open+60↑j
.text:00407FBA                 cmp     eax, 2
.text:00407FBD                 jnz     short loc_407FCD
.text:00407FBF                 test    edi, edi
.text:00407FC1                 jz      short loc_407FC8
.text:00407FC3                 mov     edi, [edi+14h]
.text:00407FC6                 jmp     short loc_407FCB
.text:00407FC8 ; ---------------------------------------------------------------------------
.text:00407FC8
.text:00407FC8 loc_407FC8:                             ; CODE XREF: SimConnect_Open+81↑j
.text:00407FC8                 mov     edi, [ebp+arg_0]
.text:00407FCB
.text:00407FCB loc_407FCB:                             ; CODE XREF: SimConnect_Open+86↑j
.text:00407FCB                 mov     ebx, edi
.text:00407FCD
.text:00407FCD loc_407FCD:                             ; CODE XREF: SimConnect_Open+78↑j
.text:00407FCD                                         ; SimConnect_Open+7D↑j
.text:00407FCD                 xor     edi, edi
.text:00407FCF                 cmp     ebx, edi
.text:00407FD1                 jl      short loc_408032
.text:00407FD3                 mov     eax, [ebp+arg_4]
.text:00407FD6                 lea     edx, [esi+10h]
.text:00407FD9                 mov     ecx, 100h
.text:00407FDE                 call    sub_402580
.text:00407FE3                 mov     ebx, eax
.text:00407FE5                 cmp     ebx, edi
.text:00407FE7                 jl      short loc_408032
.text:00407FE9                 mov     eax, [ebp+arg_0]
.text:00407FEC                 mov     [esi+110h], edi
.text:00407FF2                 mov     dword ptr [esi+114h], 46535800h
.text:00407FFC                 mov     dword ptr [esi+118h], 0Ah
.text:00408006                 mov     [esi+11Ch], edi
.text:0040800C                 mov     dword ptr [esi+120h], 0EF4Bh
.text:00408016                 mov     [esi+124h], edi
.text:0040801C                 mov     esi, [eax]
.text:0040801E                 mov     ebx, 80004005h
.text:00408023                 call    sub_403E40
.text:00408028                 test    eax, eax
.text:0040802A                 jnz     short loc_40802E
.text:0040802C                 xor     ebx, ebx
.text:0040802E
.text:0040802E loc_40802E:                             ; CODE XREF: SimConnect_Open+EA↑j
.text:0040802E                 cmp     ebx, edi
.text:00408030                 jge     short loc_40803C
.text:00408032
.text:00408032 loc_408032:                             ; CODE XREF: SimConnect_Open+91↑j
.text:00408032                                         ; SimConnect_Open+A7↑j
.text:00408032                 mov     ecx, [ebp+arg_0]
.text:00408035                 mov     eax, [ecx]
.text:00408037                 call    sub_403330
.text:0040803C
.text:0040803C loc_40803C:                             ; CODE XREF: SimConnect_Open+F0↑j
.text:0040803C                 pop     edi
.text:0040803D
.text:0040803D loc_40803D:                             ; CODE XREF: SimConnect_Open+108↓j
.text:0040803D                 pop     esi
.text:0040803E                 mov     eax, ebx
.text:00408040                 pop     ebx
.text:00408041                 pop     ebp
.text:00408042                 retn    18h
.text:00408045 ; ---------------------------------------------------------------------------
.text:00408045
.text:00408045 loc_408045:                             ; CODE XREF: SimConnect_Open+1B↑j
.text:00408045                 cmp     eax, 3
.text:00408048                 jnz     short loc_40803D
.text:0040804A                 pop     esi
.text:0040804B                 mov     eax, 80070057h
.text:00408050                 pop     ebx
.text:00408051                 pop     ebp
.text:00408052                 retn    18h
.text:00408052 SimConnect_Open endp
.text:00408052
.text:00408052 ; ---------------------------------------------------------------------------
.text:00408055                 align 10h
.text:00408060 ; Exported entry  17. SimConnect_Close
.text:00408060
.text:00408060 ; =============== S U B R O U T I N E =======================================
.text:00408060
.text:00408060 ; Attributes: bp-based frame
.text:00408060
.text:00408060                 public SimConnect_Close
.text:00408060 SimConnect_Close proc near              ; DATA XREF: .text:off_409FB8↓o
.text:00408060
.text:00408060 arg_0           = dword ptr  8
.text:00408060
.text:00408060                 mov     edi, edi
.text:00408062                 push    ebp
.text:00408063                 mov     ebp, esp
.text:00408065                 push    esi
.text:00408066                 mov     esi, [ebp+arg_0]
.text:00408069                 push    edi
.text:0040806A                 mov     edi, 80004005h
.text:0040806F                 call    sub_403E40
.text:00408074                 test    eax, eax
.text:00408076                 jnz     short loc_40807A
.text:00408078                 xor     edi, edi
.text:0040807A
.text:0040807A loc_40807A:                             ; CODE XREF: SimConnect_Close+16↑j
.text:0040807A                 mov     eax, esi
.text:0040807C                 call    sub_403330
.text:00408081                 test    eax, eax
.text:00408083                 jnz     short loc_40808B
.text:00408085                 pop     edi
.text:00408086                 pop     esi
.text:00408087                 pop     ebp
.text:00408088                 retn    4
.text:0040808B ; ---------------------------------------------------------------------------
.text:0040808B
.text:0040808B loc_40808B:                             ; CODE XREF: SimConnect_Close+23↑j
.text:0040808B                 mov     eax, edi
.text:0040808D                 pop     edi
.text:0040808E                 pop     esi
.text:0040808F                 pop     ebp
.text:00408090                 retn    4
.text:00408090 SimConnect_Close endp
.text:00408090
.text:00408090 ; ---------------------------------------------------------------------------
.text:00408093                 align 10h
.text:004080A0
.text:004080A0 ; =============== S U B R O U T I N E =======================================
.text:004080A0
.text:004080A0 ; Attributes: bp-based frame
.text:004080A0
.text:004080A0 sub_4080A0      proc near               ; DATA XREF: SimConnect_RequestResponseTimes+110↓o
.text:004080A0                                         ; SimConnect_RequestResponseTimes+13F↓o
.text:004080A0
.text:004080A0 arg_0           = dword ptr  8
.text:004080A0
.text:004080A0                 mov     edi, edi
.text:004080A2                 push    ebp
.text:004080A3                 mov     ebp, esp
.text:004080A5                 mov     eax, [ebp+arg_0]
.text:004080A8                 cmp     dword ptr [eax+8], 10001h
.text:004080AF                 jnz     short loc_4080DC
.text:004080B1                 mov     ecx, [eax+1Ch]
.text:004080B4                 mov     edx, [eax+20h]
.text:004080B7                 mov     dword_40B3E8, ecx
.text:004080BD                 mov     ecx, [eax+24h]
.text:004080C0                 mov     dword_40B3EC, edx
.text:004080C6                 mov     edx, [eax+28h]
.text:004080C9                 mov     dword_40B3F0, ecx
.text:004080CF                 mov     dword_40B3F4, edx
.text:004080D5                 mov     byte_40B3E4, 1
.text:004080DC
.text:004080DC loc_4080DC:                             ; CODE XREF: sub_4080A0+F↑j
.text:004080DC                 pop     ebp
.text:004080DD                 retn    0Ch
.text:004080DD sub_4080A0      endp
.text:004080DD
.text:004080DD ; ---------------------------------------------------------------------------
.text:004080E0                 db 10h dup(0CCh)
.text:004080F0 ; Exported entry  43. SimConnect_RequestResponseTimes
.text:004080F0
.text:004080F0 ; =============== S U B R O U T I N E =======================================
.text:004080F0
.text:004080F0 ; Attributes: bp-based frame fuzzy-sp
.text:004080F0
.text:004080F0 ; int __stdcall SimConnect_RequestResponseTimes(void *, int, int)
.text:004080F0                 public SimConnect_RequestResponseTimes
.text:004080F0 SimConnect_RequestResponseTimes proc near
.text:004080F0                                         ; DATA XREF: .text:off_409FB8↓o
.text:004080F0
.text:004080F0 var_28          = dword ptr -28h
.text:004080F0 var_24          = dword ptr -24h
.text:004080F0 var_20          = LARGE_INTEGER ptr -20h
.text:004080F0 PerformanceCount= LARGE_INTEGER ptr -18h
.text:004080F0 var_10          = LARGE_INTEGER ptr -10h
.text:004080F0 Frequency       = LARGE_INTEGER ptr -8
.text:004080F0 arg_0           = dword ptr  8
.text:004080F0 arg_4           = dword ptr  0Ch
.text:004080F0 arg_8           = dword ptr  10h
.text:004080F0
.text:004080F0                 mov     edi, edi
.text:004080F2                 push    ebp
.text:004080F3                 mov     ebp, esp
.text:004080F5                 and     esp, 0FFFFFFF8h
.text:004080F8                 sub     esp, 2Ch
.text:004080FB                 push    ebx
.text:004080FC                 push    esi
.text:004080FD                 push    edi
.text:004080FE                 mov     edi, [ebp+arg_8]
.text:00408101                 xor     edx, edx
.text:00408103                 cmp     edi, edx
.text:00408105                 mov     eax, 80004005h
.text:0040810A                 mov     [esp+38h+var_28], eax
.text:0040810E                 jz      loc_408320
.text:00408114                 mov     ecx, [ebp+arg_4]
.text:00408117                 cmp     ecx, edx
.text:00408119                 jbe     short loc_40811F
.text:0040811B                 xor     eax, eax
.text:0040811D                 rep stosd
.text:0040811F
.text:0040811F loc_40811F:                             ; CODE XREF: SimConnect_RequestResponseTimes+29↑j
.text:0040811F                 lea     eax, [esp+38h+Frequency]
.text:00408123                 push    eax             ; lpFrequency
.text:00408124                 mov     dword ptr [esp+3Ch+Frequency], 1
.text:0040812C                 mov     dword ptr [esp+3Ch+Frequency+4], edx
.text:00408130                 mov     dword ptr [esp+3Ch+PerformanceCount], edx
.text:00408134                 mov     dword ptr [esp+3Ch+PerformanceCount+4], edx
.text:00408138                 mov     dword ptr [esp+3Ch+var_10], edx
.text:0040813C                 mov     dword ptr [esp+3Ch+var_10+4], edx
.text:00408140                 mov     dword ptr [esp+3Ch+var_20], edx
.text:00408144                 mov     dword ptr [esp+3Ch+var_20+4], edx
.text:00408148                 call    ds:QueryPerformanceFrequency
.text:0040814E                 test    eax, eax
.text:00408150                 jz      loc_40831C
.text:00408156                 mov     ebx, ds:QueryPerformanceCounter
.text:0040815C                 lea     ecx, [esp+38h+PerformanceCount]
.text:00408160                 push    ecx             ; lpPerformanceCount
.text:00408161                 call    ebx ; QueryPerformanceCounter
.text:00408163                 mov     eax, dword ptr [esp+38h+PerformanceCount]
.text:00408167                 mov     ecx, dword ptr [esp+38h+PerformanceCount+4]
.text:0040816B                 mov     esi, [ebp+arg_0]
.text:0040816E                 lea     edx, [esp+38h+var_24]
.text:00408172                 mov     dword ptr [esp+38h+var_10], eax
.text:00408176                 mov     dword ptr [esp+38h+var_10+4], ecx
.text:0040817A                 mov     dword ptr [esp+38h+var_20], eax
.text:0040817E                 mov     dword ptr [esp+38h+var_20+4], ecx
.text:00408182                 push    edx
.text:00408183                 mov     eax, 14h
.text:00408188                 mov     ecx, esi
.text:0040818A                 call    sub_403C30
.text:0040818F                 test    eax, eax
.text:00408191                 mov     ecx, [esp+38h+var_24]
.text:00408195                 jnz     short loc_4081AD
.text:00408197                 mov     dword ptr [ecx], 14h
.text:0040819D                 mov     dword ptr [ecx+8], 0F0000003h
.text:004081A4                 mov     dword ptr [ecx+4], 4
.text:004081AB                 jmp     short loc_4081CB
.text:004081AD ; ---------------------------------------------------------------------------
.text:004081AD
.text:004081AD loc_4081AD:                             ; CODE XREF: SimConnect_RequestResponseTimes+A5↑j
.text:004081AD                 cmp     eax, 2
.text:004081B0                 jnz     loc_40831C
.text:004081B6                 test    esi, esi
.text:004081B8                 jz      short loc_4081BF
.text:004081BA                 mov     eax, [esi+14h]
.text:004081BD                 jmp     short loc_4081C3
.text:004081BF ; ---------------------------------------------------------------------------
.text:004081BF
.text:004081BF loc_4081BF:                             ; CODE XREF: SimConnect_RequestResponseTimes+C8↑j
.text:004081BF                 mov     eax, [esp+38h+var_24]
.text:004081C3
.text:004081C3 loc_4081C3:                             ; CODE XREF: SimConnect_RequestResponseTimes+CD↑j
.text:004081C3                 test    eax, eax
.text:004081C5                 jl      loc_40831C
.text:004081CB
.text:004081CB loc_4081CB:                             ; CODE XREF: SimConnect_RequestResponseTimes+BB↑j
.text:004081CB                 mov     eax, [ebp+arg_4]
.text:004081CE                 mov     [ecx+10h], eax
.text:004081D1                 mov     edi, 80004005h
.text:004081D6                 call    sub_403E40
.text:004081DB                 test    eax, eax
.text:004081DD                 jnz     short loc_4081E1
.text:004081DF                 xor     edi, edi
.text:004081E1
.text:004081E1 loc_4081E1:                             ; CODE XREF: SimConnect_RequestResponseTimes+ED↑j
.text:004081E1                 test    edi, edi
.text:004081E3                 mov     [esp+38h+var_28], edi
.text:004081E7                 jl      loc_40831C
.text:004081ED                 cmp     [ebp+arg_4], 0
.text:004081F1                 jbe     loc_40831C
.text:004081F7                 lea     ecx, [esp+38h+var_10]
.text:004081FB                 push    ecx             ; lpPerformanceCount
.text:004081FC                 call    ebx ; QueryPerformanceCounter
.text:004081FE                 push    0               ; int
.text:00408200                 push    offset sub_4080A0 ; int
.text:00408205                 push    esi             ; void *
.text:00408206                 mov     byte_40B3E4, 0
.text:0040820D                 call    sub_404180
.text:00408212                 test    eax, eax
.text:00408214                 jnz     short loc_40823E
.text:00408216                 mov     edi, ds:Sleep
.text:0040821C                 lea     esp, [esp+0]
.text:00408220
.text:00408220 loc_408220:                             ; CODE XREF: SimConnect_RequestResponseTimes+14C↓j
.text:00408220                 cmp     byte_40B3E4, 0
.text:00408227                 jnz     short loc_40823E
.text:00408229                 push    0               ; dwMilliseconds
.text:0040822B                 call    edi ; Sleep
.text:0040822D                 push    0               ; int
.text:0040822F                 push    offset sub_4080A0 ; int
.text:00408234                 push    esi             ; void *
.text:00408235                 call    sub_404180
.text:0040823A                 test    eax, eax
.text:0040823C                 jz      short loc_408220
.text:0040823E
.text:0040823E loc_40823E:                             ; CODE XREF: SimConnect_RequestResponseTimes+124↑j
.text:0040823E                                         ; SimConnect_RequestResponseTimes+137↑j
.text:0040823E                 lea     edx, [esp+38h+var_20]
.text:00408242                 push    edx             ; lpPerformanceCount
.text:00408243                 call    ebx ; QueryPerformanceCounter
.text:00408245                 fild    qword ptr [esp+38h+Frequency]
.text:00408249                 mov     edx, dword ptr [esp+38h+var_20]
.text:0040824D                 mov     eax, dword ptr [esp+38h+PerformanceCount]
.text:00408251                 mov     esi, dword ptr [esp+38h+var_20+4]
.text:00408255                 mov     ecx, dword ptr [esp+38h+PerformanceCount+4]
.text:00408259                 mov     edi, edx
.text:0040825B                 sub     edi, eax
.text:0040825D                 mov     ebx, esi
.text:0040825F                 sbb     ebx, ecx
.text:00408261                 cmp     [ebp+arg_4], 1
.text:00408265                 mov     dword ptr [esp+38h+Frequency], edi
.text:00408269                 mov     dword ptr [esp+38h+Frequency+4], ebx
.text:0040826D                 fild    qword ptr [esp+38h+Frequency]
.text:00408271                 mov     edi, [ebp+arg_8]
.text:00408274                 fdiv    st, st(1)
.text:00408276                 fstp    dword ptr [edi]
.text:00408278                 jbe     short loc_40829A
.text:0040827A                 mov     edi, dword ptr [esp+38h+var_10]
.text:0040827E                 mov     ebx, dword ptr [esp+38h+var_10+4]
.text:00408282                 sub     edi, eax
.text:00408284                 sbb     ebx, ecx
.text:00408286                 mov     dword ptr [esp+38h+Frequency], edi
.text:0040828A                 mov     dword ptr [esp+38h+Frequency+4], ebx
.text:0040828E                 fild    qword ptr [esp+38h+Frequency]
.text:00408292                 mov     edi, [ebp+arg_8]
.text:00408295                 fdiv    st, st(1)
.text:00408297                 fstp    dword ptr [edi+4]
.text:0040829A
.text:0040829A loc_40829A:                             ; CODE XREF: SimConnect_RequestResponseTimes+188↑j
.text:0040829A                 cmp     [ebp+arg_4], 2
.text:0040829E                 jbe     short loc_4082C4
.text:004082A0                 mov     edi, dword_40B3E8
.text:004082A6                 mov     ebx, dword_40B3EC
.text:004082AC                 sub     edi, eax
.text:004082AE                 sbb     ebx, ecx
.text:004082B0                 mov     dword ptr [esp+38h+Frequency], edi
.text:004082B4                 mov     dword ptr [esp+38h+Frequency+4], ebx
.text:004082B8                 fild    qword ptr [esp+38h+Frequency]
.text:004082BC                 mov     edi, [ebp+arg_8]
.text:004082BF                 fdiv    st, st(1)
.text:004082C1                 fstp    dword ptr [edi+8]
.text:004082C4
.text:004082C4 loc_4082C4:                             ; CODE XREF: SimConnect_RequestResponseTimes+1AE↑j
.text:004082C4                 cmp     [ebp+arg_4], 3
.text:004082C8                 jbe     short loc_4082EA
.text:004082CA                 mov     ebx, dword_40B3F0
.text:004082D0                 sub     ebx, eax
.text:004082D2                 mov     eax, dword_40B3F4
.text:004082D7                 sbb     eax, ecx
.text:004082D9                 mov     dword ptr [esp+38h+Frequency], ebx
.text:004082DD                 mov     dword ptr [esp+38h+Frequency+4], eax
.text:004082E1                 fild    qword ptr [esp+38h+Frequency]
.text:004082E5                 fdiv    st, st(1)
.text:004082E7                 fstp    dword ptr [edi+0Ch]
.text:004082EA
.text:004082EA loc_4082EA:                             ; CODE XREF: SimConnect_RequestResponseTimes+1D8↑j
.text:004082EA                 cmp     [ebp+arg_4], 4
.text:004082EE                 jbe     short loc_40831A
.text:004082F0                 sub     edx, dword_40B3F0
.text:004082F6                 mov     eax, [esp+38h+var_28]
.text:004082FA                 sbb     esi, dword_40B3F4
.text:00408300                 mov     dword ptr [esp+38h+Frequency], edx
.text:00408304                 mov     dword ptr [esp+38h+Frequency+4], esi
.text:00408308                 fild    qword ptr [esp+38h+Frequency]
.text:0040830C                 fdivrp  st(1), st
.text:0040830E                 fstp    dword ptr [edi+10h]
.text:00408311                 pop     edi
.text:00408312                 pop     esi
.text:00408313                 pop     ebx
.text:00408314                 mov     esp, ebp
.text:00408316                 pop     ebp
.text:00408317                 retn    0Ch
.text:0040831A ; ---------------------------------------------------------------------------
.text:0040831A
.text:0040831A loc_40831A:                             ; CODE XREF: SimConnect_RequestResponseTimes+1FE↑j
.text:0040831A                 fstp    st
.text:0040831C
.text:0040831C loc_40831C:                             ; CODE XREF: SimConnect_RequestResponseTimes+60↑j
.text:0040831C                                         ; SimConnect_RequestResponseTimes+C0↑j ...
.text:0040831C                 mov     eax, [esp+38h+var_28]
.text:00408320
.text:00408320 loc_408320:                             ; CODE XREF: SimConnect_RequestResponseTimes+1E↑j
.text:00408320                 pop     edi
.text:00408321                 pop     esi
.text:00408322                 pop     ebx
.text:00408323                 mov     esp, ebp
.text:00408325                 pop     ebp
.text:00408326                 retn    0Ch
.text:00408326 SimConnect_RequestResponseTimes endp
.text:00408326
.text:00408326 ; ---------------------------------------------------------------------------
.text:00408329                 db 5 dup(0CCh)
.text:0040832E ; [0000004D BYTES: COLLAPSED FUNCTION _pre_c_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040837B                 align 10h
.text:00408380 ; [0000019F BYTES: COLLAPSED FUNCTION _CRT_INIT(x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040851F                 db 5 dup(0CCh)
.text:00408524 ; [00000116 BYTES: COLLAPSED FUNCTION ___DllMainCRTStartup. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040863A                 db 5 dup(0CCh)
.text:0040863F ; [00000021 BYTES: COLLAPSED FUNCTION DllEntryPoint. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408660                 db 5 dup(0CCh)
.text:00408665 ; [0000000F BYTES: COLLAPSED FUNCTION __security_check_cookie(x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408674                 db 6 dup(0CCh)
.text:0040867A ; [00000006 BYTES: COLLAPSED FUNCTION operator delete(void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408680                 db 6 dup(0CCh)
.text:00408686 ; [00000006 BYTES: COLLAPSED FUNCTION operator new(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040868C                 db 6 dup(0CCh)
.text:00408692 ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::what(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408698                 db 6 dup(0CCh)
.text:0040869E ; [00000006 BYTES: COLLAPSED FUNCTION std::exception::exception(std::exception const &). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004086A4                 db 6 dup(0CCh)
.text:004086AA ; [00000006 BYTES: COLLAPSED FUNCTION operator new[](uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004086B0                 db 6 dup(0CCh)
.text:004086B6 ; [00000006 BYTES: COLLAPSED FUNCTION operator delete[](void *). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004086BC                 db 5 dup(0CCh)
.text:004086C1 ; [00000049 BYTES: COLLAPSED FUNCTION type_info::`vector deleting destructor'(uint). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040870A                 db 5 dup(0CCh)
.text:0040870F
.text:0040870F ; =============== S U B R O U T I N E =======================================
.text:0040870F
.text:0040870F
.text:0040870F ; void __cdecl sub_40870F()
.text:0040870F sub_40870F      proc near               ; DATA XREF: _pre_c_init+3C↑o
.text:0040870F                 push    offset unk_40B0B4
.text:00408714                 call    __clean_type_info_names_internal
.text:00408719                 pop     ecx
.text:0040871A                 retn
.text:0040871A sub_40870F      endp
.text:0040871A
.text:0040871A ; ---------------------------------------------------------------------------
.text:0040871B                 align 10h
.text:00408720 ; [0000009F BYTES: COLLAPSED FUNCTION __onexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004087BF                 db 5 dup(0CCh)
.text:004087C4 ; [00000012 BYTES: COLLAPSED FUNCTION _atexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004087D6                 db 5 dup(0CCh)
.text:004087DB
.text:004087DB ; =============== S U B R O U T I N E =======================================
.text:004087DB
.text:004087DB
.text:004087DB sub_4087DB      proc near               ; CODE XREF: _pre_c_init+2D↑p
.text:004087DB                 push    esi
.text:004087DC                 push    edi
.text:004087DD                 mov     eax, offset dword_4014EC
.text:004087E2                 mov     edi, offset dword_4014EC
.text:004087E7                 cmp     eax, edi
.text:004087E9                 mov     esi, eax
.text:004087EB                 jnb     short loc_4087FC
.text:004087ED
.text:004087ED loc_4087ED:                             ; CODE XREF: sub_4087DB+1F↓j
.text:004087ED                 mov     eax, [esi]
.text:004087EF                 test    eax, eax
.text:004087F1                 jz      short loc_4087F5
.text:004087F3                 call    eax
.text:004087F5
.text:004087F5 loc_4087F5:                             ; CODE XREF: sub_4087DB+16↑j
.text:004087F5                 add     esi, 4
.text:004087F8                 cmp     esi, edi
.text:004087FA                 jb      short loc_4087ED
.text:004087FC
.text:004087FC loc_4087FC:                             ; CODE XREF: sub_4087DB+10↑j
.text:004087FC                 pop     edi
.text:004087FD                 pop     esi
.text:004087FE                 retn
.text:004087FE sub_4087DB      endp
.text:004087FE
.text:004087FE ; ---------------------------------------------------------------------------
.text:004087FF                 db 5 dup(0CCh)
.text:00408804
.text:00408804 ; =============== S U B R O U T I N E =======================================
.text:00408804
.text:00408804
.text:00408804 ; void __cdecl sub_408804()
.text:00408804 sub_408804      proc near               ; DATA XREF: _pre_c_init+32↑o
.text:00408804                 push    esi
.text:00408805                 push    edi
.text:00408806                 mov     eax, offset dword_4014F4
.text:0040880B                 mov     edi, offset dword_4014F4
.text:00408810                 cmp     eax, edi
.text:00408812                 mov     esi, eax
.text:00408814                 jnb     short loc_408825
.text:00408816
.text:00408816 loc_408816:                             ; CODE XREF: sub_408804+1F↓j
.text:00408816                 mov     eax, [esi]
.text:00408818                 test    eax, eax
.text:0040881A                 jz      short loc_40881E
.text:0040881C                 call    eax
.text:0040881E
.text:0040881E loc_40881E:                             ; CODE XREF: sub_408804+16↑j
.text:0040881E                 add     esi, 4
.text:00408821                 cmp     esi, edi
.text:00408823                 jb      short loc_408816
.text:00408825
.text:00408825 loc_408825:                             ; CODE XREF: sub_408804+10↑j
.text:00408825                 pop     edi
.text:00408826                 pop     esi
.text:00408827                 retn
.text:00408827 sub_408804      endp
.text:00408827
.text:00408827 ; ---------------------------------------------------------------------------
.text:00408828                 align 10h
.text:00408830 ; [00000029 BYTES: COLLAPSED FUNCTION __ValidateImageBase. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408859                 align 10h
.text:00408860 ; [00000042 BYTES: COLLAPSED FUNCTION __FindPESection. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004088A2                 db 5 dup(0CCh)
.text:004088A7 ; [0000006C BYTES: COLLAPSED FUNCTION __IsNonwritableInCurrentImage. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408913                 align 8
.text:00408918 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040891E                 db 6 dup(0CCh)
.text:00408924 ; [00000006 BYTES: COLLAPSED FUNCTION _initterm_e. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040892A                 align 10h
.text:00408930 ; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408936                 db 6 dup(0CCh)
.text:0040893C ; [00000006 BYTES: COLLAPSED FUNCTION __CppXcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408942                 db 5 dup(0CCh)
.text:00408947 ; [00000020 BYTES: COLLAPSED FUNCTION DllMain(x,x,x). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408967                 db 5 dup(0CCh)
.text:0040896C ; [00000045 BYTES: COLLAPSED FUNCTION __SEH_prolog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004089B1 ; [00000014 BYTES: COLLAPSED FUNCTION __SEH_epilog4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004089C5                 db 5 dup(0CCh)
.text:004089CA ; [00000023 BYTES: COLLAPSED FUNCTION __except_handler4. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004089ED                 db 5 dup(0CCh)
.text:004089F2 ; [00000094 BYTES: COLLAPSED FUNCTION ___security_init_cookie. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408A86                 db 5 dup(0CCh)
.text:00408A8B ; [00000104 BYTES: COLLAPSED FUNCTION ___report_gsfailure. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408B8F                 db 5 dup(0CCh)
.text:00408B94 ; [0000005E BYTES: COLLAPSED FUNCTION __ArrayUnwind(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408BF2                 db 5 dup(0CCh)
.text:00408BF7 ; [00000063 BYTES: COLLAPSED FUNCTION `eh vector destructor iterator'(void *,uint,int,void (*)(void *)). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408C5A                 align 10h
.text:00408C60 ; [00000006 BYTES: COLLAPSED FUNCTION __clean_type_info_names_internal. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408C66                 db 6 dup(0CCh)
.text:00408C6C ; [00000006 BYTES: COLLAPSED FUNCTION _unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408C72                 align 8
.text:00408C78 ; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408C7E                 db 6 dup(0CCh)
.text:00408C84 ; [00000006 BYTES: COLLAPSED FUNCTION _lock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408C8A                 align 10h
.text:00408C90 ; [00000006 BYTES: COLLAPSED FUNCTION _except_handler4_common. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408C96                 db 6 dup(0CCh)
.text:00408C9C ; [00000006 BYTES: COLLAPSED FUNCTION _crt_debugger_hook. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408CA2                 align 8
.text:00408CA8 ; [00000006 BYTES: COLLAPSED FUNCTION terminate(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408CAE                 db 6 dup(0CCh)
.text:00408CB4 ; [00000006 BYTES: COLLAPSED FUNCTION type_info::_type_info_dtor_internal_method(void). PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408CBA                 align 10h
.text:00408CC0 ; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408CC6                 db 6 dup(0CCh)
.text:00408CCC ; [00000006 BYTES: COLLAPSED FUNCTION __CxxFrameHandler3. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408CD2                 align 8
.text:00408CD8 ; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408CDE                 db 6 dup(0CCh)
.text:00408CE4 ; [00000006 BYTES: COLLAPSED FUNCTION _CxxThrowException. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00408CEA                 align 20h
.text:00408D00 ; START OF FUNCTION CHUNK FOR sub_4024A0
.text:00408D00
.text:00408D00 loc_408D00:                             ; DATA XREF: .text:stru_409098↓o
.text:00408D00 ; __unwind { // SEH_4024A0
.text:00408D00 ;   cleanup() // owned by 4024D9
.text:00408D00                 mov     ecx, [ebp+var_10]
.text:00408D03                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00408D09 ; ---------------------------------------------------------------------------
.text:00408D09
.text:00408D09 SEH_4024A0:                             ; DATA XREF: .text:004014C4↑o
.text:00408D09                                         ; sub_4024A0+7↑o
.text:00408D09                 mov     edx, [esp-4+arg_4]
.text:00408D0D                 lea     eax, [edx+0Ch]
.text:00408D10                 mov     ecx, [edx-10h]
.text:00408D13                 xor     ecx, eax        ; StackCookie
.text:00408D15                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408D1A                 mov     eax, offset stru_4090A0
.text:00408D1F                 jmp     __CxxFrameHandler3
.text:00408D1F ; } // starts at 408D00
.text:00408D1F ; END OF FUNCTION CHUNK FOR sub_4024A0
.text:00408D1F ; ---------------------------------------------------------------------------
.text:00408D24                 align 10h
.text:00408D30 ; START OF FUNCTION CHUNK FOR sub_403A00
.text:00408D30
.text:00408D30 loc_408D30:                             ; DATA XREF: .text:stru_4090C4↓o
.text:00408D30 ; __unwind { // SEH_403A00
.text:00408D30                 lea     ecx, [ebp+arg_0]
.text:00408D33                 jmp     ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00408D39 ; ---------------------------------------------------------------------------
.text:00408D39
.text:00408D39 SEH_403A00:                             ; DATA XREF: .text:004014C8↑o
.text:00408D39                                         ; sub_403A00+7↑o
.text:00408D39                 mov     edx, [esp-4+lpFileName]
.text:00408D3D                 lea     eax, [edx+0Ch]
.text:00408D40                 mov     ecx, [edx-48h]
.text:00408D43                 xor     ecx, eax        ; StackCookie
.text:00408D45                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408D4A                 mov     ecx, [edx-4]
.text:00408D4D                 xor     ecx, eax        ; StackCookie
.text:00408D4F                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408D54                 mov     eax, offset stru_4090CC
.text:00408D59                 jmp     __CxxFrameHandler3
.text:00408D59 ; } // starts at 408D30
.text:00408D59 ; END OF FUNCTION CHUNK FOR sub_403A00
.text:00408D59 ; ---------------------------------------------------------------------------
.text:00408D5E                 db 12h dup(0CCh)
.text:00408D70 ; ---------------------------------------------------------------------------
.text:00408D70 ; START OF FUNCTION CHUNK FOR sub_403490
.text:00408D70
.text:00408D70 loc_408D70:                             ; DATA XREF: .text:stru_4090F0↓o
.text:00408D70 ; __unwind { // SEH_403490
.text:00408D70 ;   cleanup() // owned by 4034E4
.text:00408D70 ;   cleanup() // owned by 40380F
.text:00408D70                 lea     ecx, [ebp+arg_0]
.text:00408D73                 jmp     ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00408D79 ; ---------------------------------------------------------------------------
.text:00408D79
.text:00408D79 loc_408D79:                             ; DATA XREF: .text:004090F8↓o
.text:00408D79 ;   cleanup() // owned by 4034F3
.text:00408D79                 lea     ecx, [ebp+var_848]
.text:00408D7F                 jmp     ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00408D85 ; ---------------------------------------------------------------------------
.text:00408D85
.text:00408D85 SEH_403490:                             ; DATA XREF: .text:004014CC↑o
.text:00408D85                                         ; sub_403490+7↑o
.text:00408D85                 mov     edx, [esp-4+lpFileName]
.text:00408D89                 lea     eax, [edx+0Ch]
.text:00408D8C                 mov     ecx, [edx-858h]
.text:00408D92                 xor     ecx, eax        ; StackCookie
.text:00408D94                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408D99                 mov     ecx, [edx-4]
.text:00408D9C                 xor     ecx, eax        ; StackCookie
.text:00408D9E                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408DA3                 mov     eax, offset stru_409100
.text:00408DA8                 jmp     __CxxFrameHandler3
.text:00408DA8 ; } // starts at 408D70
.text:00408DA8 ; END OF FUNCTION CHUNK FOR sub_403490
.text:00408DA8 ; ---------------------------------------------------------------------------
.text:00408DAD                 align 20h
.text:00408DC0 ; START OF FUNCTION CHUNK FOR sub_4048A0
.text:00408DC0
.text:00408DC0 loc_408DC0:                             ; DATA XREF: .text:stru_409124↓o
.text:00408DC0 ; __unwind { // SEH_4048A0
.text:00408DC0 ;   cleanup() // owned by 4048D8
.text:00408DC0 ;   cleanup() // owned by 404905
.text:00408DC0                 lea     ecx, [ebp+var_28]
.text:00408DC3                 jmp     ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00408DC9 ; ---------------------------------------------------------------------------
.text:00408DC9
.text:00408DC9 loc_408DC9:                             ; DATA XREF: .text:0040912C↓o
.text:00408DC9 ;   cleanup() // owned by 4048E8
.text:00408DC9                 lea     ecx, [ebp+pExceptionObject]
.text:00408DCC                 jmp     ds:??1exception@std@@UAE@XZ ; std::exception::~exception(void)
.text:00408DD2 ; ---------------------------------------------------------------------------
.text:00408DD2
.text:00408DD2 SEH_4048A0:                             ; DATA XREF: .text:004014D0↑o
.text:00408DD2                                         ; sub_4048A0+7↑o
.text:00408DD2                 mov     edx, [esp-4+arg_4]
.text:00408DD6                 lea     eax, [edx+0Ch]
.text:00408DD9                 mov     ecx, [edx-4Ch]
.text:00408DDC                 xor     ecx, eax        ; StackCookie
.text:00408DDE                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408DE3                 mov     eax, offset stru_409134
.text:00408DE8                 jmp     __CxxFrameHandler3
.text:00408DE8 ; } // starts at 408DC0
.text:00408DE8 ; END OF FUNCTION CHUNK FOR sub_4048A0
.text:00408DE8 ; ---------------------------------------------------------------------------
.text:00408DED                 align 20h
.text:00408E00 ; START OF FUNCTION CHUNK FOR sub_404630
.text:00408E00
.text:00408E00 SEH_404630:                             ; DATA XREF: .text:004014D4↑o
.text:00408E00                                         ; sub_404630+7↑o
.text:00408E00 ; __unwind { // SEH_404630
.text:00408E00                 mov     edx, [esp-4+arg_4]
.text:00408E04                 lea     eax, [edx+0Ch]
.text:00408E07                 mov     ecx, [edx-28h]
.text:00408E0A                 xor     ecx, eax        ; StackCookie
.text:00408E0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408E11                 mov     eax, offset stru_4091C0
.text:00408E16                 jmp     __CxxFrameHandler3
.text:00408E16 ; } // starts at 408E00
.text:00408E16 ; END OF FUNCTION CHUNK FOR sub_404630
.text:00408E16 ; ---------------------------------------------------------------------------
.text:00408E1B                 align 10h
.text:00408E20 ; START OF FUNCTION CHUNK FOR sub_402780
.text:00408E20
.text:00408E20 loc_408E20:                             ; DATA XREF: .text:stru_4091E4↓o
.text:00408E20 ; __unwind { // SEH_402780
.text:00408E20 ;   cleanup() // owned by 4027EC
.text:00408E20                 mov     ecx, [ebp+var_10]
.text:00408E23                 jmp     loc_401710
.text:00408E28 ; ---------------------------------------------------------------------------
.text:00408E28
.text:00408E28 loc_408E28:                             ; DATA XREF: .text:004091EC↓o
.text:00408E28 ;   cleanup() // owned by 4027B8
.text:00408E28                 mov     esi, [ebp+var_10]
.text:00408E2B                 add     esi, 1E4h
.text:00408E31                 jmp     loc_401510
.text:00408E36 ; ---------------------------------------------------------------------------
.text:00408E36
.text:00408E36 SEH_402780:                             ; DATA XREF: .text:004014D8↑o
.text:00408E36                                         ; sub_402780+7↑o
.text:00408E36                 mov     edx, [esp-4+arg_4]
.text:00408E3A                 lea     eax, [edx+0Ch]
.text:00408E3D                 mov     ecx, [edx-14h]
.text:00408E40                 xor     ecx, eax        ; StackCookie
.text:00408E42                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408E47                 mov     eax, offset stru_4091F4
.text:00408E4C                 jmp     __CxxFrameHandler3
.text:00408E4C ; } // starts at 408E20
.text:00408E4C ; END OF FUNCTION CHUNK FOR sub_402780
.text:00408E4C ; ---------------------------------------------------------------------------
.text:00408E51                 align 10h
.text:00408E60
.text:00408E60 ; =============== S U B R O U T I N E =======================================
.text:00408E60
.text:00408E60
.text:00408E60 sub_408E60      proc near               ; DATA XREF: .text:0040921C↓o
.text:00408E60
.text:00408E60 ; FUNCTION CHUNK AT .text:00401710 SIZE 00000040 BYTES
.text:00408E60
.text:00408E60                 mov     ecx, [ebp+8]
.text:00408E63                 jmp     loc_401710
.text:00408E63 sub_408E60      endp
.text:00408E63
.text:00408E68
.text:00408E68 ; =============== S U B R O U T I N E =======================================
.text:00408E68
.text:00408E68
.text:00408E68 sub_408E68      proc near               ; DATA XREF: .text:00409224↓o
.text:00408E68
.text:00408E68 ; FUNCTION CHUNK AT .text:00401510 SIZE 0000002F BYTES
.text:00408E68
.text:00408E68                 mov     esi, [ebp+8]
.text:00408E6B                 add     esi, 1E4h
.text:00408E71                 jmp     loc_401510
.text:00408E71 sub_408E68      endp
.text:00408E71
.text:00408E76
.text:00408E76 ; =============== S U B R O U T I N E =======================================
.text:00408E76
.text:00408E76
.text:00408E76 sub_408E76      proc near               ; DATA XREF: .text:004014DC↑o
.text:00408E76
.text:00408E76 arg_4           = dword ptr  8
.text:00408E76
.text:00408E76                 mov     edx, [esp+arg_4]
.text:00408E7A                 lea     eax, [edx+0Ch]
.text:00408E7D                 mov     ecx, [edx-14h]
.text:00408E80                 xor     ecx, eax        ; StackCookie
.text:00408E82                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408E87                 mov     eax, offset dword_409228
.text:00408E8C                 jmp     __CxxFrameHandler3
.text:00408E8C sub_408E76      endp
.text:00408E8C
.text:00408E8C ; ---------------------------------------------------------------------------
.text:00408E91                 align 10h
.text:00408EA0 ; START OF FUNCTION CHUNK FOR sub_402B20
.text:00408EA0
.text:00408EA0 loc_408EA0:                             ; DATA XREF: .text:stru_40924C↓o
.text:00408EA0 ; __unwind { // SEH_402B20
.text:00408EA0 ;   cleanup() // owned by 402B83
.text:00408EA0                 lea     ecx, [ebp+var_2C]
.text:00408EA3                 jmp     ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00408EA9 ; ---------------------------------------------------------------------------
.text:00408EA9
.text:00408EA9 SEH_402B20:                             ; DATA XREF: .text:004014E0↑o
.text:00408EA9                                         ; sub_402B20+7↑o
.text:00408EA9                 mov     edx, [esp-4+lpString1]
.text:00408EAD                 lea     eax, [edx+0Ch]
.text:00408EB0                 mov     ecx, [edx-5Ch]
.text:00408EB3                 xor     ecx, eax        ; StackCookie
.text:00408EB5                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408EBA                 mov     ecx, [edx-4]
.text:00408EBD                 xor     ecx, eax        ; StackCookie
.text:00408EBF                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408EC4                 mov     eax, offset stru_409254
.text:00408EC9                 jmp     __CxxFrameHandler3
.text:00408EC9 ; } // starts at 408EA0
.text:00408EC9 ; END OF FUNCTION CHUNK FOR sub_402B20
.text:00408EC9 ; ---------------------------------------------------------------------------
.text:00408ECE                 align 20h
.text:00408EE0 ; START OF FUNCTION CHUNK FOR sub_402E80
.text:00408EE0
.text:00408EE0 loc_408EE0:                             ; DATA XREF: .text:stru_409278↓o
.text:00408EE0 ; __unwind { // SEH_402E80
.text:00408EE0                 lea     ecx, [ebp+var_4C]
.text:00408EE3                 jmp     ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00408EE9 ; ---------------------------------------------------------------------------
.text:00408EE9
.text:00408EE9 loc_408EE9:                             ; DATA XREF: .text:00409280↓o
.text:00408EE9                 lea     ecx, [ebp+var_30]
.text:00408EEC                 jmp     ds:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text:00408EF2 ; ---------------------------------------------------------------------------
.text:00408EF2
.text:00408EF2 loc_408EF2:                             ; DATA XREF: .text:00409288↓o
.text:00408EF2                 mov     eax, [ebp+var_68]
.text:00408EF5                 push    eax             ; void *
.text:00408EF6                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00408EFB                 pop     ecx
.text:00408EFC                 retn
.text:00408EFD ; ---------------------------------------------------------------------------
.text:00408EFD
.text:00408EFD loc_408EFD:                             ; DATA XREF: .text:00409290↓o
.text:00408EFD                 mov     eax, [ebp+var_68]
.text:00408F00                 push    eax             ; void *
.text:00408F01                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00408F06                 pop     ecx
.text:00408F07                 retn
.text:00408F08 ; ---------------------------------------------------------------------------
.text:00408F08
.text:00408F08 loc_408F08:                             ; DATA XREF: .text:00409298↓o
.text:00408F08                 mov     eax, [ebp+var_68]
.text:00408F0B                 push    eax             ; void *
.text:00408F0C                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00408F11                 pop     ecx
.text:00408F12                 retn
.text:00408F13 ; ---------------------------------------------------------------------------
.text:00408F13
.text:00408F13 loc_408F13:                             ; DATA XREF: .text:004092A0↓o
.text:00408F13                 mov     eax, [ebp+var_68]
.text:00408F16                 push    eax             ; void *
.text:00408F17                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text:00408F1C                 pop     ecx
.text:00408F1D                 retn
.text:00408F1E ; ---------------------------------------------------------------------------
.text:00408F1E
.text:00408F1E SEH_402E80:                             ; DATA XREF: .text:004014E4↑o
.text:00408F1E                                         ; sub_402E80+A↑o
.text:00408F1E                 mov     edx, [esp-4+arg_4]
.text:00408F22                 lea     eax, [edx-6Ch]
.text:00408F25                 mov     ecx, [edx-70h]
.text:00408F28                 xor     ecx, eax        ; StackCookie
.text:00408F2A                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408F2F                 add     eax, 0Ch
.text:00408F32                 mov     ecx, [edx-8]
.text:00408F35                 xor     ecx, eax        ; StackCookie
.text:00408F37                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text:00408F3C                 mov     eax, offset stru_4092A8
.text:00408F41                 jmp     __CxxFrameHandler3
.text:00408F41 ; } // starts at 408EE0
.text:00408F41 ; END OF FUNCTION CHUNK FOR sub_402E80
.text:00408F41 ; ---------------------------------------------------------------------------
.text:00408F46                 align 4
.text:00408F48 stru_408F48     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00408F48                                         ; DATA XREF: ___DllMainCRTStartup+2↑o
.text:00408F4C                 dd 0                    ; GSCookieXOROffset
.text:00408F50                 dd 0FFFFFFD0h           ; EHCookieOffset
.text:00408F54                 dd 0                    ; EHCookieXOROffset
.text:00408F58                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00408F5C                 dd 0                    ; ScopeRecord.FilterFunc
.text:00408F60                 dd offset loc_40862F    ; ScopeRecord.HandlerFunc
.text:00408F64                 dd 0                    ; ScopeRecord.EnclosingLevel
.text:00408F68                 dd offset loc_4085FB    ; ScopeRecord.FilterFunc
.text:00408F6C                 dd offset loc_40860F    ; ScopeRecord.HandlerFunc
.text:00408F70 stru_408F70     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00408F70                                         ; DATA XREF: __onexit+2↑o
.text:00408F74                 dd 0                    ; GSCookieXOROffset
.text:00408F78                 dd 0FFFFFFCCh           ; EHCookieOffset
.text:00408F7C                 dd 0                    ; EHCookieXOROffset
.text:00408F80                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00408F84                 dd 0                    ; ScopeRecord.FilterFunc
.text:00408F88                 dd offset loc_4087B6    ; ScopeRecord.HandlerFunc
.text:00408F8C                 align 10h
.text:00408F90 stru_408F90     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00408F90                                         ; DATA XREF: __IsNonwritableInCurrentImage+2↑o
.text:00408F94                 dd 0                    ; GSCookieXOROffset
.text:00408F98                 dd 0FFFFFFD8h           ; EHCookieOffset
.text:00408F9C                 dd 0                    ; EHCookieXOROffset
.text:00408FA0                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00408FA4                 dd offset loc_4088ED    ; ScopeRecord.FilterFunc
.text:00408FA8                 dd offset loc_408901    ; ScopeRecord.HandlerFunc
.text:00408FAC                 align 10h
.text:00408FB0 stru_408FB0     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00408FB0                                         ; DATA XREF: __ArrayUnwind(void *,uint,int,void (*)(void *))+2↑o
.text:00408FB4                 dd 0                    ; GSCookieXOROffset
.text:00408FB8                 dd 0FFFFFFCCh           ; EHCookieOffset
.text:00408FBC                 dd 0                    ; EHCookieXOROffset
.text:00408FC0                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00408FC4                 dd offset loc_408BB7    ; ScopeRecord.FilterFunc
.text:00408FC8                 dd offset loc_408BE0    ; ScopeRecord.HandlerFunc
.text:00408FCC                 align 10h
.text:00408FD0 stru_408FD0     dd 0FFFFFFFEh           ; GSCookieOffset
.text:00408FD0                                         ; DATA XREF: `eh vector destructor iterator'(void *,uint,int,void (*)(void *))+2↑o
.text:00408FD4                 dd 0                    ; GSCookieXOROffset
.text:00408FD8                 dd 0FFFFFFD4h           ; EHCookieOffset
.text:00408FDC                 dd 0                    ; EHCookieXOROffset
.text:00408FE0                 dd 0FFFFFFFEh           ; ScopeRecord.EnclosingLevel
.text:00408FE4                 dd 0                    ; ScopeRecord.FilterFunc
.text:00408FE8                 dd offset loc_408C42    ; ScopeRecord.HandlerFunc
.text:00408FEC unk_408FEC      db    0                 ; DATA XREF: .text:0040904C↓o
.text:00408FEC                                         ; .text:00409084↓o
.text:00408FED                 db    0
.text:00408FEE                 db    0
.text:00408FEF                 db    0
.text:00408FF0                 dd offset off_40B034
.text:00408FF4                 align 8
.text:00408FF8                 dd 0FFFFFFFFh, 0
.text:00409000                 dd 0Ch
.text:00409004                 dd offset ??0exception@std@@QAE@ABV01@@Z ; std::exception::exception(std::exception const &)
.text:00409008 dword_409008    dd 0                    ; DATA XREF: .text:00409048↓o
.text:0040900C                 dd offset off_40B050
.text:00409010                 dd 0
.text:00409014                 dd 0FFFFFFFFh, 0
.text:0040901C                 dd 28h
.text:00409020                 dd offset sub_4024A0
.text:00409024 unk_409024      db    0                 ; DATA XREF: .text:00409044↓o
.text:00409025                 db    0
.text:00409026                 db    0
.text:00409027                 db    0
.text:00409028                 dd offset off_40B070
.text:0040902C                 align 10h
.text:00409030                 dd 0FFFFFFFFh, 0
.text:00409038                 dd 28h
.text:0040903C                 dd offset sub_404980
.text:00409040 dword_409040    dd 3                    ; DATA XREF: .text:pThrowInfo↓o
.text:00409044                 dd offset unk_409024
.text:00409048                 dd offset dword_409008
.text:0040904C                 dd offset unk_408FEC
.text:00409050 ; const _ThrowInfo pThrowInfo
.text:00409050 pThrowInfo      _ThrowInfo <0, offset sub_402430, 0, offset dword_409040>
.text:00409050                                         ; DATA XREF: sub_4048A0+5D↑o
.text:00409060 dword_409060    dd 0                    ; DATA XREF: .text:00409080↓o
.text:00409064                 dd offset off_40B090
.text:00409068                 dd 0
.text:0040906C                 dd 0FFFFFFFFh, 0
.text:00409074                 dd 0Ch
.text:00409078                 dd offset sub_4049F0
.text:0040907C dword_40907C    dd 2                    ; DATA XREF: .text:stru_409088↓o
.text:00409080                 dd offset dword_409060
.text:00409084                 dd offset unk_408FEC
.text:00409088 ; const _ThrowInfo stru_409088
.text:00409088 stru_409088     _ThrowInfo <0, offset loc_4023C0, 0, offset dword_40907C>
.text:00409088                                         ; DATA XREF: sub_404920+42↑o
.text:00409098 stru_409098     UnwindMapEntry <-1, offset loc_408D00>
.text:00409098                                         ; DATA XREF: .text:stru_4090A0↓o
.text:004090A0 stru_4090A0     FuncInfo <19930522h, 1, offset stru_409098, 0, 0, 0, 0, 0, 1>
.text:004090A0                                         ; DATA XREF: sub_4024A0+687A↑o
.text:004090C4 stru_4090C4     UnwindMapEntry <-1, offset loc_408D30>
.text:004090C4                                         ; DATA XREF: .text:stru_4090CC↓o
.text:004090CC stru_4090CC     FuncInfo <19930522h, 1, offset stru_4090C4, 0, 0, 0, 0, 0, 1>
.text:004090CC                                         ; DATA XREF: sub_403A00+5354↑o
.text:004090F0 stru_4090F0     UnwindMapEntry <-1, offset loc_408D70>
.text:004090F0                                         ; DATA XREF: .text:stru_409100↓o
.text:004090F8                 UnwindMapEntry <0, offset loc_408D79>
.text:00409100 stru_409100     FuncInfo <19930522h, 2, offset stru_4090F0, 0, 0, 0, 0, 0, 1>
.text:00409100                                         ; DATA XREF: sub_403490+5913↑o
.text:00409124 stru_409124     UnwindMapEntry <-1, offset loc_408DC0>
.text:00409124                                         ; DATA XREF: .text:stru_409134↓o
.text:0040912C                 UnwindMapEntry <0, offset loc_408DC9>
.text:00409134 stru_409134     FuncInfo <19930522h, 2, offset stru_409124, 0, 0, 0, 0, 0, 1>
.text:00409134                                         ; DATA XREF: sub_4048A0+4543↑o
.text:00409158 stru_409158     UnwindMapEntry <-1, 0>  ; DATA XREF: .text:stru_4091C0↓o
.text:00409160                 UnwindMapEntry <-1, 0>
.text:00409168                 UnwindMapEntry <-1, 0>
.text:00409170                 UnwindMapEntry <-1, 0>
.text:00409178 stru_409178     HandlerType <40h, 0, 0, offset loc_4047AA>
.text:00409178                                         ; DATA XREF: .text:stru_409198↓o
.text:00409188 stru_409188     HandlerType <40h, 0, 0, offset loc_4047B6>
.text:00409188                                         ; DATA XREF: .text:004091AC↓o
.text:00409198 stru_409198     TryBlockMapEntry <0, 0, 1, 1, offset stru_409178>
.text:00409198                                         ; DATA XREF: .text:stru_4091C0↓o
.text:004091AC                 TryBlockMapEntry <2, 2, 3, 1, offset stru_409188>
.text:004091C0 stru_4091C0     FuncInfo <19930522h, 4, offset stru_409158, 2, offset stru_409198, 0, \
.text:004091C0                                         ; DATA XREF: sub_404630+47E1↑o
.text:004091C0                           0, 0, 1>
.text:004091E4 stru_4091E4     UnwindMapEntry <-1, offset loc_408E20>
.text:004091E4                                         ; DATA XREF: .text:stru_4091F4↓o
.text:004091EC                 UnwindMapEntry <0, offset loc_408E28>
.text:004091F4 stru_4091F4     FuncInfo <19930522h, 2, offset stru_4091E4, 0, 0, 0, 0, 0, 1>
.text:004091F4                                         ; DATA XREF: sub_402780+66C7↑o
.text:00409218 dword_409218    dd 0FFFFFFFFh           ; DATA XREF: .text:00409230↓o
.text:0040921C                 dd offset sub_408E60
.text:00409220                 dd 0
.text:00409224                 dd offset sub_408E68
.text:00409228 dword_409228    dd 19930522h, 2         ; DATA XREF: sub_408E76+11↑o
.text:00409230                 dd offset dword_409218
.text:00409234                 dd 5 dup(0)
.text:00409248                 dd 1
.text:0040924C stru_40924C     UnwindMapEntry <-1, offset loc_408EA0>
.text:0040924C                                         ; DATA XREF: .text:stru_409254↓o
.text:00409254 stru_409254     FuncInfo <19930522h, 1, offset stru_40924C, 0, 0, 0, 0, 0, 1>
.text:00409254                                         ; DATA XREF: sub_402B20+63A4↑o
.text:00409278 stru_409278     UnwindMapEntry <-1, offset loc_408EE0>
.text:00409278                                         ; DATA XREF: .text:stru_4092A8↓o
.text:00409280                 UnwindMapEntry <0, offset loc_408EE9>
.text:00409288                 UnwindMapEntry <1, offset loc_408EF2>
.text:00409290                 UnwindMapEntry <1, offset loc_408EFD>
.text:00409298                 UnwindMapEntry <1, offset loc_408F08>
.text:004092A0                 UnwindMapEntry <1, offset loc_408F13>
.text:004092A8 stru_4092A8     FuncInfo <19930522h, 6, offset stru_409278, 0, 0, 0, 0, 0, 1>
.text:004092A8                                         ; DATA XREF: sub_402E80+60BC↑o
.text:004092CC __IMPORT_DESCRIPTOR_MSVCR80 dd rva off_409450 ; Import Name Table
.text:004092D0                 dd 0                    ; Time stamp
.text:004092D4                 dd 0                    ; Forwarder Chain
.text:004092D8                 dd rva aMsvcr80Dll      ; DLL Name
.text:004092DC                 dd rva __imp__CxxThrowException ; Import Address Table
.text:004092E0 __IMPORT_DESCRIPTOR_MSVCP80 dd rva off_409424 ; Import Name Table
.text:004092E4                 dd 0                    ; Time stamp
.text:004092E8                 dd 0                    ; Forwarder Chain
.text:004092EC                 dd rva aMsvcp80Dll      ; DLL Name
.text:004092F0                 dd rva ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; Import Address Table
.text:004092F4 __IMPORT_DESCRIPTOR_WS2_32 dd rva off_409508 ; Import Name Table
.text:004092F8                 dd 0                    ; Time stamp
.text:004092FC                 dd 0                    ; Forwarder Chain
.text:00409300                 dd rva aWs232Dll        ; DLL Name
.text:00409304                 dd rva WSARecv          ; Import Address Table
.text:00409308 __IMPORT_DESCRIPTOR_KERNEL32 dd rva off_409390 ; Import Name Table
.text:0040930C                 dd 0                    ; Time stamp
.text:00409310                 dd 0                    ; Forwarder Chain
.text:00409314                 dd rva aKernel32Dll     ; DLL Name
.text:00409318                 dd rva InterlockedCompareExchange ; Import Address Table
.text:0040931C __IMPORT_DESCRIPTOR_USER32 dd rva off_4094F8 ; Import Name Table
.text:00409320                 dd 0                    ; Time stamp
.text:00409324                 dd 0                    ; Forwarder Chain
.text:00409328                 dd rva aUser32Dll       ; DLL Name
.text:0040932C                 dd rva FindWindowA      ; Import Address Table
.text:00409330 __IMPORT_DESCRIPTOR_SHFOLDER dd rva off_4094E8 ; Import Name Table
.text:00409334                 dd 0                    ; Time stamp
.text:00409338                 dd 0                    ; Forwarder Chain
.text:0040933C                 dd rva aShfolderDll     ; DLL Name
.text:00409340                 dd rva SHGetFolderPathA ; Import Address Table
.text:00409344 __IMPORT_DESCRIPTOR_SHLWAPI dd rva off_4094F0 ; Import Name Table
.text:00409348                 dd 0                    ; Time stamp
.text:0040934C                 dd 0                    ; Forwarder Chain
.text:00409350                 dd rva aShlwapiDll      ; DLL Name
.text:00409354                 dd rva PathCombineA     ; Import Address Table
.text:00409358 __IMPORT_DESCRIPTOR_ADVAPI32 dd rva off_409380 ; Import Name Table
.text:0040935C                 dd 0                    ; Time stamp
.text:00409360                 dd 0                    ; Forwarder Chain
.text:00409364                 dd rva aAdvapi32Dll     ; DLL Name
.text:00409368                 dd rva RegOpenKeyExA    ; Import Address Table
.text:0040936C                 align 20h
.text:00409380 ;
.text:00409380 ; Import names for ADVAPI32.dll
.text:00409380 ;
.text:00409380 off_409380      dd rva word_409F1E      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_ADVAPI32↑o
.text:00409384                 dd rva word_409F0A
.text:00409388                 dd rva word_409F2E
.text:0040938C                 dd 0
.text:00409390 ;
.text:00409390 ; Import names for KERNEL32.dll
.text:00409390 ;
.text:00409390 off_409390      dd rva word_409D88      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_KERNEL32↑o
.text:00409394                 dd rva word_409D6C
.text:00409398                 dd rva word_409D52
.text:0040939C                 dd rva word_409D3C
.text:004093A0                 dd rva word_409D24
.text:004093A4                 dd rva word_409D08
.text:004093A8                 dd rva word_409CEC
.text:004093AC                 dd rva word_409CD0
.text:004093B0                 dd rva word_409CC4
.text:004093B4                 dd rva word_409CBC
.text:004093B8                 dd rva word_409CB0
.text:004093BC                 dd rva word_409C9E
.text:004093C0                 dd rva word_409C88
.text:004093C4                 dd rva word_409C7A
.text:004093C8                 dd rva word_409DA6
.text:004093CC                 dd rva word_409C6C
.text:004093D0                 dd rva word_409C54
.text:004093D4                 dd rva word_409C48
.text:004093D8                 dd rva word_409C30
.text:004093DC                 dd rva word_409C20
.text:004093E0                 dd rva word_409C0A
.text:004093E4                 dd rva word_409BFE
.text:004093E8                 dd rva word_409BE6
.text:004093EC                 dd rva word_409BD6
.text:004093F0                 dd rva word_409BBA
.text:004093F4                 dd rva word_409BAE
.text:004093F8                 dd rva word_409B96
.text:004093FC                 dd rva word_409B7E
.text:00409400                 dd rva word_409E64
.text:00409404                 dd rva word_409DC2
.text:00409408                 dd rva word_409DD2
.text:0040940C                 dd rva word_409DE8
.text:00409410                 dd rva word_409E2A
.text:00409414                 dd rva word_409E16
.text:00409418                 dd rva word_409E02
.text:0040941C                 dd rva word_409E46
.text:00409420                 dd 0
.text:00409424 ;
.text:00409424 ; Import names for MSVCP80.dll
.text:00409424 ;
.text:00409424 off_409424      dd rva word_409A04      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_MSVCP80↑o
.text:00409428                 dd rva word_409A4E
.text:0040942C                 dd rva word_409A9A
.text:00409430                 dd rva word_409AEA
.text:00409434                 dd rva word_40995E
.text:00409438                 dd rva word_409910
.text:0040943C                 dd rva word_4098C0
.text:00409440                 dd rva word_409844
.text:00409444                 dd rva word_4097C8
.text:00409448                 dd rva word_4099B0
.text:0040944C                 dd 0
.text:00409450 ;
.text:00409450 ; Import names for MSVCR80.dll
.text:00409450 ;
.text:00409450 off_409450      dd rva word_409F74      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_MSVCR80↑o
.text:00409454                 dd rva word_409F4A
.text:00409458                 dd rva word_409F54
.text:0040945C                 dd rva word_409F6A
.text:00409460                 dd rva word_409792
.text:00409464                 dd rva word_40977E
.text:00409468                 dd rva word_409768
.text:0040946C                 dd rva word_40974E
.text:00409470                 dd rva word_409744
.text:00409474                 dd rva word_40973C
.text:00409478                 dd rva word_40972E
.text:0040947C                 dd rva word_409724
.text:00409480                 dd rva word_409700
.text:00409484                 dd rva word_4096E2
.text:00409488                 dd rva word_4096D2
.text:0040948C                 dd rva word_4096C4
.text:00409490                 dd rva word_4096B6
.text:00409494                 dd rva word_4096AA
.text:00409498                 dd rva word_409698
.text:0040949C                 dd rva word_409690
.text:004094A0                 dd rva word_409680
.text:004094A4                 dd rva word_409672
.text:004094A8                 dd rva word_409660
.text:004094AC                 dd rva word_409652
.text:004094B0                 dd rva word_409642
.text:004094B4                 dd rva word_409626
.text:004094B8                 dd rva word_40961E
.text:004094BC                 dd rva word_40960E
.text:004094C0                 dd rva word_4095EC
.text:004094C4                 dd rva word_4095CC
.text:004094C8                 dd rva word_4095B0
.text:004094CC                 dd rva word_409594
.text:004094D0                 dd rva word_409574
.text:004094D4                 dd rva word_409564
.text:004094D8                 dd rva word_409554
.text:004094DC                 dd rva word_40954A
.text:004094E0                 dd rva word_409540
.text:004094E4                 dd 0
.text:004094E8 ;
.text:004094E8 ; Import names for SHFOLDER.dll
.text:004094E8 ;
.text:004094E8 off_4094E8      dd rva word_409ECC      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_SHFOLDER↑o
.text:004094EC                 dd 0
.text:004094F0 ;
.text:004094F0 ; Import names for SHLWAPI.dll
.text:004094F0 ;
.text:004094F0 off_4094F0      dd rva word_409EEE      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_SHLWAPI↑o
.text:004094F4                 dd 0
.text:004094F8 ;
.text:004094F8 ; Import names for USER32.dll
.text:004094F8 ;
.text:004094F8 off_4094F8      dd rva word_409EA2      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_USER32↑o
.text:004094FC                 dd rva word_409E86
.text:00409500                 dd rva word_409EB0
.text:00409504                 dd 0
.text:00409508 ;
.text:00409508 ; Import names for WS2_32.dll
.text:00409508 ;
.text:00409508 off_409508      dd rva word_409B5A      ; DATA XREF: .text:__IMPORT_DESCRIPTOR_WS2_32↑o
.text:0040950C                 dd 80000015h
.text:00409510                 dd 80000004h
.text:00409514                 dd rva word_409B64
.text:00409518                 dd 80000073h
.text:0040951C                 dd rva word_409B50
.text:00409520                 dd 8000006Fh
.text:00409524                 dd 80000016h
.text:00409528                 dd 80000074h
.text:0040952C                 dd rva word_409B40
.text:00409530                 dd 80000003h
.text:00409534                 dd 80000007h
.text:00409538                 dd 80000017h
.text:0040953C                 dd 0
.text:00409540 word_409540     dw 531h                 ; DATA XREF: .text:004094E0↑o
.text:00409542                 db 'memmove',0
.text:0040954A word_40954A     dw 537h                 ; DATA XREF: .text:004094DC↑o
.text:0040954C                 db 'printf',0
.text:00409553                 align 4
.text:00409554 word_409554     dw 10h                  ; DATA XREF: .text:004094D8↑o
.text:00409556                 db '??3@YAXPAX@Z',0
.text:00409563                 align 4
.text:00409564 word_409564     dw 0Fh                  ; DATA XREF: .text:004094D4↑o
.text:00409566                 db '??2@YAPAXI@Z',0
.text:00409573                 align 4
.text:00409574 word_409574     dw 44h                  ; DATA XREF: .text:004094D0↑o
.text:00409576                 db '?what@exception@std@@UBEPBDXZ',0
.text:00409594 word_409594     dw 0Dh                  ; DATA XREF: .text:004094CC↑o
.text:00409596                 db '??1exception@std@@UAE@XZ',0
.text:004095AF                 align 10h
.text:004095B0 word_4095B0     dw 9                    ; DATA XREF: .text:004094C8↑o
.text:004095B2                 db '??0exception@std@@QAE@XZ',0
.text:004095CB                 align 4
.text:004095CC word_4095CC     dw 6                    ; DATA XREF: .text:004094C4↑o
.text:004095CE                 db '??0exception@std@@QAE@ABQBD@Z',0
.text:004095EC word_4095EC     dw 8                    ; DATA XREF: .text:004094C0↑o
.text:004095EE                 db '??0exception@std@@QAE@ABV01@@Z',0
.text:0040960D                 align 2
.text:0040960E word_40960E     dw 1Eh                  ; DATA XREF: .text:004094BC↑o
.text:00409610                 db '??_U@YAPAXI@Z',0
.text:0040961E word_40961E     dw 4C9h                 ; DATA XREF: .text:004094B8↑o
.text:00409620                 db 'atoi',0
.text:00409625                 align 2
.text:00409626 word_409626     dw 210h                 ; DATA XREF: .text:004094B4↑o
.text:00409628                 db '_invalid_parameter_noinfo',0
.text:00409642 word_409642     dw 1Fh                  ; DATA XREF: .text:004094B0↑o
.text:00409644                 db '??_V@YAXPAX@Z',0
.text:00409652 word_409652     dw 411h                 ; DATA XREF: .text:004094AC↑o
.text:00409654                 db '_vsnprintf',0
.text:0040965F                 align 10h
.text:00409660 word_409660     dw 16Dh                 ; DATA XREF: .text:004094A8↑o
.text:00409662                 db '_encode_pointer',0
.text:00409672 word_409672     dw 28Dh                 ; DATA XREF: .text:004094A4↑o
.text:00409674                 db '_malloc_crt',0
.text:00409680 word_409680     dw 16Eh                 ; DATA XREF: .text:004094A0↑o
.text:00409682                 db '_encoded_null',0
.text:00409690 word_409690     dw 4EDh                 ; DATA XREF: .text:0040949C↑o
.text:00409692                 db 'free',0
.text:00409697                 align 4
.text:00409698 word_409698     dw 163h                 ; DATA XREF: .text:00409498↑o
.text:0040969A                 db '_decode_pointer',0
.text:004096AA word_4096AA     dw 20Ah                 ; DATA XREF: .text:00409494↑o
.text:004096AC                 db '_initterm',0
.text:004096B6 word_4096B6     dw 20Bh                 ; DATA XREF: .text:00409490↑o
.text:004096B8                 db '_initterm_e',0
.text:004096C4 word_4096C4     dw 118h                 ; DATA XREF: .text:0040948C↑o
.text:004096C6                 db '_amsg_exit',0
.text:004096D1                 align 2
.text:004096D2 word_4096D2     dw 111h                 ; DATA XREF: .text:00409488↑o
.text:004096D4                 db '_adjust_fdiv',0
.text:004096E1                 align 2
.text:004096E2 word_4096E2     dw 6Bh                  ; DATA XREF: .text:00409484↑o
.text:004096E4                 db '__CppXcptFilter',0
.text:004096F4 aMsvcr80Dll     db 'MSVCR80.dll',0      ; DATA XREF: .text:004092D8↑o
.text:00409700 word_409700     dw 8Dh                  ; DATA XREF: .text:00409480↑o
.text:00409702                 db '__clean_type_info_names_internal',0
.text:00409723                 align 4
.text:00409724 word_409724     dw 3EDh                 ; DATA XREF: .text:0040947C↑o
.text:00409726                 db '_unlock',0
.text:0040972E word_40972E     dw 97h                  ; DATA XREF: .text:00409478↑o
.text:00409730                 db '__dllonexit',0
.text:0040973C word_40973C     dw 27Ch                 ; DATA XREF: .text:00409474↑o
.text:0040973E                 db '_lock',0
.text:00409744 word_409744     dw 322h                 ; DATA XREF: .text:00409470↑o
.text:00409746                 db '_onexit',0
.text:0040974E word_40974E     dw 176h                 ; DATA XREF: .text:0040946C↑o
.text:00409750                 db '_except_handler4_common',0
.text:00409768 word_409768     dw 14Eh                 ; DATA XREF: .text:00409468↑o
.text:0040976A                 db '_crt_debugger_hook',0
.text:0040977D                 align 2
.text:0040977E word_40977E     dw 41h                  ; DATA XREF: .text:00409464↑o
.text:00409780                 db '?terminate@@YAXXZ',0
.text:00409792 word_409792     dw 34h                  ; DATA XREF: .text:00409460↑o
.text:00409794                 db '?_type_info_dtor_internal_method@type_info@@QAEXXZ',0
.text:004097C7                 align 4
.text:004097C8 word_4097C8     dw 2Dh                  ; DATA XREF: .text:00409444↑o
.text:004097CA                 db '??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic'
.text:004097CA                 db '_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z',0
.text:00409844 word_409844     dw 3Fh                  ; DATA XREF: .text:00409440↑o
.text:00409846                 db '??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic'
.text:00409846                 db '_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PBD@Z',0
.text:004098C0 word_4098C0     dw 0AD3h                ; DATA XREF: .text:0040943C↑o
.text:004098C2                 db '?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@'
.text:004098C2                 db 'std@@QAEXI@Z',0
.text:00409910 word_409910     dw 617h                 ; DATA XREF: .text:00409438↑o
.text:00409912                 db '?at@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@'
.text:00409912                 db 'QAEAADI@Z',0
.text:0040995D                 align 2
.text:0040995E word_40995E     dw 2B1h                 ; DATA XREF: .text:00409434↑o
.text:00409960                 db '??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
.text:00409960                 db 'AEAAV01@PBD@Z',0
.text:004099AF                 align 10h
.text:004099B0 word_4099B0     dw 2AFh                 ; DATA XREF: .text:00409448↑o
.text:004099B2                 db '??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
.text:004099B2                 db 'AEAAV01@ABV01@@Z',0
.text:00409A04 word_409A04     dw 25Bh                 ; DATA XREF: .text:off_409424↑o
.text:00409A06                 db '??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
.text:00409A06                 db 'AE@XZ',0
.text:00409A4D                 align 2
.text:00409A4E word_409A4E     dw 176h                 ; DATA XREF: .text:00409428↑o
.text:00409A50                 db '??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
.text:00409A50                 db 'AE@PBD@Z',0
.text:00409A9A word_409A9A     dw 16Fh                 ; DATA XREF: .text:0040942C↑o
.text:00409A9C                 db '??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
.text:00409A9C                 db 'AE@ABV01@@Z',0
.text:00409AE9                 align 2
.text:00409AEA word_409AEA     dw 17Bh                 ; DATA XREF: .text:00409430↑o
.text:00409AEC                 db '??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@Q'
.text:00409AEC                 db 'AE@XZ',0
.text:00409B33                 align 4
.text:00409B34 aMsvcp80Dll     db 'MSVCP80.dll',0      ; DATA XREF: .text:004092EC↑o
.text:00409B40 word_409B40     dw 58h                  ; DATA XREF: .text:0040952C↑o
.text:00409B42                 db 'freeaddrinfo',0
.text:00409B4F                 align 10h
.text:00409B50 word_409B50     dw 39h                  ; DATA XREF: .text:0040951C↑o
.text:00409B52                 db 'WSASend',0
.text:00409B5A word_409B5A     dw 34h                  ; DATA XREF: .text:off_409508↑o
.text:00409B5C                 db 'WSARecv',0
.text:00409B64 word_409B64     dw 59h                  ; DATA XREF: .text:00409514↑o
.text:00409B66                 db 'getaddrinfo',0
.text:00409B72 aWs232Dll       db 'WS2_32.dll',0       ; DATA XREF: .text:00409300↑o
.text:00409B7D                 align 2
.text:00409B7E word_409B7E     dw 22Ch                 ; DATA XREF: .text:004093FC↑o
.text:00409B80                 db 'InterlockedIncrement',0
.text:00409B95                 align 2
.text:00409B96 word_409B96     dw 228h                 ; DATA XREF: .text:004093F8↑o
.text:00409B98                 db 'InterlockedDecrement',0
.text:00409BAD                 align 2
.text:00409BAE word_409BAE     dw 3A4h                 ; DATA XREF: .text:004093F4↑o
.text:00409BB0                 db 'WriteFile',0
.text:00409BBA word_409BBA     dw 223h                 ; DATA XREF: .text:004093F0↑o
.text:00409BBC                 db 'InitializeCriticalSection',0
.text:00409BD6 word_409BD6     dw 4Fh                  ; DATA XREF: .text:004093EC↑o
.text:00409BD8                 db 'CreateEventA',0
.text:00409BE5                 align 2
.text:00409BE6 word_409BE6     dw 251h                 ; DATA XREF: .text:004093E8↑o
.text:00409BE8                 db 'LeaveCriticalSection',0
.text:00409BFD                 align 2
.text:00409BFE word_409BFE     dw 2B5h                 ; DATA XREF: .text:004093E4↑o
.text:00409C00                 db 'ReadFile',0
.text:00409C09                 align 2
.text:00409C0A word_409C0A     dw 229h                 ; DATA XREF: .text:004093E0↑o
.text:00409C0C                 db 'InterlockedExchange',0
.text:00409C20 word_409C20     dw 171h                 ; DATA XREF: .text:004093DC↑o
.text:00409C22                 db 'GetLastError',0
.text:00409C2F                 align 10h
.text:00409C30 word_409C30     dw 98h                  ; DATA XREF: .text:004093D8↑o
.text:00409C32                 db 'EnterCriticalSection',0
.text:00409C47                 align 4
.text:00409C48 word_409C48     dw 2Ah                  ; DATA XREF: .text:004093D4↑o
.text:00409C4A                 db 'CancelIo',0
.text:00409C53                 align 4
.text:00409C54 word_409C54     dw 81h                  ; DATA XREF: .text:004093D0↑o
.text:00409C56                 db 'DeleteCriticalSection',0
.text:00409C6C word_409C6C     dw 34h                  ; DATA XREF: .text:004093CC↑o
.text:00409C6E                 db 'CloseHandle',0
.text:00409C7A word_409C7A     dw 53h                  ; DATA XREF: .text:004093C4↑o
.text:00409C7C                 db 'CreateFileA',0
.text:00409C88 word_409C88     dw 180h                 ; DATA XREF: .text:004093C0↑o
.text:00409C8A                 db 'GetModuleHandleExA',0
.text:00409C9D                 align 2
.text:00409C9E word_409C9E     dw 392h                 ; DATA XREF: .text:004093BC↑o
.text:00409CA0                 db 'WaitNamedPipeA',0
.text:00409CAF                 align 10h
.text:00409CB0 word_409CB0     dw 316h                 ; DATA XREF: .text:004093B8↑o
.text:00409CB2                 db 'SetEvent',0
.text:00409CBB                 align 4
.text:00409CBC word_409CBC     dw 356h                 ; DATA XREF: .text:004093B4↑o
.text:00409CBE                 db 'Sleep',0
.text:00409CC4 word_409CC4     dw 3C3h                 ; DATA XREF: .text:004093B0↑o
.text:00409CC6                 db 'lstrcmpiA',0
.text:00409CD0 word_409CD0     dw 22h                  ; DATA XREF: .text:004093AC↑o
.text:00409CD2                 db 'BindIoCompletionCallback',0
.text:00409CEB                 align 4
.text:00409CEC word_409CEC     dw 19Ch                 ; DATA XREF: .text:004093A8↑o
.text:00409CEE                 db 'GetPrivateProfileStringA',0
.text:00409D07                 align 4
.text:00409D08 word_409D08     dw 198h                 ; DATA XREF: .text:004093A4↑o
.text:00409D0A                 db 'GetPrivateProfileSectionA',0
.text:00409D24 word_409D24     dw 140h                 ; DATA XREF: .text:004093A0↑o
.text:00409D26                 db 'GetCurrentDirectoryA',0
.text:00409D3B                 align 4
.text:00409D3C word_409D3C     dw 143h                 ; DATA XREF: .text:0040939C↑o
.text:00409D3E                 db 'GetCurrentProcessId',0
.text:00409D52 word_409D52     dw 2A3h                 ; DATA XREF: .text:00409398↑o
.text:00409D54                 db 'QueryPerformanceCounter',0
.text:00409D6C word_409D6C     dw 2A4h                 ; DATA XREF: .text:00409394↑o
.text:00409D6E                 db 'QueryPerformanceFrequency',0
.text:00409D88 word_409D88     dw 226h                 ; DATA XREF: .text:off_409390↑o
.text:00409D8A                 db 'InterlockedCompareExchange',0
.text:00409DA5                 align 2
.text:00409DA6 word_409DA6     dw 8Bh                  ; DATA XREF: .text:004093C8↑o
.text:00409DA8                 db 'DisableThreadLibraryCalls',0
.text:00409DC2 word_409DC2     dw 1DFh                 ; DATA XREF: .text:00409404↑o
.text:00409DC4                 db 'GetTickCount',0
.text:00409DD1                 align 2
.text:00409DD2 word_409DD2     dw 146h                 ; DATA XREF: .text:00409408↑o
.text:00409DD4                 db 'GetCurrentThreadId',0
.text:00409DE7                 align 4
.text:00409DE8 word_409DE8     dw 1CAh                 ; DATA XREF: .text:0040940C↑o
.text:00409DEA                 db 'GetSystemTimeAsFileTime',0
.text:00409E02 word_409E02     dw 35Eh                 ; DATA XREF: .text:00409418↑o
.text:00409E04                 db 'TerminateProcess',0
.text:00409E15                 align 2
.text:00409E16 word_409E16     dw 142h                 ; DATA XREF: .text:00409414↑o
.text:00409E18                 db 'GetCurrentProcess',0
.text:00409E2A word_409E2A     dw 36Eh                 ; DATA XREF: .text:00409410↑o
.text:00409E2C                 db 'UnhandledExceptionFilter',0
.text:00409E45                 align 2
.text:00409E46 word_409E46     dw 34Ah                 ; DATA XREF: .text:0040941C↑o
.text:00409E48                 db 'SetUnhandledExceptionFilter',0
.text:00409E64 word_409E64     dw 239h                 ; DATA XREF: .text:00409400↑o
.text:00409E66                 db 'IsDebuggerPresent',0
.text:00409E78 aKernel32Dll    db 'KERNEL32.dll',0     ; DATA XREF: .text:00409314↑o
.text:00409E85                 align 2
.text:00409E86 word_409E86     dw 17Bh                 ; DATA XREF: .text:004094FC↑o
.text:00409E88                 db 'GetWindowThreadProcessId',0
.text:00409EA1                 align 2
.text:00409EA2 word_409EA2     dw 0E3h                 ; DATA XREF: .text:off_4094F8↑o
.text:00409EA4                 db 'FindWindowA',0
.text:00409EB0 word_409EB0     dw 202h                 ; DATA XREF: .text:00409500↑o
.text:00409EB2                 db 'PostMessageA',0
.text:00409EBF                 align 10h
.text:00409EC0 aUser32Dll      db 'USER32.dll',0       ; DATA XREF: .text:00409328↑o
.text:00409ECB                 align 4
.text:00409ECC word_409ECC     dw 0                    ; DATA XREF: .text:off_4094E8↑o
.text:00409ECE                 db 'SHGetFolderPathA',0
.text:00409EDF                 align 10h
.text:00409EE0 aShfolderDll    db 'SHFOLDER.dll',0     ; DATA XREF: .text:0040933C↑o
.text:00409EED                 align 2
.text:00409EEE word_409EEE     dw 23h                  ; DATA XREF: .text:off_4094F0↑o
.text:00409EF0                 db 'PathCombineA',0
.text:00409EFD                 align 2
.text:00409EFE aShlwapiDll     db 'SHLWAPI.dll',0      ; DATA XREF: .text:00409350↑o
.text:00409F0A word_409F0A     dw 1F7h                 ; DATA XREF: .text:00409384↑o
.text:00409F0C                 db 'RegQueryValueExA',0
.text:00409F1D                 align 2
.text:00409F1E word_409F1E     dw 1ECh                 ; DATA XREF: .text:off_409380↑o
.text:00409F20                 db 'RegOpenKeyExA',0
.text:00409F2E word_409F2E     dw 1CBh                 ; DATA XREF: .text:00409388↑o
.text:00409F30                 db 'RegCloseKey',0
.text:00409F3C aAdvapi32Dll    db 'ADVAPI32.dll',0     ; DATA XREF: .text:00409364↑o
.text:00409F49                 align 2
.text:00409F4A word_409F4A     dw 533h                 ; DATA XREF: .text:00409454↑o
.text:00409F4C                 db 'memset',0
.text:00409F53                 align 4
.text:00409F54 word_409F54     dw 74h                  ; DATA XREF: .text:00409458↑o
.text:00409F56                 db '__CxxFrameHandler3',0
.text:00409F69                 align 2
.text:00409F6A word_409F6A     dw 52Fh                 ; DATA XREF: .text:0040945C↑o
.text:00409F6C                 db 'memcpy',0
.text:00409F73                 align 4
.text:00409F74 word_409F74     dw 5Bh                  ; DATA XREF: .text:off_409450↑o
.text:00409F76                 db '_CxxThrowException',0
.text:00409F89                 align 10h
.text:00409F90 ;
.text:00409F90 ; Export directory for SimConnect.dll
.text:00409F90 ;
.text:00409F90                 dd 0                    ; Characteristics
.text:00409F94                 dd 46FACE28h            ; TimeDateStamp: Wed Sep 26 21:24:56 2007
.text:00409F98                 dw 0                    ; MajorVersion
.text:00409F9A                 dw 0                    ; MinorVersion
.text:00409F9C                 dd rva aSimconnectDll   ; Name
.text:00409FA0                 dd 1                    ; Base
.text:00409FA4                 dd 48h                  ; NumberOfFunctions
.text:00409FA8                 dd 48h                  ; NumberOfNames
.text:00409FAC                 dd rva off_409FB8       ; AddressOfFunctions
.text:00409FB0                 dd rva off_40A0D8       ; AddressOfNames
.text:00409FB4                 dd rva word_40A1F8      ; AddressOfNameOrdinals
.text:00409FB8 ;
.text:00409FB8 ; Export Address Table for SimConnect.dll
.text:00409FB8 ;
.text:00409FB8 off_409FB8      dd rva SimConnect_AICreateEnrouteATCAircraft, rva SimConnect_AICreateNonATCAircraft
.text:00409FB8                                         ; DATA XREF: .text:00409FAC↑o
.text:00409FC0                 dd rva SimConnect_AICreateParkedATCAircraft, rva SimConnect_AICreateSimulatedObject
.text:00409FC8                 dd rva SimConnect_AIReleaseControl, rva SimConnect_AIRemoveObject
.text:00409FD0                 dd rva SimConnect_AISetAircraftFlightPlan, rva SimConnect_AddClientEventToNotificationGroup
.text:00409FD8                 dd rva SimConnect_AddToClientDataDefinition, rva SimConnect_AddToDataDefinition
.text:00409FE0                 dd rva SimConnect_CallDispatch, rva SimConnect_CameraSetRelative6DOF
.text:00409FE8                 dd rva SimConnect_ClearClientDataDefinition, rva SimConnect_ClearDataDefinition
.text:00409FF0                 dd rva SimConnect_ClearInputGroup, rva SimConnect_ClearNotificationGroup
.text:00409FF8                 dd rva SimConnect_Close, rva SimConnect_CompleteCustomMissionAction
.text:0040A000                 dd rva SimConnect_CreateClientData, rva SimConnect_ExecuteMissionAction
.text:0040A008                 dd rva SimConnect_FlightLoad, rva SimConnect_FlightPlanLoad
.text:0040A010                 dd rva SimConnect_FlightSave, rva SimConnect_GetLastSentPacketID
.text:0040A018                 dd rva SimConnect_GetNextDispatch, rva SimConnect_InsertString
.text:0040A020                 dd rva SimConnect_MapClientDataNameToID, rva SimConnect_MapClientEventToSimEvent
.text:0040A028                 dd rva SimConnect_MapInputEventToClientEvent, rva SimConnect_MenuAddItem
.text:0040A030                 dd rva SimConnect_MenuAddSubItem, rva SimConnect_MenuDeleteItem
.text:0040A038                 dd rva SimConnect_MenuDeleteSubItem, rva SimConnect_Open
.text:0040A040                 dd rva SimConnect_RemoveClientEvent, rva SimConnect_RemoveInputEvent
.text:0040A048                 dd rva SimConnect_RequestClientData, rva SimConnect_RequestDataOnSimObject
.text:0040A050                 dd rva SimConnect_RequestDataOnSimObjectType, rva SimConnect_RequestFacilitiesList
.text:0040A058                 dd rva SimConnect_RequestNotificationGroup, rva SimConnect_RequestReservedKey
.text:0040A060                 dd rva SimConnect_RequestResponseTimes, rva SimConnect_RequestSystemState
.text:0040A068                 dd rva SimConnect_RetrieveString, rva SimConnect_SetClientData
.text:0040A070                 dd rva SimConnect_SetDataOnSimObject, rva SimConnect_SetInputGroupPriority
.text:0040A078                 dd rva SimConnect_SetInputGroupState, rva SimConnect_SetNotificationGroupPriority
.text:0040A080                 dd rva SimConnect_SetSystemEventState, rva SimConnect_SetSystemState
.text:0040A088                 dd rva SimConnect_SubscribeToFacilities, rva SimConnect_SubscribeToSystemEvent
.text:0040A090                 dd rva SimConnect_Text, rva SimConnect_TransmitClientEvent
.text:0040A098                 dd rva SimConnect_UnsubscribeFromSystemEvent, rva SimConnect_UnsubscribeToFacilities
.text:0040A0A0                 dd rva SimConnect_WeatherCreateStation, rva SimConnect_WeatherCreateThermal
.text:0040A0A8                 dd rva SimConnect_WeatherRemoveStation, rva SimConnect_WeatherRemoveThermal
.text:0040A0B0                 dd rva SimConnect_WeatherRequestCloudState, rva SimConnect_WeatherRequestInterpolatedObservation
.text:0040A0B8                 dd rva SimConnect_WeatherRequestObservationAtNearestStation
.text:0040A0BC                 dd rva SimConnect_WeatherRequestObservationAtStation, rva SimConnect_WeatherSetDynamicUpdateRate
.text:0040A0C4                 dd rva SimConnect_WeatherSetModeCustom, rva SimConnect_WeatherSetModeGlobal
.text:0040A0CC                 dd rva SimConnect_WeatherSetModeServer, rva SimConnect_WeatherSetModeTheme
.text:0040A0D4                 dd rva SimConnect_WeatherSetObservation
.text:0040A0D8 ;
.text:0040A0D8 ; Export Names Table for SimConnect.dll
.text:0040A0D8 ;
.text:0040A0D8 off_40A0D8      dd rva aSimconnectAicr, rva aSimconnectAicr_0, rva aSimconnectAicr_1
.text:0040A0D8                                         ; DATA XREF: .text:00409FB0↑o
.text:0040A0E4                 dd rva aSimconnectAicr_2, rva aSimconnectAire, rva aSimconnectAire_0 ; "SimConnect_AICreateEnrouteATCAircraft" ...
.text:0040A0F0                 dd rva aSimconnectAise, rva aSimconnectAddc, rva aSimconnectAddt
.text:0040A0FC                 dd rva aSimconnectAddt_0, rva aSimconnectCall, rva aSimconnectCame
.text:0040A108                 dd rva aSimconnectClea, rva aSimconnectClea_0, rva aSimconnectClea_1
.text:0040A114                 dd rva aSimconnectClea_2, rva aSimconnectClos, rva aSimconnectComp
.text:0040A120                 dd rva aSimconnectCrea, rva aSimconnectExec, rva aSimconnectFlig
.text:0040A12C                 dd rva aSimconnectFlig_0, rva aSimconnectFlig_1, rva aSimconnectGetl
.text:0040A138                 dd rva aSimconnectGetn, rva aSimconnectInse, rva aSimconnectMapc
.text:0040A144                 dd rva aSimconnectMapc_0, rva aSimconnectMapi, rva aSimconnectMenu
.text:0040A150                 dd rva aSimconnectMenu_0, rva aSimconnectMenu_1, rva aSimconnectMenu_2
.text:0040A15C                 dd rva aSimconnectOpen, rva aSimconnectRemo, rva aSimconnectRemo_0
.text:0040A168                 dd rva aSimconnectRequ, rva aSimconnectRequ_0, rva aSimconnectRequ_1
.text:0040A174                 dd rva aSimconnectRequ_2, rva aSimconnectRequ_3, rva aSimconnectRequ_4
.text:0040A180                 dd rva aSimconnectRequ_5, rva aSimconnectRequ_6, rva aSimconnectRetr
.text:0040A18C                 dd rva aSimconnectSetc, rva aSimconnectSetd, rva aSimconnectSeti
.text:0040A198                 dd rva aSimconnectSeti_0, rva aSimconnectSetn, rva aSimconnectSets
.text:0040A1A4                 dd rva aSimconnectSets_0, rva aSimconnectSubs, rva aSimconnectSubs_0
.text:0040A1B0                 dd rva aSimconnectText, rva aSimconnectTran, rva aSimconnectUnsu
.text:0040A1BC                 dd rva aSimconnectUnsu_0, rva aSimconnectWeat, rva aSimconnectWeat_0
.text:0040A1C8                 dd rva aSimconnectWeat_1, rva aSimconnectWeat_2, rva aSimconnectWeat_3
.text:0040A1D4                 dd rva aSimconnectWeat_4, rva aSimconnectWeat_5, rva aSimconnectWeat_6
.text:0040A1E0                 dd rva aSimconnectWeat_7, rva aSimconnectWeat_8, rva aSimconnectWeat_9
.text:0040A1EC                 dd rva aSimconnectWeat_10, rva aSimconnectWeat_11, rva aSimconnectWeat_12
.text:0040A1F8 ;
.text:0040A1F8 ; Export Ordinals Table for SimConnect.dll
.text:0040A1F8 ;
.text:0040A1F8 word_40A1F8     dw 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh
.text:0040A1F8                                         ; DATA XREF: .text:00409FB4↑o
.text:0040A216                 dw 0Fh, 10h, 11h, 12h, 13h, 14h, 15h, 16h, 17h, 18h, 19h
.text:0040A22C                 dw 1Ah, 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 20h, 21h, 22h, 23h, 24h
.text:0040A242                 dw 25h, 26h, 27h, 28h, 29h, 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh
.text:0040A258                 dw 30h, 31h, 32h, 33h, 34h, 35h, 36h, 37h, 38h, 39h, 3Ah
.text:0040A26E                 dw 3Bh, 3Ch, 3Dh, 3Eh, 3Fh, 40h, 41h, 42h, 43h, 44h, 45h
.text:0040A284                 dw 46h, 47h
.text:0040A288 aSimconnectDll  db 'SimConnect.dll',0   ; DATA XREF: .text:00409F9C↑o
.text:0040A297 aSimconnectAicr db 'SimConnect_AICreateEnrouteATCAircraft',0
.text:0040A297                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A2BD aSimconnectAicr_0 db 'SimConnect_AICreateNonATCAircraft',0
.text:0040A2BD                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A2DF aSimconnectAicr_1 db 'SimConnect_AICreateParkedATCAircraft',0
.text:0040A2DF                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A304 aSimconnectAicr_2 db 'SimConnect_AICreateSimulatedObject',0
.text:0040A304                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A327 aSimconnectAire db 'SimConnect_AIReleaseControl',0
.text:0040A327                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A343 aSimconnectAire_0 db 'SimConnect_AIRemoveObject',0
.text:0040A343                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A35D aSimconnectAise db 'SimConnect_AISetAircraftFlightPlan',0
.text:0040A35D                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A380 aSimconnectAddc db 'SimConnect_AddClientEventToNotificationGroup',0
.text:0040A380                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A3AD aSimconnectAddt db 'SimConnect_AddToClientDataDefinition',0
.text:0040A3AD                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A3D2 aSimconnectAddt_0 db 'SimConnect_AddToDataDefinition',0
.text:0040A3D2                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A3F1 aSimconnectCall db 'SimConnect_CallDispatch',0
.text:0040A3F1                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A409 aSimconnectCame db 'SimConnect_CameraSetRelative6DOF',0
.text:0040A409                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A42A aSimconnectClea db 'SimConnect_ClearClientDataDefinition',0
.text:0040A42A                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A44F aSimconnectClea_0 db 'SimConnect_ClearDataDefinition',0
.text:0040A44F                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A46E aSimconnectClea_1 db 'SimConnect_ClearInputGroup',0
.text:0040A46E                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A489 aSimconnectClea_2 db 'SimConnect_ClearNotificationGroup',0
.text:0040A489                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A4AB aSimconnectClos db 'SimConnect_Close',0 ; DATA XREF: .text:off_40A0D8↑o
.text:0040A4BC aSimconnectComp db 'SimConnect_CompleteCustomMissionAction',0
.text:0040A4BC                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A4E3 aSimconnectCrea db 'SimConnect_CreateClientData',0
.text:0040A4E3                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A4FF aSimconnectExec db 'SimConnect_ExecuteMissionAction',0
.text:0040A4FF                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A51F aSimconnectFlig db 'SimConnect_FlightLoad',0
.text:0040A51F                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A535 aSimconnectFlig_0 db 'SimConnect_FlightPlanLoad',0
.text:0040A535                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A54F aSimconnectFlig_1 db 'SimConnect_FlightSave',0
.text:0040A54F                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A565 aSimconnectGetl db 'SimConnect_GetLastSentPacketID',0
.text:0040A565                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A584 aSimconnectGetn db 'SimConnect_GetNextDispatch',0
.text:0040A584                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A59F aSimconnectInse db 'SimConnect_InsertString',0
.text:0040A59F                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A5B7 aSimconnectMapc db 'SimConnect_MapClientDataNameToID',0
.text:0040A5B7                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A5D8 aSimconnectMapc_0 db 'SimConnect_MapClientEventToSimEvent',0
.text:0040A5D8                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A5FC aSimconnectMapi db 'SimConnect_MapInputEventToClientEvent',0
.text:0040A5FC                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A622 aSimconnectMenu db 'SimConnect_MenuAddItem',0
.text:0040A622                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A639 aSimconnectMenu_0 db 'SimConnect_MenuAddSubItem',0
.text:0040A639                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A653 aSimconnectMenu_1 db 'SimConnect_MenuDeleteItem',0
.text:0040A653                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A66D aSimconnectMenu_2 db 'SimConnect_MenuDeleteSubItem',0
.text:0040A66D                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A68A aSimconnectOpen db 'SimConnect_Open',0  ; DATA XREF: .text:off_40A0D8↑o
.text:0040A69A aSimconnectRemo db 'SimConnect_RemoveClientEvent',0
.text:0040A69A                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A6B7 aSimconnectRemo_0 db 'SimConnect_RemoveInputEvent',0
.text:0040A6B7                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A6D3 aSimconnectRequ db 'SimConnect_RequestClientData',0
.text:0040A6D3                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A6F0 aSimconnectRequ_0 db 'SimConnect_RequestDataOnSimObject',0
.text:0040A6F0                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A712 aSimconnectRequ_1 db 'SimConnect_RequestDataOnSimObjectType',0
.text:0040A712                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A738 aSimconnectRequ_2 db 'SimConnect_RequestFacilitiesList',0
.text:0040A738                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A759 aSimconnectRequ_3 db 'SimConnect_RequestNotificationGroup',0
.text:0040A759                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A77D aSimconnectRequ_4 db 'SimConnect_RequestReservedKey',0
.text:0040A77D                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A79B aSimconnectRequ_5 db 'SimConnect_RequestResponseTimes',0
.text:0040A79B                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A7BB aSimconnectRequ_6 db 'SimConnect_RequestSystemState',0
.text:0040A7BB                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A7D9 aSimconnectRetr db 'SimConnect_RetrieveString',0
.text:0040A7D9                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A7F3 aSimconnectSetc db 'SimConnect_SetClientData',0
.text:0040A7F3                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A80C aSimconnectSetd db 'SimConnect_SetDataOnSimObject',0
.text:0040A80C                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A82A aSimconnectSeti db 'SimConnect_SetInputGroupPriority',0
.text:0040A82A                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A84B aSimconnectSeti_0 db 'SimConnect_SetInputGroupState',0
.text:0040A84B                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A869 aSimconnectSetn db 'SimConnect_SetNotificationGroupPriority',0
.text:0040A869                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A891 aSimconnectSets db 'SimConnect_SetSystemEventState',0
.text:0040A891                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A8B0 aSimconnectSets_0 db 'SimConnect_SetSystemState',0
.text:0040A8B0                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A8CA aSimconnectSubs db 'SimConnect_SubscribeToFacilities',0
.text:0040A8CA                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A8EB aSimconnectSubs_0 db 'SimConnect_SubscribeToSystemEvent',0
.text:0040A8EB                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A90D aSimconnectText db 'SimConnect_Text',0  ; DATA XREF: .text:off_40A0D8↑o
.text:0040A91D aSimconnectTran db 'SimConnect_TransmitClientEvent',0
.text:0040A91D                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A93C aSimconnectUnsu db 'SimConnect_UnsubscribeFromSystemEvent',0
.text:0040A93C                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A962 aSimconnectUnsu_0 db 'SimConnect_UnsubscribeToFacilities',0
.text:0040A962                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A985 aSimconnectWeat db 'SimConnect_WeatherCreateStation',0
.text:0040A985                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A9A5 aSimconnectWeat_0 db 'SimConnect_WeatherCreateThermal',0
.text:0040A9A5                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A9C5 aSimconnectWeat_1 db 'SimConnect_WeatherRemoveStation',0
.text:0040A9C5                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040A9E5 aSimconnectWeat_2 db 'SimConnect_WeatherRemoveThermal',0
.text:0040A9E5                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AA05 aSimconnectWeat_3 db 'SimConnect_WeatherRequestCloudState',0
.text:0040AA05                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AA29 aSimconnectWeat_4 db 'SimConnect_WeatherRequestInterpolatedObservation',0
.text:0040AA29                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AA5A aSimconnectWeat_5 db 'SimConnect_WeatherRequestObservationAtNearestStation',0
.text:0040AA5A                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AA8F aSimconnectWeat_6 db 'SimConnect_WeatherRequestObservationAtStation',0
.text:0040AA8F                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AABD aSimconnectWeat_7 db 'SimConnect_WeatherSetDynamicUpdateRate',0
.text:0040AABD                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AAE4 aSimconnectWeat_8 db 'SimConnect_WeatherSetModeCustom',0
.text:0040AAE4                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AB04 aSimconnectWeat_9 db 'SimConnect_WeatherSetModeGlobal',0
.text:0040AB04                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AB24 aSimconnectWeat_10 db 'SimConnect_WeatherSetModeServer',0
.text:0040AB24                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AB44 aSimconnectWeat_11 db 'SimConnect_WeatherSetModeTheme',0
.text:0040AB44                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AB63 aSimconnectWeat_12 db 'SimConnect_WeatherSetObservation',0
.text:0040AB63                                         ; DATA XREF: .text:off_40A0D8↑o
.text:0040AB84                 align 80h
.text:0040AC00                 dd 100h dup(?)
.text:0040AC00 _text           ends
.text:0040AC00
.data:0040B000 ; Section 2. (virtual address 0000B000)
.data:0040B000 ; Virtual size                  : 00000430 (   1072.)
.data:0040B000 ; Section size in file          : 00000200 (    512.)
.data:0040B000 ; Offset to raw data for section: 0000A000
.data:0040B000 ; Flags C0000040: Data Readable Writable
.data:0040B000 ; Alignment     : default
.data:0040B000 ; ===========================================================================
.data:0040B000
.data:0040B000 ; Segment type: Pure data
.data:0040B000 ; Segment permissions: Read/Write
.data:0040B000 _data           segment para public 'DATA' use32
.data:0040B000                 assume cs:_data
.data:0040B000                 ;org 40B000h
.data:0040B000 off_40B000      dd offset off_401204    ; DATA XREF: .text:00401484↑o
.data:0040B000                                         ; .text:off_4014A4↑o
.data:0040B004                 align 8
.data:0040B008 aAvtypeInfo     db '.?AVtype_info@@',0
.data:0040B018 dword_40B018    dd 0FFFFFFFFh           ; DATA XREF: ___DllMainCRTStartup+1E↑w
.data:0040B018                                         ; ___DllMainCRTStartup:loc_40862F↑w
.data:0040B01C                 db 0FFh
.data:0040B01D                 db 0FFh
.data:0040B01E                 db 0FFh
.data:0040B01F                 db 0FFh
.data:0040B020 ; uintptr_t __security_cookie
.data:0040B020 ___security_cookie dd 0BB40E64Eh        ; DATA XREF: .text:00401424↑o
.data:0040B020                                         ; .text:0040229B↑r ...
.data:0040B024 dword_40B024    dd 44BF19B1h            ; DATA XREF: ___security_init_cookie+29↑w
.data:0040B024                                         ; ___security_init_cookie+89↑w ...
.data:0040B028                 dd offset loc_401324
.data:0040B02C                 dd offset loc_401324
.data:0040B030                 dd offset loc_401324
.data:0040B034 off_40B034      dd offset off_401204    ; DATA XREF: .text:00408FF0↑o
.data:0040B038                 db    0
.data:0040B039                 db    0
.data:0040B03A                 db    0
.data:0040B03B                 db    0
.data:0040B03C                 db  2Eh ; .
.data:0040B03D                 db  3Fh ; ?
.data:0040B03E                 db  41h ; A
.data:0040B03F                 db  56h ; V
.data:0040B040                 db  65h ; e
.data:0040B041                 db  78h ; x
.data:0040B042                 db  63h ; c
.data:0040B043                 db  65h ; e
.data:0040B044                 db  70h ; p
.data:0040B045                 db  74h ; t
.data:0040B046                 db  69h ; i
.data:0040B047                 db  6Fh ; o
.data:0040B048                 db  6Eh ; n
.data:0040B049                 db  40h ; @
.data:0040B04A                 db  73h ; s
.data:0040B04B                 db  74h ; t
.data:0040B04C                 db  64h ; d
.data:0040B04D                 db  40h ; @
.data:0040B04E                 db  40h ; @
.data:0040B04F                 db    0
.data:0040B050 off_40B050      dd offset off_401204    ; DATA XREF: .text:0040900C↑o
.data:0040B054                 align 8
.data:0040B058 aAvlogicErrorSt db '.?AVlogic_error@std@@',0
.data:0040B06E                 align 10h
.data:0040B070 off_40B070      dd offset off_401204    ; DATA XREF: .text:00409028↑o
.data:0040B074                 align 8
.data:0040B078 aAvlengthErrorS db '.?AVlength_error@std@@',0
.data:0040B08F                 align 10h
.data:0040B090 off_40B090      dd offset off_401204    ; DATA XREF: .text:00409064↑o
.data:0040B094                 align 8
.data:0040B098 aAvbadAllocStd  db '.?AVbad_alloc@std@@',0
.data:0040B0AC                 align 10h
.data:0040B0B0 dword_40B0B0    dd 0                    ; DATA XREF: _CRT_INIT(x,x,x)+B↑r
.data:0040B0B0                                         ; _CRT_INIT(x,x,x)+13↑w ...
.data:0040B0B4 unk_40B0B4      db    0                 ; DATA XREF: sub_40870F↑o
.data:0040B0B5                 db    0
.data:0040B0B6                 db    0
.data:0040B0B7                 db    0
.data:0040B0B8                 db    0
.data:0040B0B9                 db    0
.data:0040B0BA                 db    0
.data:0040B0BB                 db    0
.data:0040B0BC                 db    0
.data:0040B0BD                 db    0
.data:0040B0BE                 db    0
.data:0040B0BF                 db    0
.data:0040B0C0 dword_40B0C0    dd 0                    ; DATA XREF: .text:ExceptionInfo↑o
.data:0040B0C0                                         ; ___report_gsfailure+8F↑w
.data:0040B0C4 dword_40B0C4    dd 0                    ; DATA XREF: ___report_gsfailure+99↑w
.data:0040B0C8                 db    0
.data:0040B0C9                 db    0
.data:0040B0CA                 db    0
.data:0040B0CB                 db    0
.data:0040B0CC dword_40B0CC    dd 0                    ; DATA XREF: ___report_gsfailure+8A↑w
.data:0040B0D0                 db    0
.data:0040B0D1                 db    0
.data:0040B0D2                 db    0
.data:0040B0D3                 db    0
.data:0040B0D4                 db    0
.data:0040B0D5                 db    0
.data:0040B0D6                 db    0
.data:0040B0D7                 db    0
.data:0040B0D8                 db    0
.data:0040B0D9                 db    0
.data:0040B0DA                 db    0
.data:0040B0DB                 db    0
.data:0040B0DC                 db    0
.data:0040B0DD                 db    0
.data:0040B0DE                 db    0
.data:0040B0DF                 db    0
.data:0040B0E0                 db    0
.data:0040B0E1                 db    0
.data:0040B0E2                 db    0
.data:0040B0E3                 db    0
.data:0040B0E4                 db    0
.data:0040B0E5                 db    0
.data:0040B0E6                 db    0
.data:0040B0E7                 db    0
.data:0040B0E8                 db    0
.data:0040B0E9                 db    0
.data:0040B0EA                 db    0
.data:0040B0EB                 db    0
.data:0040B0EC                 db    0
.data:0040B0ED                 db    0
.data:0040B0EE                 db    0
.data:0040B0EF                 db    0
.data:0040B0F0                 db    0
.data:0040B0F1                 db    0
.data:0040B0F2                 db    0
.data:0040B0F3                 db    0
.data:0040B0F4                 db    0
.data:0040B0F5                 db    0
.data:0040B0F6                 db    0
.data:0040B0F7                 db    0
.data:0040B0F8                 db    0
.data:0040B0F9                 db    0
.data:0040B0FA                 db    0
.data:0040B0FB                 db    0
.data:0040B0FC                 db    0
.data:0040B0FD                 db    0
.data:0040B0FE                 db    0
.data:0040B0FF                 db    0
.data:0040B100                 db    0
.data:0040B101                 db    0
.data:0040B102                 db    0
.data:0040B103                 db    0
.data:0040B104                 db    0
.data:0040B105                 db    0
.data:0040B106                 db    0
.data:0040B107                 db    0
.data:0040B108                 db    0
.data:0040B109                 db    0
.data:0040B10A                 db    0
.data:0040B10B                 db    0
.data:0040B10C                 db    0
.data:0040B10D                 db    0
.data:0040B10E                 db    0
.data:0040B10F                 db    0
.data:0040B110 dword_40B110    dd 0                    ; DATA XREF: ___report_gsfailure+BF↑w
.data:0040B110                                         ; ___report_gsfailure+DF↑r
.data:0040B114                 align 8
.data:0040B118 dword_40B118    dd 0                    ; DATA XREF: .text:ExceptionInfo↑o
.data:0040B118                                         ; ___report_gsfailure+7B↑w
.data:0040B11C                 db    0
.data:0040B11D                 db    0
.data:0040B11E                 db    0
.data:0040B11F                 db    0
.data:0040B120                 db    0
.data:0040B121                 db    0
.data:0040B122                 db    0
.data:0040B123                 db    0
.data:0040B124                 db    0
.data:0040B125                 db    0
.data:0040B126                 db    0
.data:0040B127                 db    0
.data:0040B128                 db    0
.data:0040B129                 db    0
.data:0040B12A                 db    0
.data:0040B12B                 db    0
.data:0040B12C                 db    0
.data:0040B12D                 db    0
.data:0040B12E                 db    0
.data:0040B12F                 db    0
.data:0040B130                 db    0
.data:0040B131                 db    0
.data:0040B132                 db    0
.data:0040B133                 db    0
.data:0040B134                 db    0
.data:0040B135                 db    0
.data:0040B136                 db    0
.data:0040B137                 db    0
.data:0040B138                 db    0
.data:0040B139                 db    0
.data:0040B13A                 db    0
.data:0040B13B                 db    0
.data:0040B13C                 db    0
.data:0040B13D                 db    0
.data:0040B13E                 db    0
.data:0040B13F                 db    0
.data:0040B140                 db    0
.data:0040B141                 db    0
.data:0040B142                 db    0
.data:0040B143                 db    0
.data:0040B144                 db    0
.data:0040B145                 db    0
.data:0040B146                 db    0
.data:0040B147                 db    0
.data:0040B148                 db    0
.data:0040B149                 db    0
.data:0040B14A                 db    0
.data:0040B14B                 db    0
.data:0040B14C                 db    0
.data:0040B14D                 db    0
.data:0040B14E                 db    0
.data:0040B14F                 db    0
.data:0040B150                 db    0
.data:0040B151                 db    0
.data:0040B152                 db    0
.data:0040B153                 db    0
.data:0040B154                 db    0
.data:0040B155                 db    0
.data:0040B156                 db    0
.data:0040B157                 db    0
.data:0040B158                 db    0
.data:0040B159                 db    0
.data:0040B15A                 db    0
.data:0040B15B                 db    0
.data:0040B15C                 db    0
.data:0040B15D                 db    0
.data:0040B15E                 db    0
.data:0040B15F                 db    0
.data:0040B160                 db    0
.data:0040B161                 db    0
.data:0040B162                 db    0
.data:0040B163                 db    0
.data:0040B164                 db    0
.data:0040B165                 db    0
.data:0040B166                 db    0
.data:0040B167                 db    0
.data:0040B168                 db    0
.data:0040B169                 db    0
.data:0040B16A                 db    0
.data:0040B16B                 db    0
.data:0040B16C                 db    0
.data:0040B16D                 db    0
.data:0040B16E                 db    0
.data:0040B16F                 db    0
.data:0040B170                 db    0
.data:0040B171                 db    0
.data:0040B172                 db    0
.data:0040B173                 db    0
.data:0040B174                 db    0
.data:0040B175                 db    0
.data:0040B176                 db    0
.data:0040B177                 db    0
.data:0040B178                 db    0
.data:0040B179                 db    0
.data:0040B17A                 db    0
.data:0040B17B                 db    0
.data:0040B17C                 db    0
.data:0040B17D                 db    0
.data:0040B17E                 db    0
.data:0040B17F                 db    0
.data:0040B180                 db    0
.data:0040B181                 db    0
.data:0040B182                 db    0
.data:0040B183                 db    0
.data:0040B184                 db    0
.data:0040B185                 db    0
.data:0040B186                 db    0
.data:0040B187                 db    0
.data:0040B188                 db    0
.data:0040B189                 db    0
.data:0040B18A                 db    0
.data:0040B18B                 db    0
.data:0040B18C                 db    0
.data:0040B18D                 db    0
.data:0040B18E                 db    0
.data:0040B18F                 db    0
.data:0040B190                 db    0
.data:0040B191                 db    0
.data:0040B192                 db    0
.data:0040B193                 db    0
.data:0040B194                 db    0
.data:0040B195                 db    0
.data:0040B196                 db    0
.data:0040B197                 db    0
.data:0040B198                 db    0
.data:0040B199                 db    0
.data:0040B19A                 db    0
.data:0040B19B                 db    0
.data:0040B19C                 db    0
.data:0040B19D                 db    0
.data:0040B19E                 db    0
.data:0040B19F                 db    0
.data:0040B1A0                 db    0
.data:0040B1A1                 db    0
.data:0040B1A2                 db    0
.data:0040B1A3                 db    0
.data:0040B1A4 word_40B1A4     dw 0                    ; DATA XREF: ___report_gsfailure+4F↑w
.data:0040B1A6                 align 4
.data:0040B1A8 word_40B1A8     dw 0                    ; DATA XREF: ___report_gsfailure+48↑w
.data:0040B1AA                 align 4
.data:0040B1AC word_40B1AC     dw 0                    ; DATA XREF: ___report_gsfailure+41↑w
.data:0040B1AE                 align 10h
.data:0040B1B0 word_40B1B0     dw 0                    ; DATA XREF: ___report_gsfailure+3A↑w
.data:0040B1B2                 align 4
.data:0040B1B4 dword_40B1B4    dd 0                    ; DATA XREF: ___report_gsfailure+26↑w
.data:0040B1B8 dword_40B1B8    dd 0                    ; DATA XREF: ___report_gsfailure+20↑w
.data:0040B1BC dword_40B1BC    dd 0                    ; DATA XREF: ___report_gsfailure+1A↑w
.data:0040B1C0 dword_40B1C0    dd 0                    ; DATA XREF: ___report_gsfailure+14↑w
.data:0040B1C4 dword_40B1C4    dd 0                    ; DATA XREF: ___report_gsfailure+E↑w
.data:0040B1C8 dword_40B1C8    dd 0                    ; DATA XREF: ___report_gsfailure+9↑w
.data:0040B1CC dword_40B1CC    dd 0                    ; DATA XREF: ___report_gsfailure+60↑w
.data:0040B1D0 dword_40B1D0    dd 0                    ; DATA XREF: ___report_gsfailure+68↑w
.data:0040B1D0                                         ; ___report_gsfailure+85↑r
.data:0040B1D4 word_40B1D4     dw 0                    ; DATA XREF: ___report_gsfailure+33↑w
.data:0040B1D6                 align 4
.data:0040B1D8 dword_40B1D8    dd 0                    ; DATA XREF: ___report_gsfailure+57↑w
.data:0040B1DC dword_40B1DC    dd 0                    ; DATA XREF: ___report_gsfailure+70↑w
.data:0040B1E0 word_40B1E0     dw 0                    ; DATA XREF: ___report_gsfailure+2C↑w
.data:0040B1E2                 db    0
.data:0040B1E3                 db    0
.data:0040B1E4                 db    0
.data:0040B1E5                 db    0
.data:0040B1E6                 db    0
.data:0040B1E7                 db    0
.data:0040B1E8                 db    0
.data:0040B1E9                 db    0
.data:0040B1EA                 db    0
.data:0040B1EB                 db    0
.data:0040B1EC                 db    0
.data:0040B1ED                 db    0
.data:0040B1EE                 db    0
.data:0040B1EF                 db    0
.data:0040B1F0                 db    0
.data:0040B1F1                 db    0
.data:0040B1F2                 db    0
.data:0040B1F3                 db    0
.data:0040B1F4                 db    0
.data:0040B1F5                 db    0
.data:0040B1F6                 db    0
.data:0040B1F7                 db    0
.data:0040B1F8                 db    0
.data:0040B1F9                 db    0
.data:0040B1FA                 db    0
.data:0040B1FB                 db    0
.data:0040B1FC                 db    0
.data:0040B1FD                 db    0
.data:0040B1FE                 db    0
.data:0040B1FF                 db    0
.data:0040B200                 db    ? ;
.data:0040B201                 db    ? ;
.data:0040B202                 db    ? ;
.data:0040B203                 db    ? ;
.data:0040B204                 db    ? ;
.data:0040B205                 db    ? ;
.data:0040B206                 db    ? ;
.data:0040B207                 db    ? ;
.data:0040B208                 db    ? ;
.data:0040B209                 db    ? ;
.data:0040B20A                 db    ? ;
.data:0040B20B                 db    ? ;
.data:0040B20C                 db    ? ;
.data:0040B20D                 db    ? ;
.data:0040B20E                 db    ? ;
.data:0040B20F                 db    ? ;
.data:0040B210                 db    ? ;
.data:0040B211                 db    ? ;
.data:0040B212                 db    ? ;
.data:0040B213                 db    ? ;
.data:0040B214                 db    ? ;
.data:0040B215                 db    ? ;
.data:0040B216                 db    ? ;
.data:0040B217                 db    ? ;
.data:0040B218                 db    ? ;
.data:0040B219                 db    ? ;
.data:0040B21A                 db    ? ;
.data:0040B21B                 db    ? ;
.data:0040B21C                 db    ? ;
.data:0040B21D                 db    ? ;
.data:0040B21E                 db    ? ;
.data:0040B21F                 db    ? ;
.data:0040B220                 db    ? ;
.data:0040B221                 db    ? ;
.data:0040B222                 db    ? ;
.data:0040B223                 db    ? ;
.data:0040B224                 db    ? ;
.data:0040B225                 db    ? ;
.data:0040B226                 db    ? ;
.data:0040B227                 db    ? ;
.data:0040B228                 db    ? ;
.data:0040B229                 db    ? ;
.data:0040B22A                 db    ? ;
.data:0040B22B                 db    ? ;
.data:0040B22C                 db    ? ;
.data:0040B22D                 db    ? ;
.data:0040B22E                 db    ? ;
.data:0040B22F                 db    ? ;
.data:0040B230                 db    ? ;
.data:0040B231                 db    ? ;
.data:0040B232                 db    ? ;
.data:0040B233                 db    ? ;
.data:0040B234                 db    ? ;
.data:0040B235                 db    ? ;
.data:0040B236                 db    ? ;
.data:0040B237                 db    ? ;
.data:0040B238                 db    ? ;
.data:0040B239                 db    ? ;
.data:0040B23A                 db    ? ;
.data:0040B23B                 db    ? ;
.data:0040B23C                 db    ? ;
.data:0040B23D                 db    ? ;
.data:0040B23E                 db    ? ;
.data:0040B23F                 db    ? ;
.data:0040B240                 db    ? ;
.data:0040B241                 db    ? ;
.data:0040B242                 db    ? ;
.data:0040B243                 db    ? ;
.data:0040B244                 db    ? ;
.data:0040B245                 db    ? ;
.data:0040B246                 db    ? ;
.data:0040B247                 db    ? ;
.data:0040B248                 db    ? ;
.data:0040B249                 db    ? ;
.data:0040B24A                 db    ? ;
.data:0040B24B                 db    ? ;
.data:0040B24C                 db    ? ;
.data:0040B24D                 db    ? ;
.data:0040B24E                 db    ? ;
.data:0040B24F                 db    ? ;
.data:0040B250                 db    ? ;
.data:0040B251                 db    ? ;
.data:0040B252                 db    ? ;
.data:0040B253                 db    ? ;
.data:0040B254                 db    ? ;
.data:0040B255                 db    ? ;
.data:0040B256                 db    ? ;
.data:0040B257                 db    ? ;
.data:0040B258                 db    ? ;
.data:0040B259                 db    ? ;
.data:0040B25A                 db    ? ;
.data:0040B25B                 db    ? ;
.data:0040B25C                 db    ? ;
.data:0040B25D                 db    ? ;
.data:0040B25E                 db    ? ;
.data:0040B25F                 db    ? ;
.data:0040B260                 db    ? ;
.data:0040B261                 db    ? ;
.data:0040B262                 db    ? ;
.data:0040B263                 db    ? ;
.data:0040B264                 db    ? ;
.data:0040B265                 db    ? ;
.data:0040B266                 db    ? ;
.data:0040B267                 db    ? ;
.data:0040B268                 db    ? ;
.data:0040B269                 db    ? ;
.data:0040B26A                 db    ? ;
.data:0040B26B                 db    ? ;
.data:0040B26C                 db    ? ;
.data:0040B26D                 db    ? ;
.data:0040B26E                 db    ? ;
.data:0040B26F                 db    ? ;
.data:0040B270                 db    ? ;
.data:0040B271                 db    ? ;
.data:0040B272                 db    ? ;
.data:0040B273                 db    ? ;
.data:0040B274                 db    ? ;
.data:0040B275                 db    ? ;
.data:0040B276                 db    ? ;
.data:0040B277                 db    ? ;
.data:0040B278                 db    ? ;
.data:0040B279                 db    ? ;
.data:0040B27A                 db    ? ;
.data:0040B27B                 db    ? ;
.data:0040B27C                 db    ? ;
.data:0040B27D                 db    ? ;
.data:0040B27E                 db    ? ;
.data:0040B27F                 db    ? ;
.data:0040B280                 db    ? ;
.data:0040B281                 db    ? ;
.data:0040B282                 db    ? ;
.data:0040B283                 db    ? ;
.data:0040B284                 db    ? ;
.data:0040B285                 db    ? ;
.data:0040B286                 db    ? ;
.data:0040B287                 db    ? ;
.data:0040B288                 db    ? ;
.data:0040B289                 db    ? ;
.data:0040B28A                 db    ? ;
.data:0040B28B                 db    ? ;
.data:0040B28C                 db    ? ;
.data:0040B28D                 db    ? ;
.data:0040B28E                 db    ? ;
.data:0040B28F                 db    ? ;
.data:0040B290                 db    ? ;
.data:0040B291                 db    ? ;
.data:0040B292                 db    ? ;
.data:0040B293                 db    ? ;
.data:0040B294                 db    ? ;
.data:0040B295                 db    ? ;
.data:0040B296                 db    ? ;
.data:0040B297                 db    ? ;
.data:0040B298                 db    ? ;
.data:0040B299                 db    ? ;
.data:0040B29A                 db    ? ;
.data:0040B29B                 db    ? ;
.data:0040B29C                 db    ? ;
.data:0040B29D                 db    ? ;
.data:0040B29E                 db    ? ;
.data:0040B29F                 db    ? ;
.data:0040B2A0                 db    ? ;
.data:0040B2A1                 db    ? ;
.data:0040B2A2                 db    ? ;
.data:0040B2A3                 db    ? ;
.data:0040B2A4                 db    ? ;
.data:0040B2A5                 db    ? ;
.data:0040B2A6                 db    ? ;
.data:0040B2A7                 db    ? ;
.data:0040B2A8                 db    ? ;
.data:0040B2A9                 db    ? ;
.data:0040B2AA                 db    ? ;
.data:0040B2AB                 db    ? ;
.data:0040B2AC                 db    ? ;
.data:0040B2AD                 db    ? ;
.data:0040B2AE                 db    ? ;
.data:0040B2AF                 db    ? ;
.data:0040B2B0                 db    ? ;
.data:0040B2B1                 db    ? ;
.data:0040B2B2                 db    ? ;
.data:0040B2B3                 db    ? ;
.data:0040B2B4                 db    ? ;
.data:0040B2B5                 db    ? ;
.data:0040B2B6                 db    ? ;
.data:0040B2B7                 db    ? ;
.data:0040B2B8                 db    ? ;
.data:0040B2B9                 db    ? ;
.data:0040B2BA                 db    ? ;
.data:0040B2BB                 db    ? ;
.data:0040B2BC                 db    ? ;
.data:0040B2BD                 db    ? ;
.data:0040B2BE                 db    ? ;
.data:0040B2BF                 db    ? ;
.data:0040B2C0                 db    ? ;
.data:0040B2C1                 db    ? ;
.data:0040B2C2                 db    ? ;
.data:0040B2C3                 db    ? ;
.data:0040B2C4                 db    ? ;
.data:0040B2C5                 db    ? ;
.data:0040B2C6                 db    ? ;
.data:0040B2C7                 db    ? ;
.data:0040B2C8                 db    ? ;
.data:0040B2C9                 db    ? ;
.data:0040B2CA                 db    ? ;
.data:0040B2CB                 db    ? ;
.data:0040B2CC                 db    ? ;
.data:0040B2CD                 db    ? ;
.data:0040B2CE                 db    ? ;
.data:0040B2CF                 db    ? ;
.data:0040B2D0                 db    ? ;
.data:0040B2D1                 db    ? ;
.data:0040B2D2                 db    ? ;
.data:0040B2D3                 db    ? ;
.data:0040B2D4                 db    ? ;
.data:0040B2D5                 db    ? ;
.data:0040B2D6                 db    ? ;
.data:0040B2D7                 db    ? ;
.data:0040B2D8                 db    ? ;
.data:0040B2D9                 db    ? ;
.data:0040B2DA                 db    ? ;
.data:0040B2DB                 db    ? ;
.data:0040B2DC                 db    ? ;
.data:0040B2DD                 db    ? ;
.data:0040B2DE                 db    ? ;
.data:0040B2DF                 db    ? ;
.data:0040B2E0                 db    ? ;
.data:0040B2E1                 db    ? ;
.data:0040B2E2                 db    ? ;
.data:0040B2E3                 db    ? ;
.data:0040B2E4                 db    ? ;
.data:0040B2E5                 db    ? ;
.data:0040B2E6                 db    ? ;
.data:0040B2E7                 db    ? ;
.data:0040B2E8                 db    ? ;
.data:0040B2E9                 db    ? ;
.data:0040B2EA                 db    ? ;
.data:0040B2EB                 db    ? ;
.data:0040B2EC                 db    ? ;
.data:0040B2ED                 db    ? ;
.data:0040B2EE                 db    ? ;
.data:0040B2EF                 db    ? ;
.data:0040B2F0                 db    ? ;
.data:0040B2F1                 db    ? ;
.data:0040B2F2                 db    ? ;
.data:0040B2F3                 db    ? ;
.data:0040B2F4                 db    ? ;
.data:0040B2F5                 db    ? ;
.data:0040B2F6                 db    ? ;
.data:0040B2F7                 db    ? ;
.data:0040B2F8                 db    ? ;
.data:0040B2F9                 db    ? ;
.data:0040B2FA                 db    ? ;
.data:0040B2FB                 db    ? ;
.data:0040B2FC                 db    ? ;
.data:0040B2FD                 db    ? ;
.data:0040B2FE                 db    ? ;
.data:0040B2FF                 db    ? ;
.data:0040B300                 db    ? ;
.data:0040B301                 db    ? ;
.data:0040B302                 db    ? ;
.data:0040B303                 db    ? ;
.data:0040B304                 db    ? ;
.data:0040B305                 db    ? ;
.data:0040B306                 db    ? ;
.data:0040B307                 db    ? ;
.data:0040B308                 db    ? ;
.data:0040B309                 db    ? ;
.data:0040B30A                 db    ? ;
.data:0040B30B                 db    ? ;
.data:0040B30C                 db    ? ;
.data:0040B30D                 db    ? ;
.data:0040B30E                 db    ? ;
.data:0040B30F                 db    ? ;
.data:0040B310                 db    ? ;
.data:0040B311                 db    ? ;
.data:0040B312                 db    ? ;
.data:0040B313                 db    ? ;
.data:0040B314                 db    ? ;
.data:0040B315                 db    ? ;
.data:0040B316                 db    ? ;
.data:0040B317                 db    ? ;
.data:0040B318                 db    ? ;
.data:0040B319                 db    ? ;
.data:0040B31A                 db    ? ;
.data:0040B31B                 db    ? ;
.data:0040B31C                 db    ? ;
.data:0040B31D                 db    ? ;
.data:0040B31E                 db    ? ;
.data:0040B31F                 db    ? ;
.data:0040B320                 db    ? ;
.data:0040B321                 db    ? ;
.data:0040B322                 db    ? ;
.data:0040B323                 db    ? ;
.data:0040B324                 db    ? ;
.data:0040B325                 db    ? ;
.data:0040B326                 db    ? ;
.data:0040B327                 db    ? ;
.data:0040B328                 db    ? ;
.data:0040B329                 db    ? ;
.data:0040B32A                 db    ? ;
.data:0040B32B                 db    ? ;
.data:0040B32C                 db    ? ;
.data:0040B32D                 db    ? ;
.data:0040B32E                 db    ? ;
.data:0040B32F                 db    ? ;
.data:0040B330                 db    ? ;
.data:0040B331                 db    ? ;
.data:0040B332                 db    ? ;
.data:0040B333                 db    ? ;
.data:0040B334                 db    ? ;
.data:0040B335                 db    ? ;
.data:0040B336                 db    ? ;
.data:0040B337                 db    ? ;
.data:0040B338                 db    ? ;
.data:0040B339                 db    ? ;
.data:0040B33A                 db    ? ;
.data:0040B33B                 db    ? ;
.data:0040B33C                 db    ? ;
.data:0040B33D                 db    ? ;
.data:0040B33E                 db    ? ;
.data:0040B33F                 db    ? ;
.data:0040B340                 db    ? ;
.data:0040B341                 db    ? ;
.data:0040B342                 db    ? ;
.data:0040B343                 db    ? ;
.data:0040B344                 db    ? ;
.data:0040B345                 db    ? ;
.data:0040B346                 db    ? ;
.data:0040B347                 db    ? ;
.data:0040B348                 db    ? ;
.data:0040B349                 db    ? ;
.data:0040B34A                 db    ? ;
.data:0040B34B                 db    ? ;
.data:0040B34C                 db    ? ;
.data:0040B34D                 db    ? ;
.data:0040B34E                 db    ? ;
.data:0040B34F                 db    ? ;
.data:0040B350                 db    ? ;
.data:0040B351                 db    ? ;
.data:0040B352                 db    ? ;
.data:0040B353                 db    ? ;
.data:0040B354                 db    ? ;
.data:0040B355                 db    ? ;
.data:0040B356                 db    ? ;
.data:0040B357                 db    ? ;
.data:0040B358                 db    ? ;
.data:0040B359                 db    ? ;
.data:0040B35A                 db    ? ;
.data:0040B35B                 db    ? ;
.data:0040B35C                 db    ? ;
.data:0040B35D                 db    ? ;
.data:0040B35E                 db    ? ;
.data:0040B35F                 db    ? ;
.data:0040B360                 db    ? ;
.data:0040B361                 db    ? ;
.data:0040B362                 db    ? ;
.data:0040B363                 db    ? ;
.data:0040B364                 db    ? ;
.data:0040B365                 db    ? ;
.data:0040B366                 db    ? ;
.data:0040B367                 db    ? ;
.data:0040B368                 db    ? ;
.data:0040B369                 db    ? ;
.data:0040B36A                 db    ? ;
.data:0040B36B                 db    ? ;
.data:0040B36C                 db    ? ;
.data:0040B36D                 db    ? ;
.data:0040B36E                 db    ? ;
.data:0040B36F                 db    ? ;
.data:0040B370                 db    ? ;
.data:0040B371                 db    ? ;
.data:0040B372                 db    ? ;
.data:0040B373                 db    ? ;
.data:0040B374                 db    ? ;
.data:0040B375                 db    ? ;
.data:0040B376                 db    ? ;
.data:0040B377                 db    ? ;
.data:0040B378                 db    ? ;
.data:0040B379                 db    ? ;
.data:0040B37A                 db    ? ;
.data:0040B37B                 db    ? ;
.data:0040B37C                 db    ? ;
.data:0040B37D                 db    ? ;
.data:0040B37E                 db    ? ;
.data:0040B37F                 db    ? ;
.data:0040B380                 db    ? ;
.data:0040B381                 db    ? ;
.data:0040B382                 db    ? ;
.data:0040B383                 db    ? ;
.data:0040B384                 db    ? ;
.data:0040B385                 db    ? ;
.data:0040B386                 db    ? ;
.data:0040B387                 db    ? ;
.data:0040B388                 db    ? ;
.data:0040B389                 db    ? ;
.data:0040B38A                 db    ? ;
.data:0040B38B                 db    ? ;
.data:0040B38C                 db    ? ;
.data:0040B38D                 db    ? ;
.data:0040B38E                 db    ? ;
.data:0040B38F                 db    ? ;
.data:0040B390                 db    ? ;
.data:0040B391                 db    ? ;
.data:0040B392                 db    ? ;
.data:0040B393                 db    ? ;
.data:0040B394                 db    ? ;
.data:0040B395                 db    ? ;
.data:0040B396                 db    ? ;
.data:0040B397                 db    ? ;
.data:0040B398                 db    ? ;
.data:0040B399                 db    ? ;
.data:0040B39A                 db    ? ;
.data:0040B39B                 db    ? ;
.data:0040B39C                 db    ? ;
.data:0040B39D                 db    ? ;
.data:0040B39E                 db    ? ;
.data:0040B39F                 db    ? ;
.data:0040B3A0                 db    ? ;
.data:0040B3A1                 db    ? ;
.data:0040B3A2                 db    ? ;
.data:0040B3A3                 db    ? ;
.data:0040B3A4                 db    ? ;
.data:0040B3A5                 db    ? ;
.data:0040B3A6                 db    ? ;
.data:0040B3A7                 db    ? ;
.data:0040B3A8                 db    ? ;
.data:0040B3A9                 db    ? ;
.data:0040B3AA                 db    ? ;
.data:0040B3AB                 db    ? ;
.data:0040B3AC                 db    ? ;
.data:0040B3AD                 db    ? ;
.data:0040B3AE                 db    ? ;
.data:0040B3AF                 db    ? ;
.data:0040B3B0                 db    ? ;
.data:0040B3B1                 db    ? ;
.data:0040B3B2                 db    ? ;
.data:0040B3B3                 db    ? ;
.data:0040B3B4                 db    ? ;
.data:0040B3B5                 db    ? ;
.data:0040B3B6                 db    ? ;
.data:0040B3B7                 db    ? ;
.data:0040B3B8                 db    ? ;
.data:0040B3B9                 db    ? ;
.data:0040B3BA                 db    ? ;
.data:0040B3BB                 db    ? ;
.data:0040B3BC                 db    ? ;
.data:0040B3BD                 db    ? ;
.data:0040B3BE                 db    ? ;
.data:0040B3BF                 db    ? ;
.data:0040B3C0                 db    ? ;
.data:0040B3C1                 db    ? ;
.data:0040B3C2                 db    ? ;
.data:0040B3C3                 db    ? ;
.data:0040B3C4                 db    ? ;
.data:0040B3C5                 db    ? ;
.data:0040B3C6                 db    ? ;
.data:0040B3C7                 db    ? ;
.data:0040B3C8                 db    ? ;
.data:0040B3C9                 db    ? ;
.data:0040B3CA                 db    ? ;
.data:0040B3CB                 db    ? ;
.data:0040B3CC                 db    ? ;
.data:0040B3CD                 db    ? ;
.data:0040B3CE                 db    ? ;
.data:0040B3CF                 db    ? ;
.data:0040B3D0                 db    ? ;
.data:0040B3D1                 db    ? ;
.data:0040B3D2                 db    ? ;
.data:0040B3D3                 db    ? ;
.data:0040B3D4                 db    ? ;
.data:0040B3D5                 db    ? ;
.data:0040B3D6                 db    ? ;
.data:0040B3D7                 db    ? ;
.data:0040B3D8                 db    ? ;
.data:0040B3D9                 db    ? ;
.data:0040B3DA                 db    ? ;
.data:0040B3DB                 db    ? ;
.data:0040B3DC                 db    ? ;
.data:0040B3DD                 db    ? ;
.data:0040B3DE                 db    ? ;
.data:0040B3DF                 db    ? ;
.data:0040B3E0                 db    ? ;
.data:0040B3E1                 db    ? ;
.data:0040B3E2                 db    ? ;
.data:0040B3E3                 db    ? ;
.data:0040B3E4 byte_40B3E4     db ?                    ; DATA XREF: sub_4080A0+35↑w
.data:0040B3E4                                         ; SimConnect_RequestResponseTimes+116↑w ...
.data:0040B3E5                 align 4
.data:0040B3E8 dword_40B3E8    dd ?                    ; DATA XREF: sub_4080A0+17↑w
.data:0040B3E8                                         ; SimConnect_RequestResponseTimes+1B0↑r
.data:0040B3EC dword_40B3EC    dd ?                    ; DATA XREF: sub_4080A0+20↑w
.data:0040B3EC                                         ; SimConnect_RequestResponseTimes+1B6↑r
.data:0040B3F0 dword_40B3F0    dd ?                    ; DATA XREF: sub_4080A0+29↑w
.data:0040B3F0                                         ; SimConnect_RequestResponseTimes+1DA↑r ...
.data:0040B3F4 dword_40B3F4    dd ?                    ; DATA XREF: sub_4080A0+2F↑w
.data:0040B3F4                                         ; SimConnect_RequestResponseTimes+1E2↑r ...
.data:0040B3F8 dword_40B3F8    dd ?                    ; DATA XREF: _ctor_0+72↑r
.data:0040B3F8                                         ; _ctor_0+81↑w
.data:0040B3FC dword_40B3FC    dd ?                    ; DATA XREF: sub_401900+32↑w
.data:0040B3FC                                         ; sub_401900+48↑w ...
.data:0040B400 dword_40B400    dd ?                    ; DATA XREF: sub_4015F0+91↑w
.data:0040B400                                         ; sub_4016B0+5↑w ...
.data:0040B404 ; LONG Target
.data:0040B404 Target          dd ?                    ; DATA XREF: InstallPackage+39↑o
.data:0040B408 ; LONG Addend
.data:0040B408 Addend          dd ?                    ; DATA XREF: InitializeComponent_0+F2↑o
.data:0040B408                                         ; sub_402780+33↑o ...
.data:0040B40C byte_40B40C     db ?                    ; DATA XREF: sub_402E00+15↑r
.data:0040B40C                                         ; sub_402E00+52↑w ...
.data:0040B40D byte_40B40D     db ?                    ; DATA XREF: sub_402E80+C3↑w
.data:0040B40D                                         ; sub_403330+91↑w
.data:0040B40E                 align 10h
.data:0040B410 ; void *dword_40B410
.data:0040B410 dword_40B410    dd ?                    ; DATA XREF: InitializeComponent_0+FD↑r
.data:0040B410                                         ; InitializeComponent_0+105↑w ...
.data:0040B414 dword_40B414    dd ?                    ; DATA XREF: InitializeComponent_0:loc_402712↑r
.data:0040B414                                         ; InitializeComponent_0+120↑w ...
.data:0040B418 dword_40B418    dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+27↑w
.data:0040B41C dword_40B41C    dd ?                    ; DATA XREF: _CRT_INIT(x,x,x):loc_4083EF↑r
.data:0040B41C                                         ; _CRT_INIT(x,x,x)+8E↑w ...
.data:0040B420 ; LONG Destination
.data:0040B420 Destination     dd ?                    ; DATA XREF: _CRT_INIT(x,x,x)+43↑o
.data:0040B420                                         ; _CRT_INIT(x,x,x)+10D↑o
.data:0040B424 dword_40B424    dd ?                    ; DATA XREF: _pre_c_init+1E↑w
.data:0040B424                                         ; _CRT_INIT(x,x,x)+152↑r ...
.data:0040B428 dword_40B428    dd ?                    ; DATA XREF: _pre_c_init+19↑w
.data:0040B428                                         ; _CRT_INIT(x,x,x):loc_4084BD↑r ...
.data:0040B42C dword_40B42C    dd ?                    ; DATA XREF: _CRT_INIT(x,x,x):loc_40844D↑r
.data:0040B42C                                         ; _CRT_INIT(x,x,x)+D6↑o ...
.data:0040B430                 align 1000h
.data:0040B430 _data           ends
.data:0040B430
.data:0040B430
.data:0040B430                 end DllEntryPoint
